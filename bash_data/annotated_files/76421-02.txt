    1: /* cairo - a vector graphics library with display and print output
    1:  *
    1:  * Copyright © 2002 University of Southern California
    1:  * Copyright © 2005 Red Hat, Inc.
    1:  *
    1:  * This library is free software; you can redistribute it and/or
    1:  * modify it either under the terms of the GNU Lesser General Public
    1:  * License version 2.1 as published by the Free Software Foundation
    1:  * (the "LGPL") or, at your option, under the terms of the Mozilla
    1:  * Public License Version 1.1 (the "MPL"). If you do not alter this
    1:  * notice, a recipient may use your version of this file under either
    1:  * the MPL or the LGPL.
    1:  *
    1:  * You should have received a copy of the LGPL along with this library
    1:  * in the file COPYING-LGPL-2.1; if not, write to the Free Software
70960:  * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335, USA
    1:  * You should have received a copy of the MPL along with this library
    1:  * in the file COPYING-MPL-1.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License
    1:  * Version 1.1 (the "License"); you may not use this file except in
    1:  * compliance with the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
    1:  * OF ANY KIND, either express or implied. See the LGPL or the MPL for
    1:  * the specific language governing rights and limitations.
    1:  *
    1:  * The Original Code is the cairo graphics library.
    1:  *
    1:  * The Initial Developer of the Original Code is University of Southern
    1:  * California.
    1:  *
    1:  * Contributor(s):
    1:  *	Carl D. Worth <cworth@cworth.org>
    1:  */
    1: 
    1: /*
    1:  * These definitions are solely for use by the implementation of cairo
    1:  * and constitute no kind of standard.  If you need any of these
    1:  * functions, please drop me a note.  Either the library needs new
    1:  * functionality, or there's a way to do what you need using the
    1:  * existing published interfaces. cworth@cworth.org
    1:  */
    1: 
    1: #ifndef _CAIROINT_H_
    1: #define _CAIROINT_H_
    1: 
    1: #if HAVE_CONFIG_H
    1: #include "config.h"
    1: #endif
    1: 
21379: #ifdef _MSC_VER
21379: #define cairo_public __declspec(dllexport)
21379: #endif
18904: 
    1: #include <assert.h>
    1: #include <stdlib.h>
    1: #include <string.h>
    1: #include <stdarg.h>
 4133: #include <stddef.h>
    1: 
    1: #ifdef _MSC_VER
    1: #define _USE_MATH_DEFINES
    1: #endif
    1: #include <math.h>
    1: #include <limits.h>
    1: #include <stdio.h>
    1: 
    1: #include "cairo.h"
 6154: #include <pixman.h>
    1: 
 8452: #include "cairo-compiler-private.h"
 8452: 
21379: #if CAIRO_HAS_PS_SURFACE  || \
21379:     CAIRO_HAS_PDF_SURFACE || \
21379:     CAIRO_HAS_SVG_SURFACE || \
21379:     CAIRO_HAS_WIN32_SURFACE
18904: #define CAIRO_HAS_FONT_SUBSET 1
18904: #endif
18904: 
26419: #if CAIRO_HAS_PS_SURFACE || CAIRO_HAS_PDF_SURFACE || CAIRO_HAS_FONT_SUBSET
18904: #define CAIRO_HAS_PDF_OPERATORS 1
18904: #endif
18904: 
    1: CAIRO_BEGIN_DECLS
    1: 
29608: #if _WIN32 && !_WIN32_WCE /* Permissions on WinCE? No worries! */
10414: cairo_private FILE *
10414: _cairo_win32_tmpfile (void);
10414: #define tmpfile() _cairo_win32_tmpfile()
10414: #endif
10414: 
    1: #undef MIN
    1: #define MIN(a, b) ((a) < (b) ? (a) : (b))
    1: 
    1: #undef MAX
    1: #define MAX(a, b) ((a) > (b) ? (a) : (b))
    1: 
    1: #ifndef FALSE
    1: #define FALSE 0
    1: #endif
    1: 
    1: #ifndef TRUE
    1: #define TRUE 1
    1: #endif
    1: 
    1: #ifndef M_PI
    1: #define M_PI 3.14159265358979323846
    1: #endif
    1: 
12589: #ifndef NDEBUG
12589: #undef assert
12589: #define assert(expr) \
12589:     do { if (!(expr)) fprintf(stderr, "Assertion failed at %s:%d: %s\n", \
12589:           __FILE__, __LINE__, #expr); } while (0)
12589: #endif
12589: 
10694: #ifndef M_SQRT2
10694: #define M_SQRT2 1.41421356237309504880
10694: #endif
10694: 
11708: #ifndef M_SQRT1_2
11708: #define M_SQRT1_2 0.707106781186547524400844362104849039
11708: #endif
11708: 
 4133: #undef  ARRAY_LENGTH
 4133: #define ARRAY_LENGTH(__array) ((int) (sizeof (__array) / sizeof (__array[0])))
  314: 
26419: #undef STRINGIFY
26419: #undef STRINGIFY_ARG
26419: #define STRINGIFY(macro_or_string)    STRINGIFY_ARG (macro_or_string)
26419: #define STRINGIFY_ARG(contents)       #contents
18904: 
41340: #if defined (__GNUC__)
18904: #define cairo_container_of(ptr, type, member) ({ \
29608:     const __typeof__ (((type *) 0)->member) *mptr__ = (ptr); \
18904:     (type *) ((char *) mptr__ - offsetof (type, member)); \
18904: })
18904: #else
18904: #define cairo_container_of(ptr, type, member) \
70960:     ((type *)((char *) (ptr) - (char *) &((type *)0)->member))
18904: #endif
11886: 
11886: 
    1: #define ASSERT_NOT_REACHED		\
    1: do {					\
70960:     assert (!"reached");		\
    1: } while (0)
16122: #define COMPILE_TIME_ASSERT1(condition, line)		\
29608:     typedef int compile_time_assertion_at_line_##line##_failed [(condition)?1:-1]
16122: #define COMPILE_TIME_ASSERT0(condition, line)	COMPILE_TIME_ASSERT1(condition, line)
16122: #define COMPILE_TIME_ASSERT(condition)		COMPILE_TIME_ASSERT0(condition, __LINE__)
    1: 
70960: #define CAIRO_ALPHA_IS_CLEAR(alpha) ((alpha) <= ((double)0x00ff / (double)0xffff))
70960: #define CAIRO_ALPHA_SHORT_IS_CLEAR(alpha) ((alpha) <= 0x00ff)
70960: 
    1: #define CAIRO_ALPHA_IS_OPAQUE(alpha) ((alpha) >= ((double)0xff00 / (double)0xffff))
 4133: #define CAIRO_ALPHA_SHORT_IS_OPAQUE(alpha) ((alpha) >= 0xff00)
    1: #define CAIRO_ALPHA_IS_ZERO(alpha) ((alpha) <= 0.0)
    1: 
70960: #define CAIRO_COLOR_IS_CLEAR(color) CAIRO_ALPHA_SHORT_IS_CLEAR ((color)->alpha_short)
 4133: #define CAIRO_COLOR_IS_OPAQUE(color) CAIRO_ALPHA_SHORT_IS_OPAQUE ((color)->alpha_short)
 4133: 
    1: /* Reverse the bits in a byte with 7 operations (no 64-bit):
    1:  * Devised by Sean Anderson, July 13, 2001.
    1:  * Source: http://graphics.stanford.edu/~seander/bithacks.html#ReverseByteWith32Bits
    1:  */
    1: #define CAIRO_BITSWAP8(c) ((((c) * 0x0802LU & 0x22110LU) | ((c) * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16)
    1: 
13979: /* Return the number of 1 bits in mask.
13979:  *
13979:  * GCC 3.4 supports a "population count" builtin, which on many targets is
13979:  * implemented with a single instruction. There is a fallback definition
13979:  * in libgcc in case a target does not have one, which should be just as
13979:  * good as the open-coded solution below, (which is "HACKMEM 169").
13979:  */
32473: static inline int cairo_const
13979: _cairo_popcount (uint32_t mask)
13979: {
13979: #if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
13979:     return __builtin_popcount (mask);
13979: #else
13979:     register int y;
13979: 
13979:     y = (mask >> 1) &033333333333;
13979:     y = mask - y - ((y >>1) & 033333333333);
13979:     return (((y + (y >> 3)) & 030707070707) % 077);
13979: #endif
13979: }
13979: 
    1: #ifdef WORDS_BIGENDIAN
    1: #define CAIRO_BITSWAP8_IF_LITTLE_ENDIAN(c) (c)
    1: #else
    1: #define CAIRO_BITSWAP8_IF_LITTLE_ENDIAN(c) CAIRO_BITSWAP8(c)
    1: #endif
    1: 
  314: #ifdef WORDS_BIGENDIAN
  314: 
  314: #define cpu_to_be16(v) (v)
  314: #define be16_to_cpu(v) (v)
  314: #define cpu_to_be32(v) (v)
  314: #define be32_to_cpu(v) (v)
  314: 
  314: #else
  314: 
32473: static inline uint16_t cairo_const
  314: cpu_to_be16(uint16_t v)
  314: {
  314:     return (v << 8) | (v >> 8);
  314: }
  314: 
32473: static inline uint16_t cairo_const
  314: be16_to_cpu(uint16_t v)
  314: {
  314:     return cpu_to_be16 (v);
  314: }
  314: 
32473: static inline uint32_t cairo_const
  314: cpu_to_be32(uint32_t v)
  314: {
  314:     return (cpu_to_be16 (v) << 16) | cpu_to_be16 (v >> 16);
  314: }
  314: 
32473: static inline uint32_t cairo_const
  314: be32_to_cpu(uint32_t v)
  314: {
  314:     return cpu_to_be32 (v);
  314: }
  314: 
  314: #endif
  314: 
41340: 
41340: /* The glibc versions of ispace() and isdigit() are slow in UTF-8 locales.
41340:  */
41340: 
41340: static inline int cairo_const
41340: _cairo_isspace (int c)
41340: {
41340:     return (c == 0x20 || (c >= 0x09 && c <= 0x0d));
41340: }
41340: 
41340: static inline int cairo_const
41340: _cairo_isdigit (int c)
41340: {
41340:     return (c >= '0' && c <= '9');
41340: }
41340: 
 4133: #include "cairo-types-private.h"
    1: #include "cairo-cache-private.h"
 8452: #include "cairo-reference-count-private.h"
26419: #include "cairo-spans-private.h"
    1: 
    1: cairo_private void
16122: _cairo_box_from_doubles (cairo_box_t *box,
16122: 			 double *x1, double *y1,
16122: 			 double *x2, double *y2);
16122: 
16122: cairo_private void
16122: _cairo_box_to_doubles (const cairo_box_t *box,
16122: 		       double *x1, double *y1,
16122: 		       double *x2, double *y2);
16122: 
16122: cairo_private void
16122: _cairo_box_from_rectangle (cairo_box_t                 *box,
16122: 			   const cairo_rectangle_int_t *rectangle);
16122: 
49318: cairo_private cairo_bool_t
49318: _cairo_rectangle_contains (const cairo_rectangle_int_t *containing_rectangle,
49318: 			   const cairo_rectangle_int_t *contained_rectangle);
49318: 
16122: cairo_private void
16122: _cairo_box_round_to_rectangle (const cairo_box_t     *box,
16122: 			       cairo_rectangle_int_t *rectangle);
    1: 
41340: cairo_private void
41340: _cairo_boxes_get_extents (const cairo_box_t *boxes,
41340: 			  int num_boxes,
41340: 			  cairo_box_t *extents);
41340: 
41340: static inline void
41340: _cairo_unbounded_rectangle_init (cairo_rectangle_int_t *rect)
41340: {
41340:     rect->x = CAIRO_RECT_INT_MIN;
41340:     rect->y = CAIRO_RECT_INT_MIN;
41340:     rect->width = CAIRO_RECT_INT_MAX - CAIRO_RECT_INT_MIN;
41340:     rect->height = CAIRO_RECT_INT_MAX - CAIRO_RECT_INT_MIN;
41340: }
41340: 
26419: cairo_private cairo_bool_t
26419: _cairo_rectangle_intersect (cairo_rectangle_int_t *dst,
26419: 			    const cairo_rectangle_int_t *src);
    1: 
11708: cairo_private cairo_bool_t
32473: _cairo_box_intersects_line_segment (cairo_box_t *box,
32473: 	                            cairo_line_t *line) cairo_pure;
11708: 
11708: cairo_private cairo_bool_t
32473: _cairo_box_contains_point (cairo_box_t *box,
32473: 	                   const cairo_point_t *point) cairo_pure;
26419: 
16122: /* cairo-array.c structures and functions */
    1: 
    1: cairo_private void
    1: _cairo_array_init (cairo_array_t *array, int element_size);
    1: 
    1: cairo_private void
    1: _cairo_array_init_snapshot (cairo_array_t	*array,
    1: 			    const cairo_array_t *other);
    1: 
    1: cairo_private void
    1: _cairo_array_fini (cairo_array_t *array);
    1: 
    1: cairo_private cairo_status_t
13979: _cairo_array_grow_by (cairo_array_t *array, unsigned int additional);
    1: 
    1: cairo_private void
    1: _cairo_array_truncate (cairo_array_t *array, unsigned int num_elements);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_array_append (cairo_array_t *array, const void *element);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_array_append_multiple (cairo_array_t	*array,
    1: 			      const void	*elements,
    1: 			      int		 num_elements);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_array_allocate (cairo_array_t	 *array,
    1: 		       unsigned int	  num_elements,
    1: 		       void		**elements);
    1: 
    1: cairo_private void *
    1: _cairo_array_index (cairo_array_t *array, unsigned int index);
    1: 
    1: cairo_private void
    1: _cairo_array_copy_element (cairo_array_t *array, int index, void *dst);
    1: 
    1: cairo_private int
    1: _cairo_array_num_elements (cairo_array_t *array);
    1: 
    1: cairo_private int
    1: _cairo_array_size (cairo_array_t *array);
    1: 
32473: typedef struct {
32473:     const cairo_user_data_key_t *key;
32473:     void *user_data;
32473:     cairo_destroy_func_t destroy;
32473: } cairo_user_data_slot_t;
32473: 
    1: cairo_private void
    1: _cairo_user_data_array_init (cairo_user_data_array_t *array);
    1: 
    1: cairo_private void
    1: _cairo_user_data_array_fini (cairo_user_data_array_t *array);
    1: 
    1: cairo_private void *
    1: _cairo_user_data_array_get_data (cairo_user_data_array_t     *array,
    1: 				 const cairo_user_data_key_t *key);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_user_data_array_set_data (cairo_user_data_array_t     *array,
    1: 				 const cairo_user_data_key_t *key,
    1: 				 void			     *user_data,
    1: 				 cairo_destroy_func_t	      destroy);
    1: 
26419: cairo_private cairo_status_t
26419: _cairo_user_data_array_copy (cairo_user_data_array_t	*dst,
26419: 			     cairo_user_data_array_t	*src);
26419: 
26419: cairo_private void
26419: _cairo_user_data_array_foreach (cairo_user_data_array_t     *array,
26419: 				void (*func) (const void *key,
26419: 					      void *elt,
26419: 					      void *closure),
26419: 				void *closure);
26419: 
26419: #define _CAIRO_HASH_INIT_VALUE 5381
26419: 
    1: cairo_private unsigned long
    1: _cairo_hash_string (const char *c);
    1: 
26419: cairo_private unsigned long
26419: _cairo_hash_bytes (unsigned long hash,
26419: 		   const void *bytes,
26419: 		   unsigned int length);
26419: 
26419: #define _cairo_scaled_glyph_index(g) ((g)->hash_entry.hash)
26419: #define _cairo_scaled_glyph_set_index(g, i)  ((g)->hash_entry.hash = (i))
    1: 
 4133: #include "cairo-scaled-font-private.h"
    1: 
    1: struct _cairo_font_face {
    1:     /* hash_entry must be first */
    1:     cairo_hash_entry_t hash_entry;
    1:     cairo_status_t status;
 8452:     cairo_reference_count_t ref_count;
    1:     cairo_user_data_array_t user_data;
    1:     const cairo_font_face_backend_t *backend;
    1: };
    1: 
    1: cairo_private void
70960: _cairo_reset_static_data (void);
70960: 
70960: cairo_private void
26419: _cairo_toy_font_face_reset_static_data (void);
    1: 
    1: cairo_private void
    1: _cairo_ft_font_reset_static_data (void);
    1: 
    1: /* the font backend interface */
    1: 
    1: struct _cairo_unscaled_font_backend {
    1:     void (*destroy)     	    (void		             *unscaled_font);
    1: };
    1: 
11708: /* #cairo_toy_font_face_t - simple family/slant/weight font faces used for
    1:  * the built-in font API
    1:  */
    1: 
    1: typedef struct _cairo_toy_font_face {
    1:     cairo_font_face_t base;
    1:     const char *family;
    1:     cairo_bool_t owns_family;
    1:     cairo_font_slant_t slant;
    1:     cairo_font_weight_t weight;
26419: 
26419:     cairo_font_face_t *impl_face; /* The non-toy font face this actually uses */
    1: } cairo_toy_font_face_t;
    1: 
    1: typedef enum _cairo_scaled_glyph_info {
    1:     CAIRO_SCALED_GLYPH_INFO_METRICS	 = (1 << 0),
    1:     CAIRO_SCALED_GLYPH_INFO_SURFACE	 = (1 << 1),
16122:     CAIRO_SCALED_GLYPH_INFO_PATH	 = (1 << 2),
41340:     CAIRO_SCALED_GLYPH_INFO_RECORDING_SURFACE = (1 << 3)
    1: } cairo_scaled_glyph_info_t;
    1: 
  314: typedef struct _cairo_scaled_font_subset {
  314:     cairo_scaled_font_t *scaled_font;
  314:     unsigned int font_id;
  314:     unsigned int subset_id;
  314: 
  314:     /* Index of glyphs array is subset_glyph_index.
  314:      * Value of glyphs array is scaled_font_glyph_index.
  314:      */
  314:     unsigned long *glyphs;
  314:     unsigned long *to_unicode;
16122:     char          **utf8;
 8452:     char          **glyph_names;
  314:     unsigned int num_glyphs;
 4133:     cairo_bool_t is_composite;
41340:     cairo_bool_t is_scaled;
  314: } cairo_scaled_font_subset_t;
  314: 
    1: struct _cairo_scaled_font_backend {
    1:     cairo_font_type_t type;
    1: 
    1:     void
    1:     (*fini)		(void			*scaled_font);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*scaled_glyph_init)	(void			     *scaled_font,
    1: 				 cairo_scaled_glyph_t	     *scaled_glyph,
    1: 				 cairo_scaled_glyph_info_t    info);
    1: 
    1:     /* A backend only needs to implement this or ucs4_to_index(), not
    1:      * both. This allows the backend to do something more sophisticated
    1:      * then just converting characters one by one.
    1:      */
 4133:     cairo_warn cairo_int_status_t
    1:     (*text_to_glyphs) (void                       *scaled_font,
    1: 		       double		           x,
    1: 		       double		           y,
    1: 		       const char	          *utf8,
18904: 		       int		           utf8_len,
    1: 		       cairo_glyph_t	         **glyphs,
18904: 		       int		          *num_glyphs,
18904: 		       cairo_text_cluster_t      **clusters,
18904: 		       int		          *num_clusters,
21379: 		       cairo_text_cluster_flags_t *cluster_flags);
    1: 
    1:     unsigned long
    1:     (*ucs4_to_index)		(void			     *scaled_font,
    1: 				 uint32_t		      ucs4);
 4133:     cairo_warn cairo_int_status_t
    1:     (*show_glyphs)	(void			*scaled_font,
    1: 			 cairo_operator_t	 op,
26419: 			 const cairo_pattern_t	*pattern,
    1: 			 cairo_surface_t	*surface,
    1: 			 int			 source_x,
    1: 			 int			 source_y,
    1: 			 int			 dest_x,
    1: 			 int			 dest_y,
    1: 			 unsigned int		 width,
    1: 			 unsigned int		 height,
    1: 			 cairo_glyph_t		*glyphs,
16122: 			 int			 num_glyphs,
41340: 			 cairo_region_t		*clip_region,
16122: 			 int			*remaining_glyphs);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*load_truetype_table)(void		        *scaled_font,
    1:                            unsigned long         tag,
    1:                            long                  offset,
    1:                            unsigned char        *buffer,
    1:                            unsigned long        *length);
  314: 
29608:     /* ucs4 is set to -1 if the unicode character could not be found
29608:      * for the glyph */
10414:     cairo_warn cairo_int_status_t
16122:     (*index_to_ucs4)(void                       *scaled_font,
16122: 		     unsigned long               index,
16122:                      uint32_t                   *ucs4);
    1: };
    1: 
    1: struct _cairo_font_face_backend {
    1:     cairo_font_type_t	type;
    1: 
26419:     cairo_warn cairo_status_t
26419:     (*create_for_toy)  (cairo_toy_font_face_t	*toy_face,
26419: 			cairo_font_face_t      **font_face);
26419: 
    1:     /* The destroy() function is allowed to resurrect the font face
    1:      * by re-referencing. This is needed for the FreeType backend.
    1:      */
    1:     void
    1:     (*destroy)     (void			*font_face);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*scaled_font_create) (void				*font_face,
    1: 			   const cairo_matrix_t		*font_matrix,
    1: 			   const cairo_matrix_t		*ctm,
    1: 			   const cairo_font_options_t	*options,
    1: 			   cairo_scaled_font_t	       **scaled_font);
32473: 
32473:     cairo_font_face_t *
32473:     (*get_implementation) (void				*font_face,
32473: 			   const cairo_matrix_t		*font_matrix,
32473: 			   const cairo_matrix_t		*ctm,
32473: 			   const cairo_font_options_t	*options);
    1: };
    1: 
26419: extern const cairo_private struct _cairo_font_face_backend _cairo_user_font_face_backend;
21379: 
    1: /* concrete font backends */
    1: #if CAIRO_HAS_FT_FONT
    1: 
26419: extern const cairo_private struct _cairo_font_face_backend _cairo_ft_font_face_backend;
    1: 
    1: #endif
    1: 
    1: #if CAIRO_HAS_WIN32_FONT
    1: 
26419: extern const cairo_private struct _cairo_font_face_backend _cairo_win32_font_face_backend;
    1: 
    1: #endif
    1: 
37412: #if CAIRO_HAS_DWRITE_FONT
37412: 
37412: extern const cairo_private struct _cairo_font_face_backend _cairo_dwrite_font_face_backend;
37412: 
37412: #endif
37412: 
13979: #if CAIRO_HAS_QUARTZ_FONT
13979: 
26419: extern const cairo_private struct _cairo_font_face_backend _cairo_quartz_font_face_backend;
    1: 
    1: #endif
    1: 
    1: struct _cairo_surface_backend {
    1:     cairo_surface_type_t type;
    1: 
    1:     cairo_surface_t *
    1:     (*create_similar)		(void			*surface,
    1: 				 cairo_content_t	 content,
    1: 				 int			 width,
    1: 				 int			 height);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*finish)			(void			*surface);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*acquire_source_image)	(void                    *abstract_surface,
    1: 				 cairo_image_surface_t  **image_out,
    1: 				 void                   **image_extra);
    1: 
    1:     void
    1:     (*release_source_image)	(void                   *abstract_surface,
    1: 				 cairo_image_surface_t  *image,
    1: 				 void                   *image_extra);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*acquire_dest_image)       (void                    *abstract_surface,
 4133: 				 cairo_rectangle_int_t   *interest_rect,
    1: 				 cairo_image_surface_t  **image_out,
 4133: 				 cairo_rectangle_int_t   *image_rect,
    1: 				 void                   **image_extra);
    1: 
    1:     void
    1:     (*release_dest_image)       (void                    *abstract_surface,
 4133: 				 cairo_rectangle_int_t   *interest_rect,
    1: 				 cairo_image_surface_t   *image,
 4133: 				 cairo_rectangle_int_t   *image_rect,
    1: 				 void                    *image_extra);
    1: 
    1:     /* Create a new surface (@clone_out) with the following
    1:      * characteristics:
    1:      *
    1:      * 1. It is as compatible as possible with @surface (in terms of
    1:      *    efficiency)
    1:      *
21379:      * 2. It has the same contents as @src within the given rectangle.
    1:      *
21379:      * 3. The offset of the similar surface with respect to the original
21379:      *    surface is returned in the clone_offset vector.
21379:      *    - if you clone the entire surface, this vector is zero.
21379:      *    - if you clone (src_x, src_y)x(w, h) the vector is (src_x, src_y);
    1:      */
 4133:     cairo_warn cairo_status_t
    1:     (*clone_similar)            (void                   *surface,
    1: 				 cairo_surface_t        *src,
    1: 				 int                     src_x,
    1: 				 int                     src_y,
    1: 				 int                     width,
    1: 				 int                     height,
21379: 				 int                    *clone_offset_x,
21379: 				 int                    *clone_offset_y,
    1: 				 cairo_surface_t       **clone_out);
    1: 
41340:     /* XXX remove to a separate cairo_surface_compositor_t */
    1:     /* XXX: dst should be the first argument for consistency */
 4133:     cairo_warn cairo_int_status_t
    1:     (*composite)		(cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*src,
26419: 				 const cairo_pattern_t	*mask,
    1: 				 void			*dst,
    1: 				 int			 src_x,
    1: 				 int			 src_y,
    1: 				 int			 mask_x,
    1: 				 int			 mask_y,
    1: 				 int			 dst_x,
    1: 				 int			 dst_y,
    1: 				 unsigned int		 width,
41340: 				 unsigned int		 height,
41340: 				 cairo_region_t		*clip_region);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*fill_rectangles)		(void			 *surface,
    1: 				 cairo_operator_t	  op,
    1: 				 const cairo_color_t     *color,
 4133: 				 cairo_rectangle_int_t   *rects,
    1: 				 int			  num_rects);
    1: 
    1:     /* XXX: dst should be the first argument for consistency */
 4133:     cairo_warn cairo_int_status_t
    1:     (*composite_trapezoids)	(cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*pattern,
    1: 				 void			*dst,
    1: 				 cairo_antialias_t	 antialias,
    1: 				 int			 src_x,
    1: 				 int			 src_y,
    1: 				 int			 dst_x,
    1: 				 int			 dst_y,
    1: 				 unsigned int		 width,
    1: 				 unsigned int		 height,
    1: 				 cairo_trapezoid_t	*traps,
41340: 				 int			 num_traps,
41340: 				 cairo_region_t		*region);
    1: 
26419:     cairo_warn cairo_span_renderer_t *
26419:     (*create_span_renderer)	(cairo_operator_t			 op,
26419: 				 const cairo_pattern_t			*pattern,
26419:                                  void					*dst,
26419:                                  cairo_antialias_t			 antialias,
41340:                                  const cairo_composite_rectangles_t *rects,
41340: 				 cairo_region_t *clip_region);
26419: 
26419:     cairo_warn cairo_bool_t
26419:     (*check_span_renderer)	(cairo_operator_t			 op,
26419: 				 const cairo_pattern_t			*pattern,
26419:                                  void					*dst,
41340:                                  cairo_antialias_t			 antialias);
26419: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*copy_page)		(void			*surface);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*show_page)		(void			*surface);
    1: 
    1:     /* Get the extents of the current surface. For many surface types
    1:      * this will be as simple as { x=0, y=0, width=surface->width,
    1:      * height=surface->height}.
    1:      *
16122:      * If this function is not implemented, or if it returns
41340:      * FALSE the surface is considered to be
41340:      * boundless and infinite bounds are used for it.
    1:      */
41340:     cairo_warn cairo_bool_t
    1:     (*get_extents)		(void			 *surface,
16122: 				 cairo_rectangle_int_t   *extents);
    1: 
    1:     /*
    1:      * This is an optional entry to let the surface manage its own glyph
    1:      * resources. If null, render against this surface, using image
    1:      * surfaces as glyphs.
    1:      */
 4133:     cairo_warn cairo_int_status_t
    1:     (*old_show_glyphs)		(cairo_scaled_font_t	        *font,
    1: 				 cairo_operator_t		 op,
26419: 				 const cairo_pattern_t		*pattern,
    1: 				 void				*surface,
    1: 				 int				 source_x,
    1: 				 int				 source_y,
    1: 				 int				 dest_x,
    1: 				 int				 dest_y,
    1: 				 unsigned int			 width,
    1: 				 unsigned int			 height,
    1: 				 cairo_glyph_t			*glyphs,
41340: 				 int				 num_glyphs,
41340: 				 cairo_region_t			*clip_region);
    1: 
    1:     void
    1:     (*get_font_options)         (void                  *surface,
    1: 				 cairo_font_options_t  *options);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*flush)                    (void                  *surface);
    1: 
 4133:     cairo_warn cairo_status_t
    1:     (*mark_dirty_rectangle)     (void                  *surface,
    1: 				 int                    x,
    1: 				 int                    y,
    1: 				 int                    width,
    1: 				 int                    height);
    1: 
    1:     void
    1:     (*scaled_font_fini)		(cairo_scaled_font_t   *scaled_font);
    1: 
    1:     void
    1:     (*scaled_glyph_fini)	(cairo_scaled_glyph_t	*scaled_glyph,
    1: 				 cairo_scaled_font_t	*scaled_font);
    1: 
    1:     /* OK, I'm starting over somewhat by defining the 5 top-level
    1:      * drawing operators for the surface backend here with consistent
    1:      * naming and argument-order conventions. */
 4133:     cairo_warn cairo_int_status_t
    1:     (*paint)			(void			*surface,
    1: 				 cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*source,
41340: 				 cairo_clip_t		*clip);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*mask)			(void			*surface,
    1: 				 cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*source,
26419: 				 const cairo_pattern_t	*mask,
41340: 				 cairo_clip_t		*clip);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*stroke)			(void			*surface,
    1: 				 cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*source,
    1: 				 cairo_path_fixed_t	*path,
70960: 				 const cairo_stroke_style_t	*style,
70960: 				 const cairo_matrix_t	*ctm,
70960: 				 const cairo_matrix_t	*ctm_inverse,
    1: 				 double			 tolerance,
26419: 				 cairo_antialias_t	 antialias,
41340: 				 cairo_clip_t		*clip);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*fill)			(void			*surface,
    1: 				 cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*source,
    1: 				 cairo_path_fixed_t	*path,
    1: 				 cairo_fill_rule_t	 fill_rule,
    1: 				 double			 tolerance,
26419: 				 cairo_antialias_t	 antialias,
41340: 				 cairo_clip_t           *clip);
    1: 
 4133:     cairo_warn cairo_int_status_t
    1:     (*show_glyphs)		(void			*surface,
    1: 				 cairo_operator_t	 op,
26419: 				 const cairo_pattern_t	*source,
    1: 				 cairo_glyph_t		*glyphs,
    1: 				 int			 num_glyphs,
16122: 				 cairo_scaled_font_t	*scaled_font,
41340: 				 cairo_clip_t           *clip,
41340: 				 int			*remaining_glyphs);
    1: 
    1:     cairo_surface_t *
    1:     (*snapshot)			(void			*surface);
 4133: 
 4133:     cairo_bool_t
 4133:     (*is_similar)		(void			*surface_a,
70960: 	                         void			*surface_b);
 4133: 
 6154:     cairo_warn cairo_int_status_t
 6154:     (*fill_stroke)		(void			*surface,
 6154: 				 cairo_operator_t	 fill_op,
26419: 				 const cairo_pattern_t	*fill_source,
 6154: 				 cairo_fill_rule_t	 fill_rule,
 6154: 				 double			 fill_tolerance,
 6154: 				 cairo_antialias_t	 fill_antialias,
 6154: 				 cairo_path_fixed_t	*path,
 6154: 				 cairo_operator_t	 stroke_op,
26419: 				 const cairo_pattern_t	*stroke_source,
70960: 				 const cairo_stroke_style_t	*stroke_style,
70960: 				 const cairo_matrix_t	*stroke_ctm,
70960: 				 const cairo_matrix_t	*stroke_ctm_inverse,
 6154: 				 double			 stroke_tolerance,
26419: 				 cairo_antialias_t	 stroke_antialias,
41340: 				 cairo_clip_t		*clip);
16122: 
16122:     cairo_surface_t *
16122:     (*create_solid_pattern_surface)
16122: 			        (void			      *surface,
26419: 				 const cairo_solid_pattern_t  *solid_pattern);
26419: 
26419:     cairo_bool_t
26419:     (*can_repaint_solid_pattern_surface)
26419: 			        (void			      *surface,
26419: 				 const cairo_solid_pattern_t  *solid_pattern);
16122: 
16122:     cairo_bool_t
16122:     (*has_show_text_glyphs)	(void			    *surface);
16122: 
16122:     cairo_warn cairo_int_status_t
16122:     (*show_text_glyphs)		(void			    *surface,
16122: 				 cairo_operator_t	     op,
26419: 				 const cairo_pattern_t	    *source,
16122: 				 const char		    *utf8,
16122: 				 int			     utf8_len,
16122: 				 cairo_glyph_t		    *glyphs,
16122: 				 int			     num_glyphs,
16122: 				 const cairo_text_cluster_t *clusters,
16122: 				 int			     num_clusters,
21379: 				 cairo_text_cluster_flags_t  cluster_flags,
26419: 				 cairo_scaled_font_t	    *scaled_font,
41340: 				 cairo_clip_t               *clip);
    1: };
    1: 
 4133: #include "cairo-surface-private.h"
    1: 
    1: struct _cairo_image_surface {
    1:     cairo_surface_t base;
    1: 
 6154:     pixman_format_code_t pixman_format;
    1:     cairo_format_t format;
    1:     unsigned char *data;
    1: 
    1:     int width;
    1:     int height;
    1:     int stride;
    1:     int depth;
    1: 
    1:     pixman_image_t *pixman_image;
26419: 
26419:     unsigned owns_data : 1;
26419:     unsigned transparency : 2;
    1: };
    1: 
16122: extern const cairo_private cairo_surface_backend_t _cairo_image_surface_backend;
    1: 
    1: #define CAIRO_EXTEND_SURFACE_DEFAULT CAIRO_EXTEND_NONE
    1: #define CAIRO_EXTEND_GRADIENT_DEFAULT CAIRO_EXTEND_PAD
13980: #define CAIRO_FILTER_DEFAULT CAIRO_FILTER_GOOD
    1: 
70960: extern const cairo_private cairo_solid_pattern_t _cairo_pattern_clear;
26419: extern const cairo_private cairo_solid_pattern_t _cairo_pattern_black;
70960: extern const cairo_private cairo_solid_pattern_t _cairo_pattern_white;
    1: 
    1: typedef struct _cairo_surface_attributes {
    1:     cairo_matrix_t matrix;
    1:     cairo_extend_t extend;
    1:     cairo_filter_t filter;
41340:     cairo_bool_t has_component_alpha;
    1:     int		   x_offset;
    1:     int		   y_offset;
    1:     void	   *extra;
    1: } cairo_surface_attributes_t;
    1: 
    1: typedef struct _cairo_traps {
    1:     cairo_status_t status;
    1: 
41340:     const cairo_box_t *limits;
41340:     int num_limits;
41340: 
41340:     unsigned int maybe_region : 1; /* hint: 0 implies that it cannot be */
41340:     unsigned int has_intersections : 1;
41340:     unsigned int is_rectilinear : 1;
41340:     unsigned int is_rectangular : 1;
  314: 
    1:     int num_traps;
    1:     int traps_size;
  314:     cairo_trapezoid_t *traps;
41340:     cairo_trapezoid_t  traps_embedded[16];
    1: } cairo_traps_t;
    1: 
    1: #define CAIRO_FONT_SLANT_DEFAULT   CAIRO_FONT_SLANT_NORMAL
    1: #define CAIRO_FONT_WEIGHT_DEFAULT  CAIRO_FONT_WEIGHT_NORMAL
    1: 
    1: #define CAIRO_WIN32_FONT_FAMILY_DEFAULT "Arial"
13979: #define CAIRO_QUARTZ_FONT_FAMILY_DEFAULT  "Helvetica"
    1: #define CAIRO_FT_FONT_FAMILY_DEFAULT     ""
26419: #define CAIRO_USER_FONT_FAMILY_DEFAULT     "@cairo:"
    1: 
37412: #if   CAIRO_HAS_DWRITE_FONT
37412: 
37412: #define CAIRO_FONT_FAMILY_DEFAULT CAIRO_WIN32_FONT_FAMILY_DEFAULT
37412: #define CAIRO_FONT_FACE_BACKEND_DEFAULT &_cairo_dwrite_font_face_backend
37412: 
37412: #elif CAIRO_HAS_WIN32_FONT
    1: 
    1: #define CAIRO_FONT_FAMILY_DEFAULT CAIRO_WIN32_FONT_FAMILY_DEFAULT
26419: #define CAIRO_FONT_FACE_BACKEND_DEFAULT &_cairo_win32_font_face_backend
    1: 
13979: #elif CAIRO_HAS_QUARTZ_FONT
13979: 
13979: #define CAIRO_FONT_FAMILY_DEFAULT CAIRO_QUARTZ_FONT_FAMILY_DEFAULT
26419: #define CAIRO_FONT_FACE_BACKEND_DEFAULT &_cairo_quartz_font_face_backend
    1: 
    1: #elif CAIRO_HAS_FT_FONT
    1: 
    1: #define CAIRO_FONT_FAMILY_DEFAULT CAIRO_FT_FONT_FAMILY_DEFAULT
26419: #define CAIRO_FONT_FACE_BACKEND_DEFAULT &_cairo_ft_font_face_backend
    1: 
10414: #else
10414: 
21379: #define CAIRO_FONT_FAMILY_DEFAULT CAIRO_FT_FONT_FAMILY_DEFAULT
26419: #define CAIRO_FONT_FACE_BACKEND_DEFAULT &_cairo_user_font_face_backend
10414: 
    1: #endif
    1: 
    1: #define CAIRO_GSTATE_OPERATOR_DEFAULT	CAIRO_OPERATOR_OVER
    1: #define CAIRO_GSTATE_TOLERANCE_DEFAULT	0.1
    1: #define CAIRO_GSTATE_FILL_RULE_DEFAULT	CAIRO_FILL_RULE_WINDING
    1: #define CAIRO_GSTATE_LINE_WIDTH_DEFAULT	2.0
    1: #define CAIRO_GSTATE_LINE_CAP_DEFAULT	CAIRO_LINE_CAP_BUTT
    1: #define CAIRO_GSTATE_LINE_JOIN_DEFAULT	CAIRO_LINE_JOIN_MITER
    1: #define CAIRO_GSTATE_MITER_LIMIT_DEFAULT	10.0
    1: #define CAIRO_GSTATE_DEFAULT_FONT_SIZE  10.0
    1: 
 6154: #define CAIRO_SURFACE_RESOLUTION_DEFAULT 72.0
    1: #define CAIRO_SURFACE_FALLBACK_RESOLUTION_DEFAULT 300.0
    1: 
    1: typedef struct _cairo_stroke_face {
    1:     cairo_point_t ccw;
    1:     cairo_point_t point;
    1:     cairo_point_t cw;
    1:     cairo_slope_t dev_vector;
    1:     cairo_point_double_t usr_vector;
    1: } cairo_stroke_face_t;
    1: 
    1: /* cairo.c */
26419: 
32473: static inline double cairo_const
26419: _cairo_restrict_value (double value, double min, double max)
26419: {
26419:     if (value < min)
26419: 	return min;
26419:     else if (value > max)
26419: 	return max;
26419:     else
26419: 	return value;
26419: }
26419: 
26419: /* C99 round() rounds to the nearest integral value with halfway cases rounded
26419:  * away from 0. _cairo_round rounds halfway cases toward negative infinity.
26419:  * This matches the rounding behaviour of _cairo_lround. */
32473: static inline double cairo_const
26419: _cairo_round (double r)
26419: {
26419:     return floor (r + .5);
26419: }
    1: 
70960: #if DISABLE_SOME_FLOATING_POINT
    1: cairo_private int
32473: _cairo_lround (double d) cairo_const;
70960: #else
70960: #define _cairo_lround lround
70960: #endif
70960: 
70960: cairo_private uint16_t
70960: _cairo_half_from_float (float f) cairo_const;
26419: 
    1: cairo_private cairo_bool_t
32473: _cairo_operator_bounded_by_mask (cairo_operator_t op) cairo_const;
    1: 
    1: cairo_private cairo_bool_t
32473: _cairo_operator_bounded_by_source (cairo_operator_t op) cairo_const;
    1: 
70960: enum {
70960:     CAIRO_OPERATOR_BOUND_BY_MASK = 1 << 1,
70960:     CAIRO_OPERATOR_BOUND_BY_SOURCE = 1 << 2,
70960: };
70960: 
70960: cairo_private uint32_t
70960: _cairo_operator_bounded_by_either (cairo_operator_t op) cairo_const;
16122: /* cairo-color.c */
    1: cairo_private const cairo_color_t *
32473: _cairo_stock_color (cairo_stock_t stock) cairo_pure;
    1: 
    1: #define CAIRO_COLOR_WHITE       _cairo_stock_color (CAIRO_STOCK_WHITE)
    1: #define CAIRO_COLOR_BLACK       _cairo_stock_color (CAIRO_STOCK_BLACK)
    1: #define CAIRO_COLOR_TRANSPARENT _cairo_stock_color (CAIRO_STOCK_TRANSPARENT)
    1: 
  314: cairo_private uint16_t
32473: _cairo_color_double_to_short (double d) cairo_const;
  314: 
    1: cairo_private void
    1: _cairo_color_init (cairo_color_t *color);
    1: 
    1: cairo_private void
    1: _cairo_color_init_rgb (cairo_color_t *color,
    1: 		       double red, double green, double blue);
    1: 
    1: cairo_private void
    1: _cairo_color_init_rgba (cairo_color_t *color,
    1: 			double red, double green, double blue,
    1: 			double alpha);
    1: 
    1: cairo_private void
    1: _cairo_color_multiply_alpha (cairo_color_t *color,
    1: 			     double	    alpha);
    1: 
    1: cairo_private void
    1: _cairo_color_get_rgba (cairo_color_t *color,
    1: 		       double	     *red,
    1: 		       double	     *green,
    1: 		       double	     *blue,
    1: 		       double	     *alpha);
    1: 
    1: cairo_private void
    1: _cairo_color_get_rgba_premultiplied (cairo_color_t *color,
    1: 				     double	   *red,
    1: 				     double	   *green,
    1: 				     double	   *blue,
    1: 				     double	   *alpha);
    1: 
 4133: cairo_private cairo_bool_t
 4133: _cairo_color_equal (const cairo_color_t *color_a,
32473:                     const cairo_color_t *color_b) cairo_pure;
 4133: 
70960: cairo_private cairo_bool_t
70960: _cairo_color_stop_equal (const cairo_color_stop_t *color_a,
70960: 			 const cairo_color_stop_t *color_b) cairo_pure;
70960: 
70960: cairo_private cairo_content_t
70960: _cairo_color_get_content (const cairo_color_t *color) cairo_pure;
70960: 
 4133: /* cairo-font-face.c */
    1: 
26419: extern const cairo_private cairo_font_face_t _cairo_font_face_nil;
    1: 
    1: cairo_private void
    1: _cairo_font_face_init (cairo_font_face_t               *font_face,
    1: 		       const cairo_font_face_backend_t *backend);
    1: 
 8452: cairo_private cairo_status_t
 8452: _cairo_font_face_set_error (cairo_font_face_t *font_face,
 8452: 	                    cairo_status_t     status);
 8452: 
    1: cairo_private void
    1: _cairo_unscaled_font_init (cairo_unscaled_font_t               *font,
    1: 			   const cairo_unscaled_font_backend_t *backend);
    1: 
 4133: cairo_private_no_warn cairo_unscaled_font_t *
    1: _cairo_unscaled_font_reference (cairo_unscaled_font_t *font);
    1: 
    1: cairo_private void
    1: _cairo_unscaled_font_destroy (cairo_unscaled_font_t *font);
    1: 
32473: /* cairo-font-face-twin.c */
32473: 
32346: cairo_private cairo_font_face_t *
32473: _cairo_font_face_twin_create_fallback (void);
32343: 
26419: cairo_private cairo_status_t
26419: _cairo_font_face_twin_create_for_toy (cairo_toy_font_face_t   *toy_face,
26419: 				      cairo_font_face_t      **font_face);
21379: 
21379: /* cairo-font-face-twin-data.c */
21379: 
21379: extern const cairo_private int8_t _cairo_twin_outlines[];
21379: extern const cairo_private uint16_t _cairo_twin_charmap[128];
21379: 
    1: /* cairo-font-options.c */
    1: 
    1: cairo_private void
    1: _cairo_font_options_init_default (cairo_font_options_t *options);
    1: 
    1: cairo_private void
    1: _cairo_font_options_init_copy (cairo_font_options_t		*options,
    1: 			       const cairo_font_options_t	*other);
    1: 
70960: cairo_private void
70960: _cairo_font_options_set_lcd_filter (cairo_font_options_t   *options,
70960: 				   cairo_lcd_filter_t  lcd_filter);
70960: 
70960: cairo_private cairo_lcd_filter_t
70960: _cairo_font_options_get_lcd_filter (const cairo_font_options_t *options);
70960: 
70960: cairo_private void
70960: _cairo_font_options_set_round_glyph_positions (cairo_font_options_t   *options,
70960: 					       cairo_round_glyph_positions_t  round);
70960: 
70960: cairo_private cairo_round_glyph_positions_t
70960: _cairo_font_options_get_round_glyph_positions (const cairo_font_options_t *options);
70960: 
16122: /* cairo-hull.c */
    1: cairo_private cairo_status_t
    1: _cairo_hull_compute (cairo_pen_vertex_t *vertices, int *num_vertices);
    1: 
    1: /* cairo-lzw.c */
    1: cairo_private unsigned char *
    1: _cairo_lzw_compress (unsigned char *data, unsigned long *size_in_out);
    1: 
18904: /* cairo-misc.c */
18904: cairo_private cairo_status_t
18904: _cairo_validate_text_clusters (const char		   *utf8,
18904: 			       int			    utf8_len,
18904: 			       const cairo_glyph_t	   *glyphs,
18904: 			       int			    num_glyphs,
18904: 			       const cairo_text_cluster_t  *clusters,
18904: 			       int			    num_clusters,
21379: 			       cairo_text_cluster_flags_t   cluster_flags);
18904: 
26419: cairo_private cairo_status_t
26419: _cairo_intern_string (const char **str_inout, int len);
26419: 
26419: cairo_private void
26419: _cairo_intern_string_reset_static_data (void);
26419: 
16122: /* cairo-path-fixed.c */
41340: cairo_private cairo_path_fixed_t *
41340: _cairo_path_fixed_create (void);
41340: 
    1: cairo_private void
    1: _cairo_path_fixed_init (cairo_path_fixed_t *path);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_init_copy (cairo_path_fixed_t *path,
41340: 			     const cairo_path_fixed_t *other);
    1: 
 6154: cairo_private cairo_bool_t
41340: _cairo_path_fixed_is_equal (const cairo_path_fixed_t *path,
41340: 			    const cairo_path_fixed_t *other);
    1: 
    1: cairo_private void
    1: _cairo_path_fixed_fini (cairo_path_fixed_t *path);
    1: 
    1: cairo_private void
    1: _cairo_path_fixed_destroy (cairo_path_fixed_t *path);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_move_to (cairo_path_fixed_t  *path,
    1: 			   cairo_fixed_t	x,
    1: 			   cairo_fixed_t	y);
    1: 
    1: cairo_private void
    1: _cairo_path_fixed_new_sub_path (cairo_path_fixed_t *path);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_rel_move_to (cairo_path_fixed_t *path,
    1: 			       cairo_fixed_t	   dx,
    1: 			       cairo_fixed_t	   dy);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_line_to (cairo_path_fixed_t *path,
    1: 			   cairo_fixed_t	x,
    1: 			   cairo_fixed_t	y);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_rel_line_to (cairo_path_fixed_t *path,
    1: 			       cairo_fixed_t	   dx,
    1: 			       cairo_fixed_t	   dy);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_curve_to (cairo_path_fixed_t	*path,
    1: 			    cairo_fixed_t x0, cairo_fixed_t y0,
    1: 			    cairo_fixed_t x1, cairo_fixed_t y1,
    1: 			    cairo_fixed_t x2, cairo_fixed_t y2);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_rel_curve_to (cairo_path_fixed_t *path,
    1: 				cairo_fixed_t dx0, cairo_fixed_t dy0,
    1: 				cairo_fixed_t dx1, cairo_fixed_t dy1,
    1: 				cairo_fixed_t dx2, cairo_fixed_t dy2);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_path_fixed_close_path (cairo_path_fixed_t *path);
    1: 
 8452: cairo_private cairo_bool_t
    1: _cairo_path_fixed_get_current_point (cairo_path_fixed_t *path,
    1: 				     cairo_fixed_t	*x,
    1: 				     cairo_fixed_t	*y);
    1: 
    1: typedef cairo_status_t
    1: (cairo_path_fixed_move_to_func_t) (void		 *closure,
26419: 				   const cairo_point_t *point);
    1: 
    1: typedef cairo_status_t
    1: (cairo_path_fixed_line_to_func_t) (void		 *closure,
26419: 				   const cairo_point_t *point);
    1: 
    1: typedef cairo_status_t
    1: (cairo_path_fixed_curve_to_func_t) (void	  *closure,
26419: 				    const cairo_point_t *p0,
26419: 				    const cairo_point_t *p1,
26419: 				    const cairo_point_t *p2);
    1: 
    1: typedef cairo_status_t
    1: (cairo_path_fixed_close_path_func_t) (void *closure);
    1: 
    1: cairo_private cairo_status_t
16122: _cairo_path_fixed_interpret (const cairo_path_fixed_t	  *path,
    1: 		       cairo_direction_t		   dir,
    1: 		       cairo_path_fixed_move_to_func_t	  *move_to,
    1: 		       cairo_path_fixed_line_to_func_t	  *line_to,
    1: 		       cairo_path_fixed_curve_to_func_t	  *curve_to,
    1: 		       cairo_path_fixed_close_path_func_t *close_path,
    1: 		       void				  *closure);
    1: 
10694: cairo_private cairo_status_t
16122: _cairo_path_fixed_interpret_flat (const cairo_path_fixed_t *path,
10694: 		       cairo_direction_t		   dir,
10694: 		       cairo_path_fixed_move_to_func_t	  *move_to,
10694: 		       cairo_path_fixed_line_to_func_t	  *line_to,
10694: 		       cairo_path_fixed_close_path_func_t *close_path,
10694: 		       void				  *closure,
10694: 		       double				  tolerance);
10694: 
70960: cairo_private cairo_bool_t
70960: _cairo_path_fixed_extents (const cairo_path_fixed_t *path,
70960: 			   cairo_box_t *box);
70960: 
26419: cairo_private void
41340: _cairo_path_fixed_approximate_clip_extents (const cairo_path_fixed_t	*path,
26419: 					    cairo_rectangle_int_t *extents);
26419: 
26419: cairo_private void
41340: _cairo_path_fixed_approximate_fill_extents (const cairo_path_fixed_t *path,
26419: 					    cairo_rectangle_int_t *extents);
26419: 
26419: cairo_private void
41340: _cairo_path_fixed_fill_extents (const cairo_path_fixed_t	*path,
41340: 				cairo_fill_rule_t	 fill_rule,
41340: 				double			 tolerance,
41340: 				cairo_rectangle_int_t	*extents);
41340: 
41340: cairo_private void
41340: _cairo_path_fixed_approximate_stroke_extents (const cairo_path_fixed_t *path,
70960: 					      const cairo_stroke_style_t *style,
26419: 					      const cairo_matrix_t *ctm,
26419: 					      cairo_rectangle_int_t *extents);
26419: 
41340: cairo_private cairo_status_t
41340: _cairo_path_fixed_stroke_extents (const cairo_path_fixed_t *path,
70960: 				  const cairo_stroke_style_t *style,
41340: 				  const cairo_matrix_t *ctm,
41340: 				  const cairo_matrix_t *ctm_inverse,
41340: 				  double tolerance,
41340: 				  cairo_rectangle_int_t *extents);
41340: 
26419: cairo_private void
16122: _cairo_path_fixed_transform (cairo_path_fixed_t	*path,
41340: 			     const cairo_matrix_t	*matrix);
    1: 
12588: cairo_private cairo_bool_t
41340: _cairo_path_fixed_is_box (const cairo_path_fixed_t *path,
41340:                           cairo_box_t *box);
12588: 
12588: cairo_private cairo_bool_t
41340: _cairo_path_fixed_is_rectangle (const cairo_path_fixed_t *path,
12588: 				cairo_box_t        *box);
12588: 
41340: /* cairo-path-in-fill.c */
12588: cairo_private cairo_bool_t
41340: _cairo_path_fixed_in_fill (const cairo_path_fixed_t	*path,
26419: 			   cairo_fill_rule_t	 fill_rule,
26419: 			   double		 tolerance,
26419: 			   double		 x,
41340: 			   double		 y);
26419: 
16122: /* cairo-path-fill.c */
    1: cairo_private cairo_status_t
41340: _cairo_path_fixed_fill_to_polygon (const cairo_path_fixed_t *path,
41340: 				   double              tolerance,
41340: 				   cairo_polygon_t      *polygon);
41340: 
41340: cairo_private cairo_int_status_t
41340: _cairo_path_fixed_fill_rectilinear_to_traps (const cairo_path_fixed_t *path,
41340: 					     cairo_fill_rule_t fill_rule,
41340: 					     cairo_traps_t *traps);
41340: 
70960: cairo_private cairo_status_t
70960: _cairo_path_fixed_fill_rectilinear_to_boxes (const cairo_path_fixed_t *path,
70960: 					     cairo_fill_rule_t fill_rule,
70960: 					     cairo_boxes_t *boxes);
70960: 
41340: cairo_private cairo_region_t *
41340: _cairo_path_fixed_fill_rectilinear_to_region (const cairo_path_fixed_t	*path,
41340: 					      cairo_fill_rule_t	 fill_rule,
41340: 					      const cairo_rectangle_int_t *extents);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_path_fixed_fill_to_traps (const cairo_path_fixed_t   *path,
    1: 				 cairo_fill_rule_t	     fill_rule,
    1: 				 double			     tolerance,
    1: 				 cairo_traps_t		    *traps);
    1: 
16122: /* cairo-path-stroke.c */
    1: cairo_private cairo_status_t
41340: _cairo_path_fixed_stroke_to_polygon (const cairo_path_fixed_t	*path,
70960: 				     const cairo_stroke_style_t	*stroke_style,
41340: 				     const cairo_matrix_t	*ctm,
41340: 				     const cairo_matrix_t	*ctm_inverse,
41340: 				     double		 tolerance,
41340: 				     cairo_polygon_t	*polygon);
41340: 
41340: cairo_private cairo_int_status_t
41340: _cairo_path_fixed_stroke_rectilinear_to_traps (const cairo_path_fixed_t	*path,
70960: 					       const cairo_stroke_style_t	*stroke_style,
41340: 					       const cairo_matrix_t	*ctm,
41340: 					       cairo_traps_t		*traps);
70960: 
70960: cairo_private cairo_int_status_t
70960: _cairo_path_fixed_stroke_rectilinear_to_boxes (const cairo_path_fixed_t	*path,
70960: 					       const cairo_stroke_style_t	*stroke_style,
70960: 					       const cairo_matrix_t	*ctm,
70960: 					       cairo_boxes_t		*boxes);
70960: 
41340: cairo_private cairo_status_t
41340: _cairo_path_fixed_stroke_to_traps (const cairo_path_fixed_t	*path,
70960: 				   const cairo_stroke_style_t	*stroke_style,
26419: 				   const cairo_matrix_t	*ctm,
26419: 				   const cairo_matrix_t	*ctm_inverse,
    1: 				   double		 tolerance,
    1: 				   cairo_traps_t	*traps);
    1: 
41340: cairo_private cairo_status_t
41340: _cairo_path_fixed_stroke_to_shaper (cairo_path_fixed_t	*path,
70960: 				   const cairo_stroke_style_t	*stroke_style,
70960: 				   const cairo_matrix_t	*ctm,
70960: 				   const cairo_matrix_t	*ctm_inverse,
41340: 				   double		 tolerance,
41340: 				   cairo_status_t (*add_triangle) (void *closure,
41340: 								   const cairo_point_t triangle[3]),
41340: 				   cairo_status_t (*add_triangle_fan) (void *closure,
41340: 								       const cairo_point_t *midpt,
41340: 								       const cairo_point_t *points,
41340: 								       int npoints),
41340: 				   cairo_status_t (*add_quad) (void *closure,
41340: 							       const cairo_point_t quad[4]),
41340: 				   void *closure);
41340: 
    1: /* cairo-scaled-font.c */
    1: 
16122: cairo_private void
16122: _cairo_scaled_font_freeze_cache (cairo_scaled_font_t *scaled_font);
16122: 
16122: cairo_private void
16122: _cairo_scaled_font_thaw_cache (cairo_scaled_font_t *scaled_font);
16122: 
16122: cairo_private void
16122: _cairo_scaled_font_reset_cache (cairo_scaled_font_t *scaled_font);
16122: 
16122: cairo_private cairo_status_t
16122: _cairo_scaled_font_set_error (cairo_scaled_font_t *scaled_font,
16122: 			      cairo_status_t status);
16122: 
16122: cairo_private cairo_scaled_font_t *
16122: _cairo_scaled_font_create_in_error (cairo_status_t status);
16122: 
16122: cairo_private void
16122: _cairo_scaled_font_reset_static_data (void);
16122: 
21379: cairo_private cairo_status_t
16122: _cairo_scaled_font_register_placeholder_and_unlock_font_map (cairo_scaled_font_t *scaled_font);
16122: 
16122: cairo_private void
16122: _cairo_scaled_font_unregister_placeholder_and_lock_font_map (cairo_scaled_font_t *scaled_font);
16122: 
    1: cairo_private cairo_status_t
    1: _cairo_scaled_font_init (cairo_scaled_font_t               *scaled_font,
    1: 			 cairo_font_face_t		   *font_face,
    1: 			 const cairo_matrix_t              *font_matrix,
    1: 			 const cairo_matrix_t              *ctm,
    1: 			 const cairo_font_options_t	   *options,
    1: 			 const cairo_scaled_font_backend_t *backend);
    1: 
11708: cairo_private cairo_status_t
    1: _cairo_scaled_font_set_metrics (cairo_scaled_font_t	    *scaled_font,
    1: 				cairo_font_extents_t	    *fs_metrics);
    1: 
21379: /* This should only be called on an error path by a scaled_font constructor */
    1: cairo_private void
    1: _cairo_scaled_font_fini (cairo_scaled_font_t *scaled_font);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_scaled_font_font_extents (cairo_scaled_font_t  *scaled_font,
    1: 				 cairo_font_extents_t *extents);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_scaled_font_glyph_device_extents (cairo_scaled_font_t	 *scaled_font,
    1: 					 const cairo_glyph_t	 *glyphs,
    1: 					 int                      num_glyphs,
41340: 					 cairo_rectangle_int_t   *extents,
41340: 					 cairo_bool_t		 *overlap);
41340: 
41340: cairo_private void
41340: _cairo_scaled_font_glyph_approximate_extents (cairo_scaled_font_t	 *scaled_font,
41340: 					      const cairo_glyph_t	 *glyphs,
41340: 					      int                      num_glyphs,
10483: 					      cairo_rectangle_int_t   *extents);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_scaled_font_show_glyphs (cairo_scaled_font_t *scaled_font,
    1: 				cairo_operator_t     op,
26419: 				const cairo_pattern_t *source,
    1: 				cairo_surface_t	    *surface,
    1: 				int		     source_x,
    1: 				int		     source_y,
    1: 				int		     dest_x,
    1: 				int		     dest_y,
    1: 				unsigned int	     width,
    1: 				unsigned int	     height,
    1: 				cairo_glyph_t	    *glyphs,
41340: 				int		     num_glyphs,
41340: 				cairo_region_t	    *clip_region);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_scaled_font_glyph_path (cairo_scaled_font_t *scaled_font,
    1: 			       const cairo_glyph_t *glyphs,
    1: 			       int                  num_glyphs,
    1: 			       cairo_path_fixed_t  *path);
    1: 
    1: cairo_private void
    1: _cairo_scaled_glyph_set_metrics (cairo_scaled_glyph_t *scaled_glyph,
    1: 				 cairo_scaled_font_t *scaled_font,
    1: 				 cairo_text_extents_t *fs_metrics);
    1: 
    1: cairo_private void
    1: _cairo_scaled_glyph_set_surface (cairo_scaled_glyph_t *scaled_glyph,
    1: 				 cairo_scaled_font_t *scaled_font,
    1: 				 cairo_image_surface_t *surface);
    1: 
    1: cairo_private void
    1: _cairo_scaled_glyph_set_path (cairo_scaled_glyph_t *scaled_glyph,
    1: 			      cairo_scaled_font_t *scaled_font,
    1: 			      cairo_path_fixed_t *path);
    1: 
16122: cairo_private void
41340: _cairo_scaled_glyph_set_recording_surface (cairo_scaled_glyph_t *scaled_glyph,
16122:                                            cairo_scaled_font_t *scaled_font,
41340:                                            cairo_surface_t *recording_surface);
16122: 
    1: cairo_private cairo_int_status_t
    1: _cairo_scaled_glyph_lookup (cairo_scaled_font_t *scaled_font,
    1: 			    unsigned long index,
    1: 			    cairo_scaled_glyph_info_t info,
    1: 			    cairo_scaled_glyph_t **scaled_glyph_ret);
    1: 
16122: cairo_private double
16122: _cairo_scaled_font_get_max_scale (cairo_scaled_font_t *scaled_font);
16122: 
    1: cairo_private void
    1: _cairo_scaled_font_map_destroy (void);
    1: 
    1: /* cairo-stroke-style.c */
    1: 
    1: cairo_private void
    1: _cairo_stroke_style_init (cairo_stroke_style_t *style);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_stroke_style_init_copy (cairo_stroke_style_t *style,
70960: 			       const cairo_stroke_style_t *other);
    1: 
    1: cairo_private void
    1: _cairo_stroke_style_fini (cairo_stroke_style_t *style);
    1: 
11708: cairo_private void
11708: _cairo_stroke_style_max_distance_from_path (const cairo_stroke_style_t *style,
11708:                                             const cairo_matrix_t *ctm,
11708:                                             double *dx, double *dy);
11708: 
41340: cairo_private double
41340: _cairo_stroke_style_dash_period (const cairo_stroke_style_t *style);
41340: 
41340: cairo_private double
41340: _cairo_stroke_style_dash_stroked (const cairo_stroke_style_t *style);
41340: 
41340: cairo_private cairo_bool_t
41340: _cairo_stroke_style_dash_can_approximate (const cairo_stroke_style_t *style,
41340: 					  const cairo_matrix_t *ctm,
41340: 					  double tolerance);
41340: 
41340: cairo_private void
41340: _cairo_stroke_style_dash_approximate (const cairo_stroke_style_t *style,
41340: 				      const cairo_matrix_t *ctm,
41340: 				      double tolerance,
41340: 				      double *dash_offset,
41340: 				      double *dashes,
41340: 				      unsigned int *num_dashes);
41340: 
41340: 
    1: /* cairo-surface.c */
    1: 
10694: cairo_private cairo_surface_t *
10694: _cairo_surface_create_in_error (cairo_status_t status);
    1: 
 8452: cairo_private cairo_status_t
26419: _cairo_surface_copy_mime_data (cairo_surface_t *dst,
26419: 			       cairo_surface_t *src);
26419: 
26419: cairo_private cairo_status_t
    1: _cairo_surface_set_error (cairo_surface_t	*surface,
    1: 			  cairo_status_t	 status);
    1: 
 6154: cairo_private void
 6154: _cairo_surface_set_resolution (cairo_surface_t *surface,
 6154:                                double x_res,
 6154:                                double y_res);
 6154: 
    1: cairo_private cairo_surface_t *
    1: _cairo_surface_create_similar_scratch (cairo_surface_t *other,
    1: 				       cairo_content_t	content,
    1: 				       int		width,
    1: 				       int		height);
    1: 
    1: cairo_private cairo_surface_t *
    1: _cairo_surface_create_similar_solid (cairo_surface_t	    *other,
    1: 				     cairo_content_t	     content,
    1: 				     int		     width,
    1: 				     int		     height,
41340: 				     const cairo_color_t    *color,
41340: 				     cairo_bool_t	     allow_fallback);
16122: 
16122: cairo_private cairo_surface_t *
16122: _cairo_surface_create_solid_pattern_surface (cairo_surface_t	   *other,
26419: 					     const cairo_solid_pattern_t *solid_pattern);
16122: 
16122: cairo_private cairo_int_status_t
16122: _cairo_surface_repaint_solid_pattern_surface (cairo_surface_t	    *other,
16122: 					      cairo_surface_t       *solid_surface,
26419: 					      const cairo_solid_pattern_t *solid_pattern);
    1: 
    1: cairo_private void
    1: _cairo_surface_init (cairo_surface_t			*surface,
    1: 		     const cairo_surface_backend_t	*backend,
70960: 		     cairo_device_t			*device,
    1: 		     cairo_content_t			 content);
    1: 
    1: cairo_private void
    1: _cairo_surface_set_font_options (cairo_surface_t       *surface,
    1: 				 cairo_font_options_t  *options);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_composite (cairo_operator_t	op,
26419: 			  const cairo_pattern_t	*src,
26419: 			  const cairo_pattern_t	*mask,
    1: 			  cairo_surface_t	*dst,
    1: 			  int			 src_x,
    1: 			  int			 src_y,
    1: 			  int			 mask_x,
    1: 			  int			 mask_y,
    1: 			  int			 dst_x,
    1: 			  int			 dst_y,
    1: 			  unsigned int		 width,
41340: 			  unsigned int		 height,
41340: 			  cairo_region_t	*clip_region);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_fill_rectangle (cairo_surface_t	   *surface,
    1: 			       cairo_operator_t	    op,
    1: 			       const cairo_color_t *color,
    1: 			       int		    x,
    1: 			       int		    y,
    1: 			       int		    width,
    1: 			       int		    height);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_fill_region (cairo_surface_t	   *surface,
    1: 			    cairo_operator_t	    op,
    1: 			    const cairo_color_t    *color,
 4133: 			    cairo_region_t         *region);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_fill_rectangles (cairo_surface_t		*surface,
    1: 				cairo_operator_t         op,
    1: 				const cairo_color_t	*color,
 4133: 				cairo_rectangle_int_t	*rects,
    1: 				int			 num_rects);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_paint (cairo_surface_t	*surface,
    1: 		      cairo_operator_t	 op,
26419: 		      const cairo_pattern_t *source,
41340: 		      cairo_clip_t	    *clip);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_mask (cairo_surface_t	*surface,
    1: 		     cairo_operator_t	 op,
26419: 		     const cairo_pattern_t	*source,
26419: 		     const cairo_pattern_t	*mask,
41340: 		     cairo_clip_t		*clip);
    1: 
    1: cairo_private cairo_status_t
 6154: _cairo_surface_fill_stroke (cairo_surface_t	    *surface,
 6154: 			    cairo_operator_t	     fill_op,
26419: 			    const cairo_pattern_t   *fill_source,
 6154: 			    cairo_fill_rule_t	     fill_rule,
 6154: 			    double		     fill_tolerance,
 6154: 			    cairo_antialias_t	     fill_antialias,
 6154: 			    cairo_path_fixed_t	    *path,
 6154: 			    cairo_operator_t	     stroke_op,
26419: 			    const cairo_pattern_t   *stroke_source,
70960: 			    const cairo_stroke_style_t    *stroke_style,
70960: 			    const cairo_matrix_t	    *stroke_ctm,
70960: 			    const cairo_matrix_t	    *stroke_ctm_inverse,
 6154: 			    double		     stroke_tolerance,
26419: 			    cairo_antialias_t	     stroke_antialias,
41340: 			    cairo_clip_t	    *clip);
 6154: 
 6154: cairo_private cairo_status_t
    1: _cairo_surface_stroke (cairo_surface_t		*surface,
    1: 		       cairo_operator_t		 op,
26419: 		       const cairo_pattern_t	*source,
    1: 		       cairo_path_fixed_t	*path,
70960: 		       const cairo_stroke_style_t	*style,
70960: 		       const cairo_matrix_t		*ctm,
70960: 		       const cairo_matrix_t		*ctm_inverse,
    1: 		       double			 tolerance,
26419: 		       cairo_antialias_t	 antialias,
41340: 		       cairo_clip_t		*clip);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_fill (cairo_surface_t	*surface,
    1: 		     cairo_operator_t	 op,
26419: 		     const cairo_pattern_t *source,
    1: 		     cairo_path_fixed_t	*path,
    1: 		     cairo_fill_rule_t	 fill_rule,
    1: 		     double		 tolerance,
26419: 		     cairo_antialias_t	 antialias,
41340: 		     cairo_clip_t	*clip);
    1: 
    1: cairo_private cairo_status_t
16122: _cairo_surface_show_text_glyphs (cairo_surface_t	    *surface,
    1: 				 cairo_operator_t	     op,
26419: 				 const cairo_pattern_t	    *source,
16122: 				 const char		    *utf8,
16122: 				 int			     utf8_len,
    1: 				 cairo_glyph_t		    *glyphs,
    1: 				 int			     num_glyphs,
16122: 				 const cairo_text_cluster_t *clusters,
16122: 				 int			     num_clusters,
21379: 				 cairo_text_cluster_flags_t  cluster_flags,
26419: 				 cairo_scaled_font_t	    *scaled_font,
41340: 				 cairo_clip_t		    *clip);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_surface_paint_extents (cairo_surface_t *surface,
41340: 			      cairo_operator_t		op,
41340: 			      const cairo_pattern_t	*source,
41340: 			      cairo_clip_t		*clip,
41340: 			      cairo_rectangle_int_t	*extents);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_surface_mask_extents (cairo_surface_t *surface,
41340: 			     cairo_operator_t		 op,
41340: 			     const cairo_pattern_t	*source,
41340: 			     const cairo_pattern_t	*mask,
41340: 			     cairo_clip_t		*clip,
41340: 			     cairo_rectangle_int_t	*extents);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_surface_stroke_extents (cairo_surface_t *surface,
41340: 			       cairo_operator_t op,
41340: 			       const cairo_pattern_t *source,
41340: 			       cairo_path_fixed_t	*path,
70960: 			       const cairo_stroke_style_t *style,
41340: 			       const cairo_matrix_t *ctm,
41340: 			       const cairo_matrix_t *ctm_inverse,
41340: 			       double tolerance,
41340: 			       cairo_antialias_t	 antialias,
41340: 			       cairo_clip_t *clip,
41340: 			       cairo_rectangle_int_t *extents);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_surface_fill_extents (cairo_surface_t		*surface,
41340: 			     cairo_operator_t		 op,
41340: 			     const cairo_pattern_t	*source,
41340: 			     cairo_path_fixed_t		*path,
41340: 			     cairo_fill_rule_t		 fill_rule,
41340: 			     double			 tolerance,
41340: 			     cairo_antialias_t		 antialias,
41340: 			     cairo_clip_t		*clip,
41340: 			     cairo_rectangle_int_t	*extents);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_surface_glyphs_extents (cairo_surface_t *surface,
41340: 			       cairo_operator_t	   op,
41340: 			       const cairo_pattern_t *source,
41340: 			       cairo_glyph_t	  *glyphs,
41340: 			       int		   num_glyphs,
41340: 			       cairo_scaled_font_t  *scaled_font,
41340: 			       cairo_clip_t         *clip,
26419: 			       cairo_rectangle_int_t *extents);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_composite_trapezoids (cairo_operator_t	op,
26419: 				     const cairo_pattern_t *pattern,
    1: 				     cairo_surface_t	*dst,
    1: 				     cairo_antialias_t	antialias,
    1: 				     int		src_x,
    1: 				     int		src_y,
    1: 				     int		dst_x,
    1: 				     int		dst_y,
    1: 				     unsigned int	width,
    1: 				     unsigned int	height,
    1: 				     cairo_trapezoid_t	*traps,
41340: 				     int		ntraps,
41340: 				     cairo_region_t	*clip_region);
41340: 
26419: cairo_private cairo_span_renderer_t *
41340: _cairo_surface_create_span_renderer (cairo_operator_t			 op,
26419: 				     const cairo_pattern_t		*pattern,
26419: 				     cairo_surface_t			*dst,
26419: 				     cairo_antialias_t			 antialias,
41340: 				     const cairo_composite_rectangles_t *rects,
41340: 				     cairo_region_t			*clip_region);
26419: 
26419: cairo_private cairo_bool_t
41340: _cairo_surface_check_span_renderer (cairo_operator_t			 op,
26419: 				    const cairo_pattern_t		*pattern,
26419: 				    cairo_surface_t			*dst,
41340: 				    cairo_antialias_t			 antialias);
26419: 
 4133: cairo_private cairo_status_t
    1: _cairo_surface_acquire_source_image (cairo_surface_t         *surface,
    1: 				     cairo_image_surface_t  **image_out,
    1: 				     void                   **image_extra);
    1: 
    1: cairo_private void
    1: _cairo_surface_release_source_image (cairo_surface_t        *surface,
    1: 				     cairo_image_surface_t  *image,
    1: 				     void                   *image_extra);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_acquire_dest_image (cairo_surface_t         *surface,
 4133: 				   cairo_rectangle_int_t   *interest_rect,
    1: 				   cairo_image_surface_t  **image_out,
 4133: 				   cairo_rectangle_int_t   *image_rect,
    1: 				   void                   **image_extra);
    1: 
    1: cairo_private void
    1: _cairo_surface_release_dest_image (cairo_surface_t        *surface,
 4133: 				   cairo_rectangle_int_t  *interest_rect,
    1: 				   cairo_image_surface_t  *image,
 4133: 				   cairo_rectangle_int_t  *image_rect,
    1: 				   void                   *image_extra);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_clone_similar (cairo_surface_t  *surface,
    1: 			      cairo_surface_t  *src,
    1: 			      int               src_x,
    1: 			      int               src_y,
    1: 			      int               width,
    1: 			      int               height,
21379: 			      int              *clone_offset_x,
21379: 			      int              *clone_offset_y,
    1: 			      cairo_surface_t **clone_out);
    1: 
    1: cairo_private cairo_surface_t *
    1: _cairo_surface_snapshot (cairo_surface_t *surface);
    1: 
70960: cairo_private void
32473: _cairo_surface_attach_snapshot (cairo_surface_t *surface,
32473: 				cairo_surface_t *snapshot,
32473: 				cairo_surface_func_t detach_func);
32473: 
32473: cairo_private cairo_surface_t *
32473: _cairo_surface_has_snapshot (cairo_surface_t *surface,
70960: 			     const cairo_surface_backend_t *backend);
32473: 
32473: cairo_private void
32473: _cairo_surface_detach_snapshot (cairo_surface_t *snapshot);
32473: 
 4133: cairo_private cairo_bool_t
 4133: _cairo_surface_is_similar (cairo_surface_t *surface_a,
70960: 	                   cairo_surface_t *surface_b);
 4133: 
41340: cairo_private cairo_bool_t
    1: _cairo_surface_get_extents (cairo_surface_t         *surface,
16122: 			    cairo_rectangle_int_t   *extents);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_old_show_glyphs (cairo_scaled_font_t	*scaled_font,
    1: 				cairo_operator_t	 op,
26419: 				const cairo_pattern_t	*pattern,
    1: 				cairo_surface_t		*surface,
    1: 				int			 source_x,
    1: 				int			 source_y,
    1: 				int			 dest_x,
    1: 				int			 dest_y,
    1: 				unsigned int		 width,
    1: 				unsigned int		 height,
    1: 				cairo_glyph_t		*glyphs,
41340: 				int			 num_glyphs,
41340: 				cairo_region_t		*clip_region);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_composite_fixup_unbounded (cairo_surface_t            *dst,
    1: 					  cairo_surface_attributes_t *src_attr,
    1: 					  int                         src_width,
    1: 					  int                         src_height,
    1: 					  cairo_surface_attributes_t *mask_attr,
    1: 					  int                         mask_width,
    1: 					  int                         mask_height,
    1: 					  int			      src_x,
    1: 					  int			      src_y,
    1: 					  int			      mask_x,
    1: 					  int			      mask_y,
    1: 					  int			      dst_x,
    1: 					  int			      dst_y,
    1: 					  unsigned int		      width,
41340: 					  unsigned int		      height,
41340: 					  cairo_region_t	    *clip_region);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_surface_composite_shape_fixup_unbounded (cairo_surface_t            *dst,
    1: 						cairo_surface_attributes_t *src_attr,
    1: 						int                         src_width,
    1: 						int                         src_height,
    1: 						int                         mask_width,
    1: 						int                         mask_height,
    1: 						int			    src_x,
    1: 						int			    src_y,
    1: 						int			    mask_x,
    1: 						int			    mask_y,
    1: 						int			    dst_x,
    1: 						int			    dst_y,
    1: 						unsigned int		    width,
41340: 						unsigned int		    height,
41340: 						cairo_region_t		    *clip_region);
    1: 
    1: cairo_private cairo_bool_t
    1: _cairo_surface_is_opaque (const cairo_surface_t *surface);
    1: 
28304: cairo_private int
28304: _cairo_surface_get_text_path_fill_threshold (const cairo_surface_t *surface);
28304: 
    1: cairo_private void
    1: _cairo_surface_set_device_scale (cairo_surface_t *surface,
    1: 				 double		  sx,
    1: 				 double		  sy);
    1: 
    1: cairo_private cairo_bool_t
32473: _cairo_surface_has_device_transform (cairo_surface_t *surface) cairo_pure;
    1: 
70960: cairo_private void
70960: _cairo_surface_release_device_reference (cairo_surface_t *surface);
70960: 
16122: /* cairo-image-surface.c */
    1: 
11708: /* XXX: In cairo 1.2.0 we added a new %CAIRO_FORMAT_RGB16_565 but
    1:  * neglected to adjust this macro. The net effect is that it's
    1:  * impossible to externally create an image surface with this
    1:  * format. This is perhaps a good thing since we also neglected to fix
11708:  * up things like cairo_surface_write_to_png() for the new format
    1:  * (-Wswitch-enum will tell you where). Is it obvious that format was
    1:  * added in haste?
    1:  *
    1:  * The reason for the new format was to allow the xlib backend to be
    1:  * used on X servers with a 565 visual. So the new format did its job
    1:  * for that, even without being considered "valid" for the sake of
11708:  * things like cairo_image_surface_create().
    1:  *
    1:  * Since 1.2.0 we ran into the same situtation with X servers with BGR
11708:  * visuals. This time we invented #cairo_internal_format_t instead,
    1:  * (see it for more discussion).
    1:  *
11708:  * The punchline is that %CAIRO_FORMAT_VALID must not conside any
    1:  * internal format to be valid. Also we need to decide if the
    1:  * RGB16_565 should be moved to instead be an internal format. If so,
    1:  * this macro need not change for it. (We probably will need to leave
    1:  * an RGB16_565 value in the header files for the sake of code that
    1:  * might have that value in it.)
    1:  *
    1:  * If we do decide to start fully supporting RGB16_565 as an external
11708:  * format, then %CAIRO_FORMAT_VALID needs to be adjusted to include
    1:  * it. But that should not happen before all necessary code is fixed
11708:  * to support it (at least cairo_surface_write_to_png() and a few spots
    1:  * in cairo-xlib-surface.c--again see -Wswitch-enum).
    1:  */
70960: #define CAIRO_FORMAT_VALID(format) ((format) >= CAIRO_FORMAT_ARGB32 &&		\
70960:                                     (format) <= CAIRO_FORMAT_RGB16_565)
    1: 
13979: /* pixman-required stride alignment in bytes. */
13979: #define CAIRO_STRIDE_ALIGNMENT (sizeof (uint32_t))
13979: #define CAIRO_STRIDE_FOR_WIDTH_BPP(w,bpp) \
26419:    ((((bpp)*(w)+7)/8 + CAIRO_STRIDE_ALIGNMENT-1) & -CAIRO_STRIDE_ALIGNMENT)
13979: 
    1: #define CAIRO_CONTENT_VALID(content) ((content) && 			         \
    1: 				      (((content) & ~(CAIRO_CONTENT_COLOR |      \
    1: 						      CAIRO_CONTENT_ALPHA |      \
    1: 						      CAIRO_CONTENT_COLOR_ALPHA))\
    1: 				       == 0))
    1: 
76421: static inline cairo_bool_t
76421: _cairo_valid_stride_alignment(int stride)
76421: {
76421:     return !(stride & (CAIRO_STRIDE_ALIGNMENT-1));
76421: }
76421: 
11708: cairo_private int
32473: _cairo_format_bits_per_pixel (cairo_format_t format) cairo_const;
10414: 
10414: cairo_private cairo_format_t
32473: _cairo_format_from_content (cairo_content_t content) cairo_const;
    1: 
70960: cairo_private cairo_format_t
70960: _cairo_format_from_pixman_format (pixman_format_code_t pixman_format);
70960: 
    1: cairo_private cairo_content_t
32473: _cairo_content_from_format (cairo_format_t format) cairo_const;
    1: 
70960: cairo_private cairo_content_t
70960: _cairo_content_from_pixman_format (pixman_format_code_t pixman_format);
70960: 
    1: cairo_private cairo_surface_t *
    1: _cairo_image_surface_create_for_pixman_image (pixman_image_t		*pixman_image,
 6154: 					      pixman_format_code_t	 pixman_format);
 6154: 
70960: cairo_private pixman_format_code_t
70960: _cairo_format_to_pixman_format_code (cairo_format_t format);
70960: 
21379: cairo_private cairo_bool_t
13979: _pixman_format_from_masks (cairo_format_masks_t *masks,
13979: 			   pixman_format_code_t *format_ret);
 6154: 
41340: cairo_private cairo_bool_t
 6154: _pixman_format_to_masks (pixman_format_code_t	 pixman_format,
13979: 			 cairo_format_masks_t	*masks);
 6154: 
70960: cairo_private void
70960: _cairo_image_reset_static_data (void);
70960: 
 6154: cairo_private cairo_surface_t *
 6154: _cairo_image_surface_create_with_pixman_format (unsigned char		*data,
 6154: 						pixman_format_code_t	 pixman_format,
 6154: 						int			 width,
 6154: 						int			 height,
 6154: 						int			 stride);
    1: 
    1: cairo_private cairo_surface_t *
    1: _cairo_image_surface_create_with_content (cairo_content_t	content,
    1: 					  int			width,
    1: 					  int			height);
    1: 
    1: cairo_private void
    1: _cairo_image_surface_assume_ownership_of_data (cairo_image_surface_t *surface);
    1: 
    1: cairo_private cairo_image_surface_t *
70960: _cairo_image_surface_coerce (cairo_image_surface_t	*surface);
70960: 
70960: cairo_private cairo_image_surface_t *
70960: _cairo_image_surface_coerce_to_format (cairo_image_surface_t	*surface,
    1: 			               cairo_format_t		 format);
70960: 
29444: cairo_private void
29444: _cairo_image_surface_span_render_row (int				 y,
29444: 				      const cairo_half_open_span_t	 *spans,
29444: 				      unsigned				 num_spans,
41340: 				      uint8_t				*data,
41340: 				      uint32_t				 stride);
    1: 
13107: cairo_private cairo_image_transparency_t
13107: _cairo_image_analyze_transparency (cairo_image_surface_t      *image);
13107: 
    1: cairo_private cairo_bool_t
32473: _cairo_surface_is_image (const cairo_surface_t *surface) cairo_pure;
    1: 
    1: cairo_private cairo_bool_t
41340: _cairo_surface_is_recording (const cairo_surface_t *surface) cairo_pure;
    1: 
16122: /* cairo-pen.c */
    1: cairo_private cairo_status_t
    1: _cairo_pen_init (cairo_pen_t	*pen,
    1: 		 double		 radius,
    1: 		 double		 tolerance,
26419: 		 const cairo_matrix_t	*ctm);
    1: 
 4133: cairo_private void
    1: _cairo_pen_init_empty (cairo_pen_t *pen);
    1: 
    1: cairo_private cairo_status_t
26419: _cairo_pen_init_copy (cairo_pen_t *pen, const cairo_pen_t *other);
    1: 
    1: cairo_private void
    1: _cairo_pen_fini (cairo_pen_t *pen);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_pen_add_points (cairo_pen_t *pen, cairo_point_t *point, int num_points);
    1: 
    1: cairo_private cairo_status_t
    1: _cairo_pen_add_points_for_slopes (cairo_pen_t *pen,
    1: 				  cairo_point_t *a,
    1: 				  cairo_point_t *b,
    1: 				  cairo_point_t *c,
    1: 				  cairo_point_t *d);
    1: 
26419: cairo_private int
26419: _cairo_pen_find_active_cw_vertex_index (const cairo_pen_t *pen,
26419: 					const cairo_slope_t *slope);
26419: 
26419: cairo_private int
26419: _cairo_pen_find_active_ccw_vertex_index (const cairo_pen_t *pen,
26419: 					 const cairo_slope_t *slope);
26419: 
26419: /* cairo-polygon.c */
26419: cairo_private void
26419: _cairo_polygon_init (cairo_polygon_t *polygon);
26419: 
26419: cairo_private void
41340: _cairo_polygon_limit (cairo_polygon_t	*polygon,
41340: 		      const cairo_box_t *boxes,
41340: 		      int		 num_boxes);
41340: 
41340: cairo_private void
26419: _cairo_polygon_fini (cairo_polygon_t *polygon);
26419: 
41340: cairo_private cairo_status_t
41340: _cairo_polygon_add_line (cairo_polygon_t *polygon,
41340: 			 const cairo_line_t *line,
41340: 			 int top, int bottom,
41340: 			 int dir);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_polygon_add_external_edge (void *polygon,
26419: 				  const cairo_point_t *p1,
41340: 				  const cairo_point_t *p2);
41340: 
41340: cairo_private cairo_status_t
26419: _cairo_polygon_move_to (cairo_polygon_t *polygon,
26419: 			const cairo_point_t *point);
26419: 
41340: cairo_private cairo_status_t
26419: _cairo_polygon_line_to (cairo_polygon_t *polygon,
26419: 			const cairo_point_t *point);
26419: 
41340: cairo_private cairo_status_t
26419: _cairo_polygon_close (cairo_polygon_t *polygon);
26419: 
41340: #define _cairo_polygon_status(P) ((cairo_polygon_t *) (P))->status
26419: 
26419: /* cairo-spline.c */
26419: cairo_private cairo_bool_t
26419: _cairo_spline_init (cairo_spline_t *spline,
26419: 		    cairo_spline_add_point_func_t add_point_func,
26419: 		    void *closure,
26419: 		    const cairo_point_t *a, const cairo_point_t *b,
26419: 		    const cairo_point_t *c, const cairo_point_t *d);
26419: 
26419: cairo_private cairo_status_t
    1: _cairo_spline_decompose (cairo_spline_t *spline, double tolerance);
    1: 
26419: cairo_private cairo_status_t
26419: _cairo_spline_bound (cairo_spline_add_point_func_t add_point_func,
26419: 		     void *closure,
26419: 		     const cairo_point_t *p0, const cairo_point_t *p1,
26419: 		     const cairo_point_t *p2, const cairo_point_t *p3);
    1: 
16122: /* cairo-matrix.c */
    1: cairo_private void
    1: _cairo_matrix_get_affine (const cairo_matrix_t *matrix,
    1: 			  double *xx, double *yx,
    1: 			  double *xy, double *yy,
    1: 			  double *x0, double *y0);
    1: 
    1: cairo_private void
  314: _cairo_matrix_transform_bounding_box (const cairo_matrix_t *matrix,
  314: 				      double *x1, double *y1,
  314: 				      double *x2, double *y2,
  314: 				      cairo_bool_t *is_tight);
  314: 
16122: cairo_private void
16122: _cairo_matrix_transform_bounding_box_fixed (const cairo_matrix_t *matrix,
16122: 					    cairo_box_t          *bbox,
16122: 					    cairo_bool_t         *is_tight);
16122: 
 8452: cairo_private cairo_bool_t
32473: _cairo_matrix_is_invertible (const cairo_matrix_t *matrix) cairo_pure;
 8452: 
70960: cairo_private cairo_bool_t
70960: _cairo_matrix_is_scale_0 (const cairo_matrix_t *matrix) cairo_pure;
70960: 
18904: cairo_private double
32473: _cairo_matrix_compute_determinant (const cairo_matrix_t *matrix) cairo_pure;
    1: 
11708: cairo_private cairo_status_t
18904: _cairo_matrix_compute_basis_scale_factors (const cairo_matrix_t *matrix,
    1: 					   double *sx, double *sy, int x_major);
    1: 
    1: cairo_private cairo_bool_t
32473: _cairo_matrix_is_identity (const cairo_matrix_t *matrix) cairo_pure;
    1: 
    1: cairo_private cairo_bool_t
32473: _cairo_matrix_is_translation (const cairo_matrix_t *matrix) cairo_pure;
    1: 
    1: cairo_private cairo_bool_t
    1: _cairo_matrix_is_integer_translation(const cairo_matrix_t *matrix,
    1: 				     int *itx, int *ity);
    1: 
21379: cairo_private cairo_bool_t
41340: _cairo_matrix_has_unity_scale (const cairo_matrix_t *matrix);
41340: 
41340: cairo_private cairo_bool_t
32473: _cairo_matrix_is_pixel_exact (const cairo_matrix_t *matrix) cairo_pure;
21379: 
    1: cairo_private double
26419: _cairo_matrix_transformed_circle_major_axis (const cairo_matrix_t *matrix,
32473: 					     double radius) cairo_pure;
    1: 
    1: cairo_private void
    1: _cairo_matrix_to_pixman_matrix (const cairo_matrix_t	*matrix,
26419: 				pixman_transform_t	*pixman_transform,
26419: 				double                   xc,
26419: 				double                   yc);
    1: 
16122: /* cairo-traps.c */
    1: cairo_private void
    1: _cairo_traps_init (cairo_traps_t *traps);
    1: 
 4133: cairo_private void
 4133: _cairo_traps_limit (cairo_traps_t	*traps,
41340: 		    const cairo_box_t	*boxes,
41340: 		    int			 num_boxes);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_traps_init_boxes (cairo_traps_t	    *traps,
70960: 		         const cairo_boxes_t *boxes);
21379: 
21379: cairo_private void
21379: _cairo_traps_clear (cairo_traps_t *traps);
    1: 
    1: cairo_private void
    1: _cairo_traps_fini (cairo_traps_t *traps);
    1: 
21379: #define _cairo_traps_status(T) (T)->status
 4133: 
    1: cairo_private void
    1: _cairo_traps_translate (cairo_traps_t *traps, int x, int y);
    1: 
    1: cairo_private cairo_status_t
21379: _cairo_traps_tessellate_rectangle (cairo_traps_t *traps,
21379: 				   const cairo_point_t *top_left,
21379: 				   const cairo_point_t *bottom_right);
    1: 
 4133: cairo_private void
21379: _cairo_traps_add_trap (cairo_traps_t *traps,
21379: 		       cairo_fixed_t top, cairo_fixed_t bottom,
21379: 		       cairo_line_t *left, cairo_line_t *right);
    1: 
    1: cairo_private cairo_status_t
41340: _cairo_bentley_ottmann_tessellate_rectilinear_polygon (cairo_traps_t	 *traps,
41340: 						       const cairo_polygon_t *polygon,
41340: 						       cairo_fill_rule_t	  fill_rule);
41340: 
41340: cairo_private cairo_status_t
    1: _cairo_bentley_ottmann_tessellate_polygon (cairo_traps_t         *traps,
16122: 					   const cairo_polygon_t *polygon,
    1: 					   cairo_fill_rule_t      fill_rule);
    1: 
41340: cairo_private cairo_status_t
41340: _cairo_bentley_ottmann_tessellate_traps (cairo_traps_t *traps,
41340: 					 cairo_fill_rule_t fill_rule);
41340: 
41340: cairo_private cairo_status_t
41340: _cairo_bentley_ottmann_tessellate_rectangular_traps (cairo_traps_t *traps,
41340: 						     cairo_fill_rule_t fill_rule);
41340: 
41340: cairo_private cairo_status_t
70960: _cairo_bentley_ottmann_tessellate_boxes (const cairo_boxes_t *in,
70960: 					 cairo_fill_rule_t fill_rule,
70960: 					 cairo_boxes_t *out);
70960: 
70960: cairo_private cairo_status_t
41340: _cairo_bentley_ottmann_tessellate_rectilinear_traps (cairo_traps_t *traps,
41340: 						     cairo_fill_rule_t fill_rule);
41340: 
70960: cairo_private cairo_status_t
70960: _cairo_bentley_ottmann_tessellate_rectilinear_polygon_to_boxes (const cairo_polygon_t *polygon,
70960: 								cairo_fill_rule_t fill_rule,
70960: 								cairo_boxes_t *boxes);
70960: 
    1: cairo_private int
16122: _cairo_traps_contain (const cairo_traps_t *traps,
16122: 		      double x, double y);
    1: 
    1: cairo_private void
16122: _cairo_traps_extents (const cairo_traps_t *traps,
16122: 		      cairo_box_t         *extents);
    1: 
 4133: cairo_private cairo_int_status_t
41340: _cairo_traps_extract_region (cairo_traps_t  *traps,
28364: 			     cairo_region_t **region);
    1: 
16122: cairo_private cairo_status_t
16122: _cairo_traps_path (const cairo_traps_t *traps,
16122: 		   cairo_path_fixed_t  *path);
16122: 
    1: cairo_private void
    1: _cairo_trapezoid_array_translate_and_scale (cairo_trapezoid_t *offset_traps,
    1: 					    cairo_trapezoid_t *src_traps,
    1: 					    int num_traps,
    1: 					    double tx, double ty,
    1: 					    double sx, double sy);
    1: 
16122: /* cairo-pattern.c */
    1: 
32473: cairo_private cairo_pattern_t *
32473: _cairo_pattern_create_in_error (cairo_status_t status);
32473: 
 4133: cairo_private cairo_status_t
10414: _cairo_pattern_create_copy (cairo_pattern_t	  **pattern,
10414: 			    const cairo_pattern_t  *other);
10414: 
10414: cairo_private cairo_status_t
    1: _cairo_pattern_init_copy (cairo_pattern_t	*pattern,
    1: 			  const cairo_pattern_t *other);
    1: 
32473: cairo_private void
32473: _cairo_pattern_init_static_copy (cairo_pattern_t	*pattern,
32473: 				 const cairo_pattern_t *other);
32473: 
21379: cairo_private cairo_status_t
21379: _cairo_pattern_init_snapshot (cairo_pattern_t       *pattern,
21379: 			      const cairo_pattern_t *other);
21379: 
    1: cairo_private void
    1: _cairo_pattern_init_solid (cairo_solid_pattern_t	*pattern,
70960: 			   const cairo_color_t		*color);
    1: 
    1: cairo_private void
    1: _cairo_pattern_init_for_surface (cairo_surface_pattern_t *pattern,
    1: 				 cairo_surface_t *surface);
    1: 
    1: cairo_private void
    1: _cairo_pattern_init_linear (cairo_linear_pattern_t *pattern,
    1: 			    double x0, double y0, double x1, double y1);
    1: 
    1: cairo_private void
    1: _cairo_pattern_init_radial (cairo_radial_pattern_t *pattern,
    1: 			    double cx0, double cy0, double radius0,
    1: 			    double cx1, double cy1, double radius1);
    1: 
    1: cairo_private void
    1: _cairo_pattern_fini (cairo_pattern_t *pattern);
    1: 
    1: cairo_private cairo_pattern_t *
70960: _cairo_pattern_create_solid (const cairo_color_t	*color);
    1: 
    1: cairo_private void
    1: _cairo_pattern_transform (cairo_pattern_t      *pattern,
    1: 			  const cairo_matrix_t *ctm_inverse);
    1: 
    1: cairo_private cairo_bool_t
70960: _cairo_gradient_pattern_is_solid (const cairo_gradient_pattern_t *gradient,
70960: 				  const cairo_rectangle_int_t *extents,
70960: 				  cairo_color_t *color);
70960: 
70960: cairo_private cairo_bool_t
70918: _cairo_pattern_is_opaque_solid (const cairo_pattern_t *pattern);
70871: 
70871: cairo_private cairo_bool_t
70960: _cairo_pattern_is_opaque (const cairo_pattern_t *pattern,
70960: 			  const cairo_rectangle_int_t *extents);
70960: 
70960: cairo_private cairo_bool_t
70960: _cairo_pattern_is_clear (const cairo_pattern_t *pattern);
70960: 
70960: cairo_private_no_warn cairo_filter_t
70960: _cairo_pattern_analyze_filter (const cairo_pattern_t	*pattern,
70960: 			       double			*pad_out);
    1: 
32473: enum {
32473:     CAIRO_PATTERN_ACQUIRE_NONE = 0x0,
33200:     CAIRO_PATTERN_ACQUIRE_NO_REFLECT = 0x1
32473: };
    1: cairo_private cairo_int_status_t
26419: _cairo_pattern_acquire_surface (const cairo_pattern_t	   *pattern,
    1: 				cairo_surface_t		   *dst,
    1: 				int			   x,
    1: 				int			   y,
    1: 				unsigned int		   width,
    1: 				unsigned int		   height,
32473: 				unsigned int		   flags,
    1: 				cairo_surface_t		   **surface_out,
    1: 				cairo_surface_attributes_t *attributes);
    1: 
    1: cairo_private void
26419: _cairo_pattern_release_surface (const cairo_pattern_t	   *pattern,
    1: 				cairo_surface_t		   *surface,
    1: 				cairo_surface_attributes_t *attributes);
    1: 
    1: cairo_private cairo_int_status_t
26419: _cairo_pattern_acquire_surfaces (const cairo_pattern_t	    *src,
26419: 				 const cairo_pattern_t	    *mask,
    1: 				 cairo_surface_t	    *dst,
    1: 				 int			    src_x,
    1: 				 int			    src_y,
    1: 				 int			    mask_x,
    1: 				 int			    mask_y,
    1: 				 unsigned int		    width,
    1: 				 unsigned int		    height,
32473: 				 unsigned int		    flags,
    1: 				 cairo_surface_t	    **src_out,
    1: 				 cairo_surface_t	    **mask_out,
    1: 				 cairo_surface_attributes_t *src_attributes,
    1: 				 cairo_surface_attributes_t *mask_attributes);
    1: 
41340: cairo_private void
26419: _cairo_pattern_get_extents (const cairo_pattern_t	    *pattern,
 4133: 			    cairo_rectangle_int_t           *extents);
 4133: 
26419: cairo_private unsigned long
26419: _cairo_pattern_hash (const cairo_pattern_t *pattern);
26419: 
26419: cairo_private unsigned long
70960: _cairo_linear_pattern_hash (unsigned long hash,
70960: 			    const cairo_linear_pattern_t *linear);
70960: 
70960: cairo_private unsigned long
70960: _cairo_radial_pattern_hash (unsigned long hash,
70960: 			    const cairo_radial_pattern_t *radial);
70960: 
70960: cairo_private cairo_bool_t
70960: _cairo_linear_pattern_equal (const cairo_linear_pattern_t *a,
70960: 			     const cairo_linear_pattern_t *b);
70960: 
70960: cairo_private unsigned long
26419: _cairo_pattern_size (const cairo_pattern_t *pattern);
26419: 
26419: cairo_private cairo_bool_t
70960: _cairo_radial_pattern_equal (const cairo_radial_pattern_t *a,
70960: 			     const cairo_radial_pattern_t *b);
70960: 
70960: cairo_private cairo_bool_t
26419: _cairo_pattern_equal (const cairo_pattern_t *a,
26419: 		      const cairo_pattern_t *b);
26419: 
 4133: cairo_private void
 4133: _cairo_pattern_reset_static_data (void);
    1: 
41340: #if CAIRO_HAS_DRM_SURFACE
28364: 
28364: cairo_private void
41340: _cairo_drm_device_reset_static_data (void);
41340: 
41340: #endif
28364: 
28364: cairo_private void
41340: _cairo_clip_reset_static_data (void);
    1: 
16122: /* cairo-unicode.c */
    1: 
18904: cairo_private int
18904: _cairo_utf8_get_char_validated (const char *p,
18904: 				uint32_t   *unicode);
18904: 
    1: cairo_private cairo_status_t
16122: _cairo_utf8_to_ucs4 (const char *str,
    1: 		     int	 len,
    1: 		     uint32_t  **result,
    1: 		     int	*items_written);
    1: 
16122: cairo_private int
16122: _cairo_ucs4_to_utf8 (uint32_t    unicode,
16122: 		     char       *utf8);
16122: 
37412: #if CAIRO_HAS_WIN32_FONT || CAIRO_HAS_QUARTZ_FONT || CAIRO_HAS_PDF_OPERATORS || CAIRO_HAS_DW_FONT
10414: # define CAIRO_HAS_UTF8_TO_UTF16 1
10414: #endif
10414: #if CAIRO_HAS_UTF8_TO_UTF16
    1: cairo_private cairo_status_t
16122: _cairo_utf8_to_utf16 (const char *str,
    1: 		      int	  len,
    1: 		      uint16_t  **result,
    1: 		      int	 *items_written);
10414: #endif
    1: 
70960: /* cairo-observer.c */
70960: 
70960: cairo_private void
70960: _cairo_observers_notify (cairo_list_t *observers, void *arg);
 8452: 
    1: /* Avoid unnecessary PLT entries.  */
    1: slim_hidden_proto (cairo_clip_preserve);
    1: slim_hidden_proto (cairo_close_path);
    1: slim_hidden_proto (cairo_create);
    1: slim_hidden_proto (cairo_curve_to);
    1: slim_hidden_proto (cairo_destroy);
    1: slim_hidden_proto (cairo_fill_preserve);
    1: slim_hidden_proto (cairo_font_face_destroy);
21379: slim_hidden_proto (cairo_font_face_get_user_data);
 4133: slim_hidden_proto_no_warn (cairo_font_face_reference);
21379: slim_hidden_proto (cairo_font_face_set_user_data);
    1: slim_hidden_proto (cairo_font_options_equal);
    1: slim_hidden_proto (cairo_font_options_hash);
    1: slim_hidden_proto (cairo_font_options_merge);
    1: slim_hidden_proto (cairo_font_options_set_antialias);
    1: slim_hidden_proto (cairo_font_options_set_hint_metrics);
    1: slim_hidden_proto (cairo_font_options_set_hint_style);
    1: slim_hidden_proto (cairo_font_options_set_subpixel_order);
 4133: slim_hidden_proto (cairo_font_options_status);
26419: slim_hidden_proto (cairo_format_stride_for_width);
    1: slim_hidden_proto (cairo_get_current_point);
21379: slim_hidden_proto (cairo_get_line_width);
    1: slim_hidden_proto (cairo_get_matrix);
18904: slim_hidden_proto (cairo_get_target);
    1: slim_hidden_proto (cairo_get_tolerance);
18904: slim_hidden_proto (cairo_glyph_allocate);
18904: slim_hidden_proto (cairo_glyph_free);
    1: slim_hidden_proto (cairo_image_surface_create);
    1: slim_hidden_proto (cairo_image_surface_create_for_data);
13979: slim_hidden_proto (cairo_image_surface_get_data);
41340: slim_hidden_proto (cairo_image_surface_get_format);
    1: slim_hidden_proto (cairo_image_surface_get_height);
13979: slim_hidden_proto (cairo_image_surface_get_stride);
    1: slim_hidden_proto (cairo_image_surface_get_width);
    1: slim_hidden_proto (cairo_line_to);
    1: slim_hidden_proto (cairo_mask);
    1: slim_hidden_proto (cairo_matrix_init);
    1: slim_hidden_proto (cairo_matrix_init_identity);
    1: slim_hidden_proto (cairo_matrix_init_rotate);
    1: slim_hidden_proto (cairo_matrix_init_scale);
    1: slim_hidden_proto (cairo_matrix_init_translate);
    1: slim_hidden_proto (cairo_matrix_invert);
    1: slim_hidden_proto (cairo_matrix_multiply);
    1: slim_hidden_proto (cairo_matrix_scale);
    1: slim_hidden_proto (cairo_matrix_transform_distance);
    1: slim_hidden_proto (cairo_matrix_transform_point);
    1: slim_hidden_proto (cairo_matrix_translate);
    1: slim_hidden_proto (cairo_move_to);
    1: slim_hidden_proto (cairo_new_path);
    1: slim_hidden_proto (cairo_paint);
    1: slim_hidden_proto (cairo_pattern_create_for_surface);
    1: slim_hidden_proto (cairo_pattern_create_rgb);
    1: slim_hidden_proto (cairo_pattern_create_rgba);
    1: slim_hidden_proto (cairo_pattern_destroy);
    1: slim_hidden_proto (cairo_pattern_get_extend);
 4133: slim_hidden_proto_no_warn (cairo_pattern_reference);
    1: slim_hidden_proto (cairo_pattern_set_matrix);
    1: slim_hidden_proto (cairo_pop_group);
    1: slim_hidden_proto (cairo_push_group_with_content);
    1: slim_hidden_proto (cairo_rel_line_to);
    1: slim_hidden_proto (cairo_restore);
    1: slim_hidden_proto (cairo_save);
  314: slim_hidden_proto (cairo_scale);
    1: slim_hidden_proto (cairo_scaled_font_create);
    1: slim_hidden_proto (cairo_scaled_font_destroy);
    1: slim_hidden_proto (cairo_scaled_font_extents);
    1: slim_hidden_proto (cairo_scaled_font_get_ctm);
    1: slim_hidden_proto (cairo_scaled_font_get_font_face);
    1: slim_hidden_proto (cairo_scaled_font_get_font_matrix);
    1: slim_hidden_proto (cairo_scaled_font_get_font_options);
    1: slim_hidden_proto (cairo_scaled_font_glyph_extents);
 4133: slim_hidden_proto_no_warn (cairo_scaled_font_reference);
 4133: slim_hidden_proto (cairo_scaled_font_status);
26419: slim_hidden_proto (cairo_scaled_font_get_user_data);
26419: slim_hidden_proto (cairo_scaled_font_set_user_data);
26419: slim_hidden_proto (cairo_scaled_font_text_to_glyphs);
26419: slim_hidden_proto (cairo_set_font_options);
16122: slim_hidden_proto (cairo_set_font_size);
21379: slim_hidden_proto (cairo_set_line_cap);
21379: slim_hidden_proto (cairo_set_line_join);
21379: slim_hidden_proto (cairo_set_line_width);
16122: slim_hidden_proto (cairo_set_matrix);
    1: slim_hidden_proto (cairo_set_operator);
    1: slim_hidden_proto (cairo_set_source);
32473: slim_hidden_proto (cairo_set_source_rgb);
    1: slim_hidden_proto (cairo_set_source_surface);
26419: slim_hidden_proto (cairo_set_tolerance);
    1: slim_hidden_proto (cairo_status);
21379: slim_hidden_proto (cairo_stroke);
    1: slim_hidden_proto (cairo_stroke_preserve);
26419: slim_hidden_proto (cairo_surface_copy_page);
    1: slim_hidden_proto (cairo_surface_destroy);
    1: slim_hidden_proto (cairo_surface_finish);
16122: slim_hidden_proto (cairo_surface_flush);
    1: slim_hidden_proto (cairo_surface_get_content);
    1: slim_hidden_proto (cairo_surface_get_device_offset);
    1: slim_hidden_proto (cairo_surface_get_font_options);
26419: slim_hidden_proto (cairo_surface_get_mime_data);
    1: slim_hidden_proto (cairo_surface_get_type);
18904: slim_hidden_proto (cairo_surface_has_show_text_glyphs);
59761: slim_hidden_proto (cairo_surface_set_subpixel_antialiasing);
59761: slim_hidden_proto (cairo_surface_get_subpixel_antialiasing);
70960: slim_hidden_proto (cairo_surface_mark_dirty);
    1: slim_hidden_proto (cairo_surface_mark_dirty_rectangle);
 4133: slim_hidden_proto_no_warn (cairo_surface_reference);
    1: slim_hidden_proto (cairo_surface_set_device_offset);
    1: slim_hidden_proto (cairo_surface_set_fallback_resolution);
26419: slim_hidden_proto (cairo_surface_set_mime_data);
 6154: slim_hidden_proto (cairo_surface_show_page);
    1: slim_hidden_proto (cairo_surface_status);
18904: slim_hidden_proto (cairo_text_cluster_allocate);
18904: slim_hidden_proto (cairo_text_cluster_free);
18904: slim_hidden_proto (cairo_toy_font_face_create);
21379: slim_hidden_proto (cairo_toy_font_face_get_slant);
21379: slim_hidden_proto (cairo_toy_font_face_get_weight);
26419: slim_hidden_proto (cairo_translate);
26419: slim_hidden_proto (cairo_transform);
21379: slim_hidden_proto (cairo_user_font_face_create);
21379: slim_hidden_proto (cairo_user_font_face_set_init_func);
21379: slim_hidden_proto (cairo_user_font_face_set_render_glyph_func);
21379: slim_hidden_proto (cairo_user_font_face_set_unicode_to_glyph_func);
26419: slim_hidden_proto (cairo_user_to_device);
26419: slim_hidden_proto (cairo_user_to_device_distance);
  314: slim_hidden_proto (cairo_version_string);
28364: slim_hidden_proto (cairo_region_create);
28364: slim_hidden_proto (cairo_region_create_rectangle);
32473: slim_hidden_proto (cairo_region_create_rectangles);
28364: slim_hidden_proto (cairo_region_copy);
41340: slim_hidden_proto (cairo_region_reference);
28364: slim_hidden_proto (cairo_region_destroy);
41340: slim_hidden_proto (cairo_region_equal);
28364: slim_hidden_proto (cairo_region_status);
28364: slim_hidden_proto (cairo_region_get_extents);
28364: slim_hidden_proto (cairo_region_num_rectangles);
28364: slim_hidden_proto (cairo_region_get_rectangle);
28364: slim_hidden_proto (cairo_region_is_empty);
28364: slim_hidden_proto (cairo_region_contains_rectangle);
28364: slim_hidden_proto (cairo_region_contains_point);
28364: slim_hidden_proto (cairo_region_translate);
28364: slim_hidden_proto (cairo_region_subtract);
28364: slim_hidden_proto (cairo_region_subtract_rectangle);
28364: slim_hidden_proto (cairo_region_intersect);
28364: slim_hidden_proto (cairo_region_intersect_rectangle);
28364: slim_hidden_proto (cairo_region_union);
28364: slim_hidden_proto (cairo_region_union_rectangle);
70960: slim_hidden_proto (cairo_region_xor);
70960: slim_hidden_proto (cairo_region_xor_rectangle);
  314: 
  314: #if CAIRO_HAS_PNG_FUNCTIONS
  314: 
  301: slim_hidden_proto (cairo_surface_write_to_png_stream);
  314: 
  314: #endif
  299: 
70960: cairo_private_no_warn cairo_filter_t
70960: _cairo_pattern_analyze_filter (const cairo_pattern_t	*pattern,
70960: 			       double			*pad_out);
70960: 
  301: CAIRO_END_DECLS
  299: 
 6154: #include "cairo-mutex-private.h"
10694: #include "cairo-fixed-private.h"
 6154: #include "cairo-wideint-private.h"
 6154: #include "cairo-malloc-private.h"
 6154: #include "cairo-hash-private.h"
 6154: 
29608: #if HAVE_VALGRIND
32473: #include <memcheck.h>
32473: 
32473: #define VG(x) x
29608: 
29608: cairo_private void
29608: _cairo_debug_check_image_surface_is_defined (const cairo_surface_t *surface);
29608: 
29608: #else
29608: 
32473: #define VG(x)
29608: #define _cairo_debug_check_image_surface_is_defined(X)
29608: 
  299: #endif
29608: 
41340: cairo_private void
41340: _cairo_debug_print_path (FILE *stream, cairo_path_fixed_t *path);
41340: 
41340: cairo_private void
41340: _cairo_debug_print_clip (FILE *stream, cairo_clip_t *clip);
41340: 
29608: #endif
