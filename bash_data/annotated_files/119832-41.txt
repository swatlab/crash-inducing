 99778: /* This Source Code Form is subject to the terms of the Mozilla Public
 99778:  * License, v. 2.0. If a copy of the MPL was not distributed with this
 99778:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
     1: /* $Id: nsPKCS12Blob.h,v 1.16 2006/04/12 15:43:32 benjamin%smedbergs.us Exp $ */
     1: 
     1: #ifndef _NS_PKCS12BLOB_H_
     1: #define _NS_PKCS12BLOB_H_
     1: 
     1: #include "nsCOMPtr.h"
101111: #include "nsIFile.h"
     1: #include "nsIPK11TokenDB.h"
     1: #include "nsNSSHelper.h"
     1: #include "nsIPK11Token.h"
     1: #include "nsIMutableArray.h"
     1: 
     1: #include "nss.h"
     1: 
119832: extern "C" {
     1: #include "pkcs12.h"
     1: #include "p12plcy.h"
119832: }
     1: 
     1: class nsIX509Cert;
     1: 
     1: //
     1: // nsPKCS12Blob
     1: //
     1: // Class for importing/exporting PKCS#12 blobs
     1: //
     1: class nsPKCS12Blob
     1: {
     1: public:
     1:   nsPKCS12Blob();
     1:   virtual ~nsPKCS12Blob();
     1: 
     1:   // Set the token to use (default is internal)
     1:   nsresult SetToken(nsIPK11Token *token);
     1: 
     1:   // PKCS#12 Import
101111:   nsresult ImportFromFile(nsIFile *file);
     1: 
     1:   // PKCS#12 Export
     1: #if 0
     1:   //nsresult LoadCerts(const PRUnichar **certNames, int numCerts);
     1:   nsresult LoadCerts(nsIX509Cert **certs, int numCerts);
     1: #endif
101111:   nsresult ExportToFile(nsIFile *file, nsIX509Cert **certs, int numCerts);
     1: 
     1: private:
     1: 
     1:   nsCOMPtr<nsIPK11Token>          mToken;
     1:   nsCOMPtr<nsIMutableArray>       mCertArray;
     1:   nsCOMPtr<nsIInterfaceRequestor> mUIContext;
     1: 
     1:   // local helper functions
     1:   nsresult getPKCS12FilePassword(SECItem *);
     1:   nsresult newPKCS12FilePassword(SECItem *);
101111:   nsresult inputToDecoder(SEC_PKCS12DecoderContext *, nsIFile *);
     1:   void unicodeToItem(const PRUnichar *, SECItem *);
 19743:   void handleError(int myerr = 0);
     1: 
     1:   // RetryReason and ImportMode are used when importing a PKCS12 file.
     1:   // There are two reasons that cause us to retry:
     1:   // - When the password entered by the user is incorrect.
     1:   //   The user will be prompted to try again.
     1:   // - When the user entered a zero length password.
     1:   //   An empty password should be represented as an empty
     1:   //   string (a SECItem that contains a single terminating
     1:   //   NULL UTF16 character), but some applications use a
     1:   //   zero length SECItem.
     1:   //   We try both variations, zero length item and empty string,
     1:   //   without giving a user prompt when trying the different empty password flavors.
     1:   
     1:   enum RetryReason { rr_do_not_retry, rr_bad_password, rr_auto_retry_empty_password_flavors };
     1:   enum ImportMode { im_standard_prompt, im_try_zero_length_secitem };
     1:   
101111:   nsresult ImportFromFileHelper(nsIFile *file, ImportMode aImportMode, RetryReason &aWantRetry);
     1: 
     1:   // NSPR file I/O for export file
     1:   PRFileDesc *mTmpFile;
     1:   char       *mTmpFilePath;
     1: 
     1:   // simulated file I/O for "in memory" temporary digest data
     1:   nsCString                 *mDigest;
     1:   nsCString::const_iterator *mDigestIterator;
     1: 
 79445:   bool        mTokenSet;
     1: 
     1:   // C-style callback functions for the NSS PKCS#12 library
115027:   static SECStatus digest_open(void *, PRBool);
115027:   static SECStatus digest_close(void *, PRBool);
115027:   static int       digest_read(void *, unsigned char *, unsigned long);
115027:   static int       digest_write(void *, unsigned char *, unsigned long);
115027:   static SECItem * nickname_collision(SECItem *, PRBool *, void *);
115027:   static void write_export_file(void *arg, const char *buf, unsigned long len);
     1: 
     1: };
     1: 
     1: #endif /* _NS_PKCS12BLOB_H_ */
     1: 
