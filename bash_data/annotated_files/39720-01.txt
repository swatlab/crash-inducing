35890: /* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
35893: /* ***** BEGIN LICENSE BLOCK *****
35893:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
35893:  *
35893:  * The contents of this file are subject to the Mozilla Public License Version
35893:  * 1.1 (the "License"); you may not use this file except in compliance with
35893:  * the License. You may obtain a copy of the License at
35893:  * http://www.mozilla.org/MPL/
35893:  *
35893:  * Software distributed under the License is distributed on an "AS IS" basis,
35893:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
35893:  * for the specific language governing rights and limitations under the
35893:  * License.
35893:  *
35893:  * The Original Code is Mozilla Plugins.
35893:  *
35893:  * The Initial Developer of the Original Code is
35893:  *   Chris Jones <jones.chris.g@gmail.com>.
35893:  * Portions created by the Initial Developer are Copyright (C) 2009
35893:  * the Initial Developer. All Rights Reserved.
35893:  *
35893:  * Contributor(s):
35893:  *   Benjamin Smedberg <benjamin@smedbergs.us>
35893:  *   Ben Turner <bent.mozilla@gmail.com>
35893:  *
35893:  * Alternatively, the contents of this file may be used under the terms of
35893:  * either the GNU General Public License Version 2 or later (the "GPL"), or
35893:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
35893:  * in which case the provisions of the GPL or the LGPL are applicable instead
35893:  * of those above. If you wish to allow use of your version of this file only
35893:  * under the terms of either the GPL or the LGPL, and not to allow others to
35893:  * use your version of this file under the terms of the MPL, indicate your
35893:  * decision by deleting the provisions above and replace them with the notice
35893:  * and other provisions required by the GPL or the LGPL. If you do not delete
35893:  * the provisions above, a recipient may use your version of this file under
35893:  * the terms of any one of the MPL, the GPL or the LGPL.
35893:  *
35893:  * ***** END LICENSE BLOCK ***** */
35890: 
35893: include protocol "PPluginModule.ipdl";
35893: include protocol "PPluginScriptableObject.ipdl";
35895: include protocol "PBrowserStream.ipdl";
35938: include protocol "PPluginStream.ipdl";
35904: include protocol "PStreamNotify.ipdl";
35744: 
35775: include "mozilla/plugins/PluginMessageUtils.h";
35744: 
35744: using NPError;
35957: using NPRemoteWindow;
36011: using NPRemoteEvent;
35958: using NPRect;
37332: using NPNURLVariable;
37308: using mozilla::plugins::NativeWindowHandle;
35744: 
35744: namespace mozilla {
35744: namespace plugins {
35744: 
35893: rpc protocol PPluginInstance
35744: {
35893:   manager PPluginModule;
35744: 
35893:   manages PPluginScriptableObject;
35895:   manages PBrowserStream;
35938:   manages PPluginStream;
35904:   manages PStreamNotify;
35744: 
35769: child:
37311:   rpc __delete__();
36138: 
39279:   rpc NPP_SetWindow(NPRemoteWindow window);
35925: 
35951:   // this message is not used on non-X platforms
35951:   rpc NPP_GetValue_NPPVpluginNeedsXEmbed()
35951:     returns (bool value, NPError result);
35925:   rpc NPP_GetValue_NPPVpluginScriptableNPObject()
36135:     returns (nullable PPluginScriptableObject value, NPError result);
35744: 
37350:   rpc NPP_SetValue_NPNVprivateModeBool(bool value) returns (NPError result);
37350: 
36011:   rpc NPP_HandleEvent(NPRemoteEvent event)
35933:     returns (int16_t handled);
39720:   // special cases of HandleEvent to make mediating races simpler
39265:   rpc Paint(NPRemoteEvent event)
39265:     returns (int16_t handled);
39720:   // this is only used on windows to forward WM_WINDOWPOSCHANGE
39720:   async WindowPosChanged(NPRemoteEvent event);
35933: 
37311:   rpc NPP_Destroy()
37311:     returns (NPError rv);
37311: 
35769: parent:
35923:   rpc NPN_GetValue_NPNVjavascriptEnabledBool()
35923:     returns (bool value, NPError result);
35923:   rpc NPN_GetValue_NPNVisOfflineBool()
35923:     returns (bool value, NPError result);
35923:   rpc NPN_GetValue_NPNVWindowNPObject()
36135:     returns (nullable PPluginScriptableObject value, NPError result);
35923:   rpc NPN_GetValue_NPNVPluginElementNPObject()
36135:     returns (nullable PPluginScriptableObject value, NPError result);
35923:   rpc NPN_GetValue_NPNVprivateModeBool()
35923:     returns (bool value, NPError result);
37168:   rpc NPN_GetValue_NPNVnetscapeWindow()
37308:     returns (NativeWindowHandle value, NPError result);
35923: 
35951:   rpc NPN_SetValue_NPPVpluginWindow(bool windowed)
35951:     returns (NPError result);
35951:   rpc NPN_SetValue_NPPVpluginTransparent(bool transparent)
35951:     returns (NPError result);
35951: 
35904:   rpc NPN_GetURL(nsCString url, nsCString target)
35904:     returns (NPError result);
35904:   rpc NPN_PostURL(nsCString url, nsCString target, nsCString buffer, bool file)
35904:     returns (NPError result);
35904: 
35904:   /**
35904:    * Covers both NPN_GetURLNotify and NPN_PostURLNotify.
35904:    * @TODO This would be more readable as an overloaded method,
39283:    *       but IPDL doesn't allow that for constructors.
35904:    */
35904:   rpc PStreamNotify(nsCString url, nsCString target, bool post,
35904:                     nsCString buffer, bool file)
35904:     returns (NPError result);
35904: 
35958:   async NPN_InvalidateRect(NPRect rect);
35958: 
35983:   rpc NPN_PushPopupsEnabledState(bool aState)
35983:     returns (bool aSuccess);
35983: 
35983:   rpc NPN_PopPopupsEnabledState()
35983:     returns (bool aSuccess);
35983: 
37332:   rpc NPN_GetValueForURL(NPNURLVariable variable, nsCString url)
37332:     returns (nsCString value, NPError result);
37332: 
37332:   rpc NPN_SetValueForURL(NPNURLVariable variable, nsCString url,
37332:                          nsCString value)
37332:     returns (NPError result);
37332: 
37332:   rpc NPN_GetAuthenticationInfo(nsCString protocol_, nsCString host,
37332:                                 int32_t port, nsCString scheme,
37332:                                 nsCString realm)
37332:     returns (nsCString username, nsCString password, NPError result);
37332: 
35925: both:
38994:   async PPluginScriptableObject();
35835: 
35938: child:
35938:   /* NPP_NewStream */
35938:   rpc PBrowserStream(nsCString url,
35938:                      uint32_t length,
35938:                      uint32_t lastmodified,
36135:                      nullable PStreamNotify notifyData,
35938:                      nsCString headers,
35938:                      nsCString mimeType,
35938:                      bool seekable)
35938:     returns (NPError rv,
35938:              uint16_t stype);
35938: 
35938: parent:
35938:   /* NPN_NewStream */
35938:   rpc PPluginStream(nsCString mimeType,
35938:                     nsCString target)
35938:     returns (NPError result);
37550: 
37550: parent:
37550:   rpc PluginGotFocus();
38103:   sync SetNestedEventState(bool aState);
37550: child:
37550:   rpc SetPluginFocus();
37554:   rpc UpdateWindow();
35744: };
35744: 
35744: } // namespace plugins
35744: } // namespace mozilla
