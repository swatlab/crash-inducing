27440: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
27440:  * vim: sw=2 ts=2 et lcs=trail\:.,tab\:>~ :
27440:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Oracle Corporation code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  *  Oracle Corporation
    1:  * Portions created by the Initial Developer are Copyright (C) 2004
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Vladimir Vukicevic <vladimir.vukicevic@oracle.com>
 3228:  *   Lev Serebryakov <lev@serebryakov.spb.ru>
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
59297: #ifndef mozilla_storage_Connection_h
59297: #define mozilla_storage_Connection_h
    1: 
30359: #include "nsAutoPtr.h"
    1: #include "nsCOMPtr.h"
32216: #include "mozilla/Mutex.h"
59297: #include "nsIInterfaceRequestor.h"
    1: 
51598: #include "nsDataHashtable.h"
 3228: #include "mozIStorageProgressHandler.h"
36744: #include "SQLiteMutex.h"
    1: #include "mozIStorageConnection.h"
30359: #include "mozStorageService.h"
    1: 
    1: #include "nsIMutableArray.h"
    1: 
29818: #include "sqlite3.h"
    1: 
29547: struct PRLock;
    1: class nsIFile;
21035: class nsIEventTarget;
21035: class nsIThread;
64470: class nsIMemoryReporter;
    1: 
27440: namespace mozilla {
27440: namespace storage {
27440: 
73200: class StorageMemoryReporter;
73200: 
27440: class Connection : public mozIStorageConnection
59297:                  , public nsIInterfaceRequestor
    1: {
    1: public:
    1:   NS_DECL_ISUPPORTS
    1:   NS_DECL_MOZISTORAGECONNECTION
59297:   NS_DECL_NSIINTERFACEREQUESTOR
    1: 
51598:   /**
51598:    * Structure used to describe user functions on the database connection.
51598:    */
51598:   struct FunctionInfo {
51598:     enum FunctionType {
51598:       SIMPLE,
51598:       AGGREGATE
51598:     };
51598: 
51598:     nsCOMPtr<nsISupports> function;
51598:     FunctionType type;
51598:     PRInt32 numArgs;
51598:   };
51598: 
51598:   /**
51598:    * @param aService
51598:    *        Pointer to the storage service.  Held onto for the lifetime of the
51598:    *        connection.
51598:    * @param aFlags
51598:    *        The flags to pass to sqlite3_open_v2.
51598:    */
51598:   Connection(Service *aService, int aFlags);
27440: 
27440:   /**
27440:    * Creates the connection to the database.
27440:    *
27440:    * @param aDatabaseFile
27440:    *        The nsIFile of the location of the database to open, or create if it
27440:    *        does not exist.  Passing in nsnull here creates an in-memory
27440:    *        database.
51981:    * @param aVFSName
51981:    *        The VFS that SQLite will use when opening this database. NULL means
51981:    *        "default".
27440:    */
51972:   nsresult initialize(nsIFile *aDatabaseFile,
51972:                       const char* aVFSName = NULL);
27440: 
    1:   // fetch the native handle
    1:   sqlite3 *GetNativeConnection() { return mDBConn; }
64470:   operator sqlite3 *() const { return mDBConn; }
    1: 
21035:   /**
21035:    * Lazily creates and returns a background execution thread.  In the future,
21035:    * the thread may be re-claimed if left idle, so you should call this
21035:    * method just before you dispatch and not save the reference.
21035:    *
21035:    * @returns an event target suitable for asynchronous statement execution.
21035:    */
39769:   nsIEventTarget *getAsyncExecutionTarget();
21035: 
32216:   /**
32216:    * Mutex used by asynchronous statements to protect state.  The mutex is
32216:    * declared on the connection object because there is no contention between
39769:    * asynchronous statements (they are serialized on mAsyncExecutionThread).  It
39769:    * also protects mPendingStatements.
32216:    */
32216:   Mutex sharedAsyncExecutionMutex;
32216: 
35413:   /**
39769:    * Wraps the mutex that SQLite gives us from sqlite3_db_mutex.  This is public
39769:    * because we already expose the sqlite3* native connection and proper
39769:    * operation of the deadlock detector requires everyone to use the same single
39769:    * SQLiteMutex instance for correctness.
39769:    */
39769:   SQLiteMutex sharedDBMutex;
39769: 
39769:   /**
39287:    * References the thread this database was opened on.  This MUST be thread it is
39287:    * closed on.
35413:    */
35413:   const nsCOMPtr<nsIThread> threadOpenedOn;
35413: 
39287:   /**
39287:    * Closes the SQLite database, and warns about any non-finalized statements.
39287:    */
39287:   nsresult internalClose();
39287: 
42480:   /**
42480:    * Obtains the filename of the connection.  Useful for logging.
42480:    */
42480:   nsCString getFilename();
42480: 
    1: private:
27440:   ~Connection();
 3228: 
25399:   /**
39287:    * Sets the database into a closed state so no further actions can be
39287:    * performed.
39287:    *
39287:    * @note mDBConn is set to NULL in this method.
39287:    */
39287:   nsresult setClosedState();
39287: 
39287:   /**
25399:    * Describes a certain primitive type in the database.
25399:    *
25399:    * Possible Values Are:
25399:    *  INDEX - To check for the existence of an index
25399:    *  TABLE - To check for the existence of a table
25399:    */
25399:   enum DatabaseElementType {
25399:     INDEX,
25399:     TABLE
25399:   };
25399: 
25399:   /**
25399:    * Determines if the specified primitive exists.
25399:    *
25399:    * @param aElementType
25399:    *        The type of element to check the existence of
25399:    * @param aElementName
25399:    *        The name of the element to check for
25399:    * @returns true if element exists, false otherwise
25399:    */
27440:   nsresult databaseElementExists(enum DatabaseElementType aElementType,
25399:                                  const nsACString& aElementName,
25399:                                  PRBool *_exists);
25399: 
27440:   bool findFunctionByInstance(nsISupports *aInstance);
 3228: 
27440:   static int sProgressHelper(void *aArg);
 3228:   // Generic progress handler
 3228:   // Dispatch call to registered progress handler,
 3228:   // if there is one. Do nothing in other cases.
27440:   int progressHandler();
    1: 
    1:   sqlite3 *mDBConn;
    1:   nsCOMPtr<nsIFile> mDatabaseFile;
16602: 
73200:   nsTArray<nsRefPtr<StorageMemoryReporter> > mMemoryReporters;
64470: 
21035:   /**
21035:    * Lazily created thread for asynchronous statement execution.  Consumers
21035:    * should use getAsyncExecutionTarget rather than directly accessing this
21035:    * field.
21035:    */
21035:   nsCOMPtr<nsIThread> mAsyncExecutionThread;
22775:   /**
22775:    * Set to true by Close() prior to actually shutting down the thread.  This
22775:    * lets getAsyncExecutionTarget() know not to hand out any more thread
22775:    * references (or to create the thread in the first place).  This variable
22775:    * should be accessed while holding the mAsyncExecutionMutex.
22775:    */
39287:   bool mAsyncExecutionThreadShuttingDown;
21035: 
36744:   /**
36744:    * Tracks if we have a transaction in progress or not.  Access protected by
36744:    * mDBMutex.
36744:    */
    1:   PRBool mTransactionInProgress;
    1: 
36744:   /**
36744:    * Stores the mapping of a given function by name to its instance.  Access is
36744:    * protected by mDBMutex.
36744:    */
51598:   nsDataHashtable<nsCStringHashKey, FunctionInfo> mFunctions;
 3228: 
36744:   /**
36744:    * Stores the registered progress handler for the database connection.  Access
36744:    * is protected by mDBMutex.
36744:    */
 3228:   nsCOMPtr<mozIStorageProgressHandler> mProgressHandler;
    1: 
51598:   /**
51598:    * Stores the flags we passed to sqlite3_open_v2.
51598:    */
51598:   const int mFlags;
51598: 
30359:   // This is here for two reasons: 1) It's used to make sure that the
30359:   // connections do not outlive the service.  2) Our custom collating functions
30359:   // call its localeCompareStrings() method.
30359:   nsRefPtr<Service> mStorageService;
    1: };
    1: 
27440: } // namespace storage
27440: } // namespace mozilla
27440: 
59297: #endif // mozilla_storage_Connection_h
