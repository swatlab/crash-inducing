23126: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
23126:  * vim: set ts=8 sw=4 et tw=99:
23126:  *
23126:  * ***** BEGIN LICENSE BLOCK *****
23126:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
23126:  *
23126:  * The contents of this file are subject to the Mozilla Public License Version
23126:  * 1.1 (the "License"); you may not use this file except in compliance with
23126:  * the License. You may obtain a copy of the License at
23126:  * http://www.mozilla.org/MPL/
23126:  *
23126:  * Software distributed under the License is distributed on an "AS IS" basis,
23126:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
23126:  * for the specific language governing rights and limitations under the
23126:  * License.
23126:  *
23126:  * The Original Code is Mozilla Communicator client code, released
23126:  * March 31, 1998.
23126:  *
23126:  * The Initial Developer of the Original Code is
23126:  * Netscape Communications Corporation.
23126:  * Portions created by the Initial Developer are Copyright (C) 1998
23126:  * the Initial Developer. All Rights Reserved.
23126:  *
23126:  * Contributor(s):
23126:  *
23126:  * Alternatively, the contents of this file may be used under the terms of
23126:  * either of the GNU General Public License Version 2 or later (the "GPL"),
23126:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
23126:  * in which case the provisions of the GPL or the LGPL are applicable instead
23126:  * of those above. If you wish to allow use of your version of this file only
23126:  * under the terms of either the GPL or the LGPL, and not to allow others to
23126:  * use your version of this file under the terms of the MPL, indicate your
23126:  * decision by deleting the provisions above and replace them with the notice
23126:  * and other provisions required by the GPL or the LGPL. If you do not delete
23126:  * the provisions above, a recipient may use your version of this file under
23126:  * the terms of any one of the MPL, the GPL or the LGPL.
23126:  *
23126:  * ***** END LICENSE BLOCK ***** */
23126: 
23126: /*
23126:  * JS shell.
23126:  */
23126: #include <errno.h>
25472: #include <math.h>
23126: #include <stdio.h>
23126: #include <stdlib.h>
23126: #include <string.h>
25098: #include <signal.h>
23126: #include <locale.h>
23126: #include "jstypes.h"
23126: #include "jsarena.h"
23126: #include "jsutil.h"
23126: #include "jsprf.h"
23126: #include "jsapi.h"
23126: #include "jsarray.h"
23126: #include "jsatom.h"
23126: #include "jsbuiltins.h"
23126: #include "jscntxt.h"
25087: #include "jsdate.h"
23126: #include "jsdbgapi.h"
23126: #include "jsemit.h"
23126: #include "jsfun.h"
23126: #include "jsgc.h"
27012: #include "jsiter.h"
23126: #include "jslock.h"
23126: #include "jsnum.h"
23126: #include "jsobj.h"
23126: #include "jsparse.h"
23126: #include "jsscope.h"
23126: #include "jsscript.h"
32748: #include "jstracer.h"
23126: 
25087: #include "prmjtime.h"
25087: 
23126: #ifdef JSDEBUGGER
23126: #include "jsdebug.h"
23126: #ifdef JSDEBUGGER_JAVA_UI
23126: #include "jsdjava.h"
23126: #endif /* JSDEBUGGER_JAVA_UI */
23126: #ifdef JSDEBUGGER_C_UI
23126: #include "jsdb.h"
23126: #endif /* JSDEBUGGER_C_UI */
23126: #endif /* JSDEBUGGER */
23126: 
23126: #ifdef XP_UNIX
23126: #include <unistd.h>
23126: #include <sys/types.h>
23126: #include <sys/wait.h>
23126: #endif
23126: 
23126: #if defined(XP_WIN) || defined(XP_OS2)
23126: #include <io.h>     /* for isatty() */
23126: #endif
23126: 
26053: #ifdef XP_WIN
26053: #include <windows.h>
26053: #endif
26053: 
38585: using namespace js;
38585: 
23126: typedef enum JSShellExitCode {
23126:     EXITCODE_RUNTIME_ERROR      = 3,
23126:     EXITCODE_FILE_NOT_FOUND     = 4,
25472:     EXITCODE_OUT_OF_MEMORY      = 5,
25472:     EXITCODE_TIMEOUT            = 6
23126: } JSShellExitCode;
23126: 
23126: size_t gStackChunkSize = 8192;
23126: 
23126: /* Assume that we can not use more than 5e5 bytes of C stack by default. */
23126: static size_t gMaxStackSize = 500000;
26673: 
26673: #ifdef JS_THREADSAFE
26673: static PRUintn gStackBaseThreadIndex;
26673: #else
23126: static jsuword gStackBase;
26673: #endif
23126: 
23126: static size_t gScriptStackQuota = JS_DEFAULT_SCRIPT_STACK_QUOTA;
23442: 
25472: /*
25472:  * Limit the timeout to 30 minutes to prevent an overflow on platfoms
25472:  * that represent the time internally in microseconds using 32-bit int.
25472:  */
25472: static jsdouble MAX_TIMEOUT_INTERVAL = 1800.0;
25472: static jsdouble gTimeoutInterval = -1.0;
25472: static volatile bool gCanceled = false;
25087: 
33747: static bool enableJit = false;
33747: 
25087: static JSBool
25087: SetTimeoutValue(JSContext *cx, jsdouble t);
25087: 
25472: static bool
25472: InitWatchdog(JSRuntime *rt);
25087: 
25087: static void
25472: KillWatchdog();
25472: 
25472: static bool
25472: ScheduleWatchdog(JSRuntime *rt, jsdouble t);
25472: 
25472: static void
25472: CancelExecution(JSRuntime *rt);
23126: 
23726: /*
23726:  * Watchdog thread state.
23726:  */
23726: #ifdef JS_THREADSAFE
25472: 
25472: static PRLock *gWatchdogLock = NULL;
25087: static PRCondVar *gWatchdogWakeup = NULL;
25087: static PRThread *gWatchdogThread = NULL;
25472: static bool gWatchdogHasTimeout = false;
25472: static PRIntervalTime gWatchdogTimeout = 0;
25472: 
25472: static PRCondVar *gSleepWakeup = NULL;
25087: 
25087: /*
25087:  * Holding the gcLock already guarantees that the context list is locked when
25087:  * the watchdog thread walks it.
25087:  */
25087: 
25087: #define WITH_LOCKED_CONTEXT_LIST(x)             \
25087:     JS_BEGIN_MACRO                              \
25087:         x;                                      \
25087:     JS_END_MACRO
25087: 
25087: #else
25472: 
25087: static JSRuntime *gRuntime = NULL;
25087: 
25087: /* 
25087:  * Since signal handlers can't block, we must disable them before manipulating
25087:  * the context list.
25087:  */
25087: #define WITH_LOCKED_CONTEXT_LIST(x)                                           \
25087:     JS_BEGIN_MACRO                                                            \
25472:         ScheduleWatchdog(gRuntime, -1);                                       \
25087:         x;                                                                    \
25472:         ScheduleWatchdog(gRuntime, gTimeoutInterval);                         \
25087:     JS_END_MACRO
23726: #endif
23726: 
23126: int gExitCode = 0;
23126: JSBool gQuitting = JS_FALSE;
23126: FILE *gErrFile = NULL;
23126: FILE *gOutFile = NULL;
23126: 
23126: static JSBool reportWarnings = JS_TRUE;
23126: static JSBool compileOnly = JS_FALSE;
23126: 
23126: typedef enum JSShellErrNum {
23126: #define MSG_DEF(name, number, count, exception, format) \
23126:     name = number,
23126: #include "jsshell.msg"
23126: #undef MSG_DEF
23126:     JSShellErr_Limit
23126: #undef MSGDEF
23126: } JSShellErrNum;
23126: 
23126: static const JSErrorFormatString *
23126: my_GetErrorMessage(void *userRef, const char *locale, const uintN errorNumber);
35108: 
23126: static JSObject *
35108: split_setup(JSContext *cx, JSBool evalcx);
23126: 
23126: #ifdef EDITLINE
23126: JS_BEGIN_EXTERN_C
23908: JS_EXTERN_API(char)    *readline(const char *prompt);
23908: JS_EXTERN_API(void)     add_history(char *line);
23126: JS_END_EXTERN_C
23126: #endif
23126: 
31366: class ToString {
31366: public:
31366:     ToString(JSContext *aCx, jsval v, JSBool aThrow = JS_FALSE)
31366:     : cx(aCx)
31366:     , mThrow(aThrow)
31366:     {
31366:         mStr = JS_ValueToString(cx, v);
31366:         if (!aThrow && !mStr && JS_IsExceptionPending(cx)) {
31366:             if (!JS_ReportPendingException(cx))
31366:                 JS_ClearPendingException(cx);
31366:         }
31366:         JS_AddNamedRoot(cx, &mStr, "Value ToString helper");
31366:     }
31366:     ~ToString() {
31366:         JS_RemoveRoot(cx, &mStr);
31366:     }
31366:     JSBool threw() { return !mStr; }
31366:     jsval getJSVal() { return STRING_TO_JSVAL(mStr); }
31366:     const char *getBytes() {
31366:         return mStr ? JS_GetStringBytes(mStr) : "(error converting value)";
31366:     }
31366: private:
31366:     JSContext *cx;
31366:     JSString *mStr;
31366:     JSBool mThrow;
31366: };
31366: 
23723: static char *
23723: GetLine(FILE *file, const char * prompt)
23723: {
23723:     size_t size;
23723:     char *buffer;
23126: #ifdef EDITLINE
23126:     /*
23126:      * Use readline only if file is stdin, because there's no way to specify
23126:      * another handle.  Are other filehandles interactive?
23126:      */
23126:     if (file == stdin) {
23126:         char *linep = readline(prompt);
23723:         /*
23723:          * We set it to zero to avoid complaining about inappropriate ioctl
23723:          * for device in the case of EOF. Looks like errno == 251 if line is
25486:          * finished with EOF and errno == 25 (EINVAL on Mac) if there is
25486:          * nothing left to read.
23723:          */
25486:         if (errno == 251 || errno == 25 || errno == EINVAL)
23723:             errno = 0;
23126:         if (!linep)
23723:             return NULL;
23126:         if (linep[0] != '\0')
23126:             add_history(linep);
23723:         return linep;
23723:     }
23126: #endif
23723:     size_t len = 0;
23723:     if (*prompt != '\0') {
25469:         fprintf(gOutFile, "%s", prompt);
23126:         fflush(gOutFile);
23723:     }
23723:     size = 80;
23723:     buffer = (char *) malloc(size);
23723:     if (!buffer)
23723:         return NULL;
23723:     char *current = buffer;
23723:     while (fgets(current, size - len, file)) {
23723:         len += strlen(current);
23723:         char *t = buffer + len - 1;
23723:         if (*t == '\n') {
23723:             /* Line was read. We remove '\n' and exit. */
23723:             *t = '\0';
23723:             return buffer;
23723:         }
23723:         if (len + 1 == size) {
23723:             size = size * 2;
23723:             char *tmp = (char *) realloc(buffer, size);
23723:             if (!tmp) {
23723:                 free(buffer);
23723:                 return NULL;
23723:             }
23723:             buffer = tmp;
23723:         }
23723:         current = buffer + len;
23723:     }
23723:     if (len && !ferror(file))
23723:         return buffer;
23723:     free(buffer);
23723:     return NULL;
23457: }
23457: 
23726: /*
23726:  * State to store as JSContext private.
23726:  *
25087:  * We declare such timestamp as volatile as they are updated in the operation
23726:  * callback without taking any locks. Any possible race can only lead to more
23726:  * frequent callback calls. This is safe as the callback does everything based
23726:  * on timing.
23726:  */
23457: struct JSShellContextData {
25087:     volatile JSIntervalTime startTime;
23457: };
23457: 
23457: static JSShellContextData *
23457: NewContextData()
23457: {
25472:     /* Prevent creation of new contexts after we have been canceled. */
25472:     if (gCanceled)
25472:         return NULL;
25472: 
23457:     JSShellContextData *data = (JSShellContextData *)
25087:                                calloc(sizeof(JSShellContextData), 1);
23457:     if (!data)
23457:         return NULL;
25087:     data->startTime = js_IntervalNow();
23457:     return data;
23457: }
23457: 
23457: static inline JSShellContextData *
23457: GetContextData(JSContext *cx)
23457: {
23457:     JSShellContextData *data = (JSShellContextData *) JS_GetContextPrivate(cx);
23457: 
23457:     JS_ASSERT(data);
23457:     return data;
23457: }
23457: 
23126: static JSBool
23457: ShellOperationCallback(JSContext *cx)
23126: {
25709:     if (!gCanceled)
25709:         return JS_TRUE;
25709: 
25709:     JS_ClearPendingException(cx);
25709:     return JS_FALSE;
23126: }
23126: 
23126: static void
26673: SetThreadStackLimit(JSContext *cx)
23126: {
23126:     jsuword stackLimit;
23126: 
23126:     if (gMaxStackSize == 0) {
23126:         /*
23126:          * Disable checking for stack overflow if limit is zero.
23126:          */
23126:         stackLimit = 0;
23126:     } else {
26673:         jsuword stackBase;
26673: #ifdef JS_THREADSAFE
26673:         stackBase = (jsuword) PR_GetThreadPrivate(gStackBaseThreadIndex);
26673: #else
26673:         stackBase = gStackBase;
26673: #endif
26673:         JS_ASSERT(stackBase != 0);
26672: #if JS_STACK_GROWTH_DIRECTION > 0
26673:         stackLimit = stackBase + gMaxStackSize;
26671: #else
26673:         stackLimit = stackBase - gMaxStackSize;
26671: #endif
23126:     }
23126:     JS_SetThreadStackLimit(cx, stackLimit);
26673: 
26673: }
26673: 
26673: static void
26673: SetContextOptions(JSContext *cx)
26673: {
26673:     SetThreadStackLimit(cx);
23126:     JS_SetScriptStackQuota(cx, gScriptStackQuota);
25087:     JS_SetOperationCallback(cx, ShellOperationCallback);
23126: }
23126: 
37620: #ifdef WINCE
37620: int errno;
37620: #endif
37620: 
23126: static void
23126: Process(JSContext *cx, JSObject *obj, char *filename, JSBool forceTTY)
23126: {
23126:     JSBool ok, hitEOF;
23126:     JSScript *script;
23126:     jsval result;
23126:     JSString *str;
23723:     char *buffer;
24199:     size_t size;
23126:     int lineno;
23126:     int startline;
23126:     FILE *file;
23126:     uint32 oldopts;
23126: 
23126:     if (forceTTY || !filename || strcmp(filename, "-") == 0) {
23126:         file = stdin;
23126:     } else {
23126:         file = fopen(filename, "r");
23126:         if (!file) {
23126:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
23126:                                  JSSMSG_CANT_OPEN, filename, strerror(errno));
23126:             gExitCode = EXITCODE_FILE_NOT_FOUND;
23126:             return;
23126:         }
23126:     }
23126: 
23126:     SetContextOptions(cx);
23126: 
23126: #ifndef WINCE
23126:     /* windows mobile (and possibly other os's) does not have a TTY */
37620:     if (!forceTTY && !isatty(fileno(file)))
37620: #endif
37620:     {
23126:         /*
23126:          * It's not interactive - just execute it.
23126:          *
23126:          * Support the UNIX #! shell hack; gobble the first line if it starts
23126:          * with '#'.  TODO - this isn't quite compatible with sharp variables,
23126:          * as a legal js program (using sharp variables) might start with '#'.
23126:          * But that would require multi-character lookahead.
23126:          */
23126:         int ch = fgetc(file);
23126:         if (ch == '#') {
23126:             while((ch = fgetc(file)) != EOF) {
23126:                 if (ch == '\n' || ch == '\r')
23126:                     break;
23126:             }
23126:         }
23126:         ungetc(ch, file);
23126: 
23126:         oldopts = JS_GetOptions(cx);
23126:         JS_SetOptions(cx, oldopts | JSOPTION_COMPILE_N_GO | JSOPTION_NO_SCRIPT_RVAL);
23126:         script = JS_CompileFileHandle(cx, obj, filename, file);
23126:         JS_SetOptions(cx, oldopts);
23126:         if (script) {
23126:             if (!compileOnly)
23126:                 (void)JS_ExecuteScript(cx, obj, script, NULL);
23126:             JS_DestroyScript(cx, script);
23126:         }
23126: 
23126:         if (file != stdin)
23126:             fclose(file);
23126:         return;
23126:     }
23126: 
23126:     /* It's an interactive filehandle; drop into read-eval-print loop. */
23126:     lineno = 1;
23126:     hitEOF = JS_FALSE;
23723:     buffer = NULL;
24199:     size = 0;           /* assign here to avoid warnings */
23126:     do {
23126:         /*
23126:          * Accumulate lines until we get a 'compilable unit' - one that either
23126:          * generates an error (before running out of source) or that compiles
23126:          * cleanly.  This should be whenever we get a complete statement that
23126:          * coincides with the end of a line.
23126:          */
23126:         startline = lineno;
25472:         size_t len = 0; /* initialize to avoid warnings */
23126:         do {
25472:             ScheduleWatchdog(cx->runtime, -1);
25472:             jsrefcount rc = JS_SuspendRequest(cx);
25472:             gCanceled = false;
23723:             errno = 0;
23723:             char *line = GetLine(file, startline == lineno ? "js> " : "");
23723:             if (!line) {
25486:                 JS_ResumeRequest(cx, rc);
23723:                 if (errno) {
23723:                     JS_ReportError(cx, strerror(errno));
23723:                     free(buffer);
23723:                     return;
23723:                 }
23126:                 hitEOF = JS_TRUE;
23126:                 break;
23126:             }
23723:             if (!buffer) {
23723:                 buffer = line;
23723:                 len = strlen(buffer);
23723:                 size = len + 1;
23723:             } else {
24198:                 /*
24198:                  * len + 1 is required to store '\n' in the end of line.
23723:                  */
23723:                 size_t newlen = strlen(line) + (len ? len + 1 : 0);
23723:                 if (newlen + 1 > size) {
23723:                     size = newlen + 1 > size * 2 ? newlen + 1 : size * 2;
23723:                     char *newBuf = (char *) realloc(buffer, size);
23723:                     if (!newBuf) {
23723:                         free(buffer);
23723:                         free(line);
25486:                         JS_ResumeRequest(cx, rc);
23723:                         JS_ReportOutOfMemory(cx);
23723:                         return;
23723:                     }
23723:                     buffer = newBuf;
23723:                 }
23723:                 char *current = buffer + len;
23723:                 if (startline != lineno)
23723:                     *current++ = '\n';
23723:                 strcpy(current, line);
23723:                 len = newlen;
23723:                 free(line);
23723:             }
23126:             lineno++;
25472:             JS_ResumeRequest(cx, rc);
25472:             if (!ScheduleWatchdog(cx->runtime, gTimeoutInterval)) {
25472:                 hitEOF = JS_TRUE;
25472:                 break;
25472:             }
23723:         } while (!JS_BufferIsCompilableUnit(cx, obj, buffer, len));
23126: 
24239:         if (hitEOF && !buffer)
23733:             break;
23733: 
23126:         /* Clear any pending exception from previous failed compiles. */
23126:         JS_ClearPendingException(cx);
24148: 
24148:         /* Even though we're interactive, we have a compile-n-go opportunity. */
24148:         oldopts = JS_GetOptions(cx);
24148:         if (!compileOnly)
24148:             JS_SetOptions(cx, oldopts | JSOPTION_COMPILE_N_GO);
23723:         script = JS_CompileScript(cx, obj, buffer, len, "typein",
23126:                                   startline);
24148:         if (!compileOnly)
24148:             JS_SetOptions(cx, oldopts);
24148: 
23126:         if (script) {
23126:             if (!compileOnly) {
23126:                 ok = JS_ExecuteScript(cx, obj, script, &result);
23126:                 if (ok && !JSVAL_IS_VOID(result)) {
32781:                     str = JS_ValueToSource(cx, result);
23126:                     if (str)
23126:                         fprintf(gOutFile, "%s\n", JS_GetStringBytes(str));
23126:                     else
23126:                         ok = JS_FALSE;
23126:                 }
23126:             }
23126:             JS_DestroyScript(cx, script);
23126:         }
23723:         *buffer = '\0';
24304:     } while (!hitEOF && !gQuitting);
23733: 
23723:     free(buffer);
23126:     fprintf(gOutFile, "\n");
23126:     if (file != stdin)
23126:         fclose(file);
23126:     return;
23126: }
23126: 
23126: static int
23126: usage(void)
23126: {
23126:     fprintf(gErrFile, "%s\n", JS_GetImplementationVersion());
24148:     fprintf(gErrFile, "usage: js [-zKPswWxCij] [-t timeoutSeconds] [-c stackchunksize] [-o option] [-v version] [-f scriptfile] [-e script] [-S maxstacksize] "
23126: #ifdef JS_GC_ZEAL
23126: "[-Z gczeal] "
23126: #endif
29368: #ifdef MOZ_TRACEVIS
29368: "[-T TraceVisFileName] "
29368: #endif
23126: "[scriptfile] [scriptarg...]\n");
23126:     return 2;
23126: }
23126: 
23126: /*
23126:  * JSContext option name to flag map. The option names are in alphabetical
23126:  * order for better reporting.
23126:  */
23126: static const struct {
23126:     const char  *name;
23126:     uint32      flag;
23126: } js_options[] = {
23126:     {"anonfunfix",      JSOPTION_ANONFUNFIX},
23126:     {"atline",          JSOPTION_ATLINE},
23126:     {"jit",             JSOPTION_JIT},
23126:     {"relimit",         JSOPTION_RELIMIT},
23126:     {"strict",          JSOPTION_STRICT},
23126:     {"werror",          JSOPTION_WERROR},
23126:     {"xml",             JSOPTION_XML},
23126: };
23126: 
23126: static uint32
23126: MapContextOptionNameToFlag(JSContext* cx, const char* name)
23126: {
23126:     for (size_t i = 0; i != JS_ARRAY_LENGTH(js_options); ++i) {
23126:         if (strcmp(name, js_options[i].name) == 0)
23126:             return js_options[i].flag;
23126:     }
23126: 
23126:     char* msg = JS_sprintf_append(NULL,
23126:                                   "unknown option name '%s'."
23126:                                   " The valid names are ", name);
23126:     for (size_t i = 0; i != JS_ARRAY_LENGTH(js_options); ++i) {
23126:         if (!msg)
23126:             break;
23126:         msg = JS_sprintf_append(msg, "%s%s", js_options[i].name,
23126:                                 (i + 2 < JS_ARRAY_LENGTH(js_options)
23126:                                  ? ", "
23126:                                  : i + 2 == JS_ARRAY_LENGTH(js_options)
23126:                                  ? " and "
23126:                                  : "."));
23126:     }
23126:     if (!msg) {
23126:         JS_ReportOutOfMemory(cx);
23126:     } else {
23126:         JS_ReportError(cx, msg);
23126:         free(msg);
23126:     }
23126:     return 0;
23126: }
23126: 
23126: extern JSClass global_class;
23126: 
37741: #if defined(JS_TRACER) && defined(DEBUG)
37741: namespace js {
37741:     extern struct JSClass jitstats_class;
37741:     void InitJITStatsClass(JSContext *cx, JSObject *glob);
37741: }
37741: #endif
37741: 
23126: static int
23126: ProcessArgs(JSContext *cx, JSObject *obj, char **argv, int argc)
23126: {
23126:     int i, j, length;
23126:     JSObject *argsObj;
23126:     char *filename = NULL;
23126:     JSBool isInteractive = JS_TRUE;
23126:     JSBool forceTTY = JS_FALSE;
23126: 
23126:     /*
23126:      * Scan past all optional arguments so we can create the arguments object
23126:      * before processing any -f options, which must interleave properly with
23126:      * -v and -w options.  This requires two passes, and without getopt, we'll
23126:      * have to keep the option logic here and in the second for loop in sync.
23126:      */
23126:     for (i = 0; i < argc; i++) {
23126:         if (argv[i][0] != '-' || argv[i][1] == '\0') {
23126:             ++i;
23126:             break;
23126:         }
23126:         switch (argv[i][1]) {
23126:           case 'c':
23126:           case 'f':
23126:           case 'e':
23126:           case 'v':
23126:           case 'S':
23457:           case 't':
23126: #ifdef JS_GC_ZEAL
23126:           case 'Z':
23126: #endif
29368: #ifdef MOZ_TRACEVIS
29368:           case 'T':
29368: #endif
23126:             ++i;
23126:             break;
23126:           default:;
23126:         }
23126:     }
23126: 
23126:     /*
23126:      * Create arguments early and define it to root it, so it's safe from any
23126:      * GC calls nested below, and so it is available to -f <file> arguments.
23126:      */
23126:     argsObj = JS_NewArrayObject(cx, 0, NULL);
23126:     if (!argsObj)
23126:         return 1;
23126:     if (!JS_DefineProperty(cx, obj, "arguments", OBJECT_TO_JSVAL(argsObj),
23126:                            NULL, NULL, 0)) {
23126:         return 1;
23126:     }
23126: 
23126:     length = argc - i;
23126:     for (j = 0; j < length; j++) {
23126:         JSString *str = JS_NewStringCopyZ(cx, argv[i++]);
23126:         if (!str)
23126:             return 1;
23126:         if (!JS_DefineElement(cx, argsObj, j, STRING_TO_JSVAL(str),
23126:                               NULL, NULL, JSPROP_ENUMERATE)) {
23126:             return 1;
23126:         }
23126:     }
23126: 
23126:     for (i = 0; i < argc; i++) {
23126:         if (argv[i][0] != '-' || argv[i][1] == '\0') {
23126:             filename = argv[i++];
23126:             isInteractive = JS_FALSE;
23126:             break;
23126:         }
23126: 
23126:         switch (argv[i][1]) {
23126:         case 'v':
23126:             if (++i == argc)
23126:                 return usage();
23126: 
23126:             JS_SetVersion(cx, (JSVersion) atoi(argv[i]));
23126:             break;
23126: 
23126: #ifdef JS_GC_ZEAL
23126:         case 'Z':
23126:             if (++i == argc)
23126:                 return usage();
23126:             JS_SetGCZeal(cx, atoi(argv[i]));
23126:             break;
23126: #endif
23126: 
23126:         case 'w':
23126:             reportWarnings = JS_TRUE;
23126:             break;
23126: 
23126:         case 'W':
23126:             reportWarnings = JS_FALSE;
23126:             break;
23126: 
23126:         case 's':
23126:             JS_ToggleOptions(cx, JSOPTION_STRICT);
23126:             break;
23126: 
23126:         case 'E':
23126:             JS_ToggleOptions(cx, JSOPTION_RELIMIT);
23126:             break;
23126: 
23126:         case 'x':
23126:             JS_ToggleOptions(cx, JSOPTION_XML);
23126:             break;
23126: 
23126:         case 'j':
33747:             enableJit = !enableJit;
23126:             JS_ToggleOptions(cx, JSOPTION_JIT);
23126: #if defined(JS_TRACER) && defined(DEBUG)
37741:             js::InitJITStatsClass(cx, JS_GetGlobalObject(cx));
23126:             JS_DefineObject(cx, JS_GetGlobalObject(cx), "tracemonkey",
37741:                             &js::jitstats_class, NULL, 0);
23126: #endif
23126:             break;
23126: 
23126:         case 'o':
23126:           {
23126:             if (++i == argc)
23126:                 return usage();
23126: 
23126:             uint32 flag = MapContextOptionNameToFlag(cx, argv[i]);
23126:             if (flag == 0)
23126:                 return gExitCode;
23126:             JS_ToggleOptions(cx, flag);
23126:             break;
23126:           }
23126:         case 'P':
23126:             if (JS_GET_CLASS(cx, JS_GetPrototype(cx, obj)) != &global_class) {
23126:                 JSObject *gobj;
23126: 
23126:                 if (!JS_SealObject(cx, obj, JS_TRUE))
23126:                     return JS_FALSE;
23126:                 gobj = JS_NewObject(cx, &global_class, NULL, NULL);
23126:                 if (!gobj)
23126:                     return JS_FALSE;
23126:                 if (!JS_SetPrototype(cx, gobj, obj))
23126:                     return JS_FALSE;
23126:                 JS_SetParent(cx, gobj, NULL);
23126:                 JS_SetGlobalObject(cx, gobj);
23126:                 obj = gobj;
23126:             }
23126:             break;
23126: 
23457:         case 't':
23126:             if (++i == argc)
23126:                 return usage();
23126: 
25087:             if (!SetTimeoutValue(cx, atof(argv[i])))
23457:                 return JS_FALSE;
23457: 
23126:             break;
23126: 
23126:         case 'c':
23126:             /* set stack chunk size */
23126:             gStackChunkSize = atoi(argv[++i]);
23126:             break;
23126: 
23126:         case 'f':
23126:             if (++i == argc)
23126:                 return usage();
23126: 
23126:             Process(cx, obj, argv[i], JS_FALSE);
25472:             if (gExitCode != 0)
25472:                 return gExitCode;
23126: 
23126:             /*
23126:              * XXX: js -f foo.js should interpret foo.js and then
23126:              * drop into interactive mode, but that breaks the test
23126:              * harness. Just execute foo.js for now.
23126:              */
23126:             isInteractive = JS_FALSE;
23126:             break;
23126: 
23126:         case 'e':
23126:         {
23126:             jsval rval;
23126: 
23126:             if (++i == argc)
23126:                 return usage();
23126: 
23126:             /* Pass a filename of -e to imitate PERL */
23126:             JS_EvaluateScript(cx, obj, argv[i], strlen(argv[i]),
23126:                               "-e", 1, &rval);
23126: 
23126:             isInteractive = JS_FALSE;
23126:             break;
23126: 
23126:         }
23126:         case 'C':
23126:             compileOnly = JS_TRUE;
23126:             isInteractive = JS_FALSE;
23126:             break;
23126: 
23126:         case 'i':
23126:             isInteractive = forceTTY = JS_TRUE;
23126:             break;
23126: 
23126:         case 'S':
23126:             if (++i == argc)
23126:                 return usage();
23126: 
23126:             /* Set maximum stack size. */
23126:             gMaxStackSize = atoi(argv[i]);
23126:             break;
23126: 
23126:         case 'z':
35108:             obj = split_setup(cx, JS_FALSE);
23126:             if (!obj)
23126:                 return gExitCode;
23126:             break;
23126: #ifdef MOZ_SHARK
23126:         case 'k':
23126:             JS_ConnectShark();
23126:             break;
23126: #endif
29368: #ifdef MOZ_TRACEVIS
29368:         case 'T':
29368:             if (++i == argc)
29368:                 return usage();
29368: 
38585:             StartTraceVis(argv[i]);
29368:             break;
29368: #endif
23126:         default:
23126:             return usage();
23126:         }
23126:     }
23126: 
23126:     if (filename || isInteractive)
23126:         Process(cx, obj, filename, forceTTY);
23126:     return gExitCode;
23126: }
23126: 
23126: static JSBool
23126: Version(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     if (argc > 0 && JSVAL_IS_INT(argv[0]))
23126:         *rval = INT_TO_JSVAL(JS_SetVersion(cx, (JSVersion) JSVAL_TO_INT(argv[0])));
23126:     else
23126:         *rval = INT_TO_JSVAL(JS_GetVersion(cx));
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Options(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     uint32 optset, flag;
23126:     JSString *str;
23126:     const char *opt;
23126:     char *names;
23126:     JSBool found;
23126: 
23126:     optset = 0;
23126:     for (uintN i = 0; i < argc; i++) {
23126:         str = JS_ValueToString(cx, argv[i]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         argv[i] = STRING_TO_JSVAL(str);
23126:         opt = JS_GetStringBytes(str);
23126:         if (!opt)
23126:             return JS_FALSE;
23126:         flag = MapContextOptionNameToFlag(cx,  opt);
23126:         if (!flag)
23126:             return JS_FALSE;
23126:         optset |= flag;
23126:     }
23126:     optset = JS_ToggleOptions(cx, optset);
23126: 
23126:     names = NULL;
23126:     found = JS_FALSE;
23126:     for (size_t i = 0; i != JS_ARRAY_LENGTH(js_options); i++) {
23126:         if (js_options[i].flag & optset) {
23126:             found = JS_TRUE;
23126:             names = JS_sprintf_append(names, "%s%s",
23126:                                       names ? "," : "", js_options[i].name);
23126:             if (!names)
23126:                 break;
23126:         }
23126:     }
23126:     if (!found)
23126:         names = strdup("");
23126:     if (!names) {
23126:         JS_ReportOutOfMemory(cx);
23126:         return JS_FALSE;
23126:     }
23126:     str = JS_NewString(cx, names, strlen(names));
23126:     if (!str) {
23126:         free(names);
23126:         return JS_FALSE;
23126:     }
23126:     *rval = STRING_TO_JSVAL(str);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Load(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     uintN i;
23126:     JSString *str;
23126:     const char *filename;
23126:     JSScript *script;
23126:     JSBool ok;
23126:     uint32 oldopts;
23126: 
23126:     for (i = 0; i < argc; i++) {
23126:         str = JS_ValueToString(cx, argv[i]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         argv[i] = STRING_TO_JSVAL(str);
23126:         filename = JS_GetStringBytes(str);
23126:         errno = 0;
23126:         oldopts = JS_GetOptions(cx);
23126:         JS_SetOptions(cx, oldopts | JSOPTION_COMPILE_N_GO | JSOPTION_NO_SCRIPT_RVAL);
23126:         script = JS_CompileFile(cx, obj, filename);
23126:         JS_SetOptions(cx, oldopts);
23126:         if (!script) {
23126:             ok = JS_FALSE;
23126:         } else {
23126:             ok = !compileOnly
23126:                  ? JS_ExecuteScript(cx, obj, script, NULL)
23126:                  : JS_TRUE;
23126:             JS_DestroyScript(cx, script);
23126:         }
23126:         if (!ok)
23126:             return JS_FALSE;
23126:     }
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: /*
23126:  * function readline()
23126:  * Provides a hook for scripts to read a line from stdin.
23126:  */
23126: static JSBool
23126: ReadLine(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126: #define BUFSIZE 256
23126:     FILE *from;
23126:     char *buf, *tmp;
23126:     size_t bufsize, buflength, gotlength;
23126:     JSBool sawNewline;
23126:     JSString *str;
23126: 
23126:     from = stdin;
23126:     buflength = 0;
23126:     bufsize = BUFSIZE;
23126:     buf = (char *) JS_malloc(cx, bufsize);
23126:     if (!buf)
23126:         return JS_FALSE;
23126: 
23126:     sawNewline = JS_FALSE;
23126:     while ((gotlength =
23126:             js_fgets(buf + buflength, bufsize - buflength, from)) > 0) {
23126:         buflength += gotlength;
23126: 
23126:         /* Are we done? */
23126:         if (buf[buflength - 1] == '\n') {
23126:             buf[buflength - 1] = '\0';
23126:             sawNewline = JS_TRUE;
23126:             break;
23126:         } else if (buflength < bufsize - 1) {
23126:             break;
23126:         }
23126: 
23126:         /* Else, grow our buffer for another pass. */
23126:         bufsize *= 2;
23126:         if (bufsize > buflength) {
23126:             tmp = (char *) JS_realloc(cx, buf, bufsize);
23126:         } else {
23126:             JS_ReportOutOfMemory(cx);
23126:             tmp = NULL;
23126:         }
23126: 
23126:         if (!tmp) {
23126:             JS_free(cx, buf);
23126:             return JS_FALSE;
23126:         }
23126: 
23126:         buf = tmp;
23126:     }
23126: 
23126:     /* Treat the empty string specially. */
23126:     if (buflength == 0) {
23126:         *vp = feof(from) ? JSVAL_NULL : JS_GetEmptyStringValue(cx);
23126:         JS_free(cx, buf);
23126:         return JS_TRUE;
23126:     }
23126: 
23126:     /* Shrink the buffer to the real size. */
23126:     tmp = (char *) JS_realloc(cx, buf, buflength);
23126:     if (!tmp) {
23126:         JS_free(cx, buf);
23126:         return JS_FALSE;
23126:     }
23126: 
23126:     buf = tmp;
23126: 
23126:     /*
23126:      * Turn buf into a JSString. Note that buflength includes the trailing null
23126:      * character.
23126:      */
23126:     str = JS_NewString(cx, buf, sawNewline ? buflength - 1 : buflength);
23126:     if (!str) {
23126:         JS_free(cx, buf);
23126:         return JS_FALSE;
23126:     }
23126: 
23126:     *vp = STRING_TO_JSVAL(str);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Print(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     jsval *argv;
23126:     uintN i;
23126:     JSString *str;
23126:     char *bytes;
23126: 
23126:     argv = JS_ARGV(cx, vp);
23126:     for (i = 0; i < argc; i++) {
23126:         str = JS_ValueToString(cx, argv[i]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         bytes = JS_EncodeString(cx, str);
23126:         if (!bytes)
23126:             return JS_FALSE;
23126:         fprintf(gOutFile, "%s%s", i ? " " : "", bytes);
23126:         JS_free(cx, bytes);
23126:     }
23126: 
23126:     fputc('\n', gOutFile);
23126:     fflush(gOutFile);
23126: 
23126:     JS_SET_RVAL(cx, vp, JSVAL_VOID);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Help(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
23126: 
23126: static JSBool
23126: Quit(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JS_ConvertArguments(cx, argc, argv,"/ i", &gExitCode);
23126: 
23126:     gQuitting = JS_TRUE;
23126:     return JS_FALSE;
23126: }
23126: 
25699: static const char *
25699: ToSource(JSContext *cx, jsval *vp)
25699: {
25699:     JSString *str = JS_ValueToSource(cx, *vp);
25699:     if (str) {
25699:         *vp = STRING_TO_JSVAL(str);
25699:         return JS_GetStringBytes(str);
25699:     }
25699:     JS_ClearPendingException(cx);
25699:     return "<<error converting value to string>>";
25699: }
25699: 
25699: static JSBool
25699: AssertEq(JSContext *cx, uintN argc, jsval *vp)
25699: {
32760:     if (!(argc == 2 || (argc == 3 && JSVAL_IS_STRING(JS_ARGV(cx, vp)[2])))) {
25699:         JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
32760:                              (argc < 2)
32760:                              ? JSSMSG_NOT_ENOUGH_ARGS
32760:                              : (argc == 3)
32760:                              ? JSSMSG_INVALID_ARGS
32760:                              : JSSMSG_TOO_MANY_ARGS,
25699:                              "assertEq");
25699:         return JS_FALSE;
25699:     }
25699: 
25699:     jsval *argv = JS_ARGV(cx, vp);
32760:     if (!JS_SameValue(cx, argv[0], argv[1])) {
25699:         const char *actual = ToSource(cx, &argv[0]);
25699:         const char *expected = ToSource(cx, &argv[1]);
32760:         if (argc == 2) {
25699:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL, JSSMSG_ASSERT_EQ_FAILED,
25699:                                  actual, expected);
32760:         } else {
32760:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL, JSSMSG_ASSERT_EQ_FAILED_MSG,
32760:                                  actual, expected, JS_GetStringBytes(JSVAL_TO_STRING(argv[2])));
32760:         }
25699:         return JS_FALSE;
25699:     }
25699:     JS_SET_RVAL(cx, vp, JSVAL_VOID);
25699:     return JS_TRUE;
25699: }
25699: 
23126: static JSBool
23126: GC(JSContext *cx, uintN argc, jsval *vp)
23126: {
36680:     size_t preBytes = cx->runtime->gcBytes;
23126:     JS_GC(cx);
23126: 
28179:     char buf[256];
28179:     JS_snprintf(buf, sizeof(buf), "before %lu, after %lu, break %08lx\n",
36680:                 (unsigned long)preBytes, (unsigned long)cx->runtime->gcBytes,
31119: #ifdef HAVE_SBRK
23126:                 (unsigned long)sbrk(0)
23126: #else
23126:                 0
23126: #endif
23126:                 );
36680:     *vp = STRING_TO_JSVAL(JS_NewStringCopyZ(cx, buf));
36680:     return true;
36680: }
36680: 
23126: #ifdef JS_GCMETER
36680: static JSBool
36680: GCStats(JSContext *cx, uintN argc, jsval *vp)
36680: {
36680:     js_DumpGCStats(cx->runtime, stdout);
36680:     *vp = JSVAL_VOID;
36680:     return true;
36680: }
23126: #endif
23126: 
23126: static JSBool
23126: GCParameter(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     JSString *str;
23126:     const char *paramName;
23126:     JSGCParamKey param;
23126:     uint32 value;
23126: 
23126:     if (argc == 0) {
23126:         str = JS_ValueToString(cx, JSVAL_VOID);
23126:         JS_ASSERT(str);
23126:     } else {
23126:         str = JS_ValueToString(cx, vp[2]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         vp[2] = STRING_TO_JSVAL(str);
23126:     }
23126:     paramName = JS_GetStringBytes(str);
23126:     if (!paramName)
23126:         return JS_FALSE;
23126:     if (strcmp(paramName, "maxBytes") == 0) {
23126:         param = JSGC_MAX_BYTES;
32553:     } else if (strcmp(paramName, "maxMallocBytes") == 0) {
32553:         param = JSGC_MAX_MALLOC_BYTES;
24313:     } else if (strcmp(paramName, "gcStackpoolLifespan") == 0) {
24313:         param = JSGC_STACKPOOL_LIFESPAN;
24313:     } else if (strcmp(paramName, "gcBytes") == 0) {
24313:         param = JSGC_BYTES;
24313:     } else if (strcmp(paramName, "gcNumber") == 0) {
24313:         param = JSGC_NUMBER;
32553:     } else if (strcmp(paramName, "gcTriggerFactor") == 0) {
32553:         param = JSGC_TRIGGER_FACTOR;
23126:     } else {
23126:         JS_ReportError(cx,
24313:                        "the first argument argument must be maxBytes, "
24313:                        "maxMallocBytes, gcStackpoolLifespan, gcBytes, "
24313:                        "gcNumber or gcTriggerFactor");
23126:         return JS_FALSE;
23126:     }
23126: 
24313:     if (argc == 1) {
24313:         value = JS_GetGCParameter(cx->runtime, param);
24313:         return JS_NewNumberValue(cx, value, &vp[0]);
24313:     }
24313: 
24313:     if (param == JSGC_NUMBER ||
24313:         param == JSGC_BYTES) {
24313:         JS_ReportError(cx, "Attempt to change read-only parameter %s",
24313:                        paramName);
23126:         return JS_FALSE;
24313:     }
24313: 
24313:     if (!JS_ValueToECMAUint32(cx, vp[3], &value)) {
23126:         JS_ReportError(cx,
24313:                        "the second argument must be convertable to uint32 "
24313:                        "with non-zero value");
24313:         return JS_FALSE;
24313:     }
32553:     if (param == JSGC_TRIGGER_FACTOR && value < 100) {
32553:         JS_ReportError(cx,
32553:                        "the gcTriggerFactor value must be >= 100");
32553:         return JS_FALSE;
32553:     }
23126:     JS_SetGCParameter(cx->runtime, param, value);
23126:     *vp = JSVAL_VOID;
23126:     return JS_TRUE;
23126: }
23126: 
23126: #ifdef JS_GC_ZEAL
23126: static JSBool
23126: GCZeal(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     uint32 zeal;
23126: 
23126:     if (!JS_ValueToECMAUint32(cx, argc == 0 ? JSVAL_VOID : vp[2], &zeal))
23126:         return JS_FALSE;
23126:     JS_SetGCZeal(cx, (uint8)zeal);
23126:     *vp = JSVAL_VOID;
23126:     return JS_TRUE;
23126: }
23126: #endif /* JS_GC_ZEAL */
23126: 
23126: typedef struct JSCountHeapNode JSCountHeapNode;
23126: 
23126: struct JSCountHeapNode {
23126:     void                *thing;
23126:     int32               kind;
23126:     JSCountHeapNode     *next;
23126: };
23126: 
23126: typedef struct JSCountHeapTracer {
23126:     JSTracer            base;
23126:     JSDHashTable        visited;
23126:     JSBool              ok;
23126:     JSCountHeapNode     *traceList;
23126:     JSCountHeapNode     *recycleList;
23126: } JSCountHeapTracer;
23126: 
23126: static void
23126: CountHeapNotify(JSTracer *trc, void *thing, uint32 kind)
23126: {
23126:     JSCountHeapTracer *countTracer;
23126:     JSDHashEntryStub *entry;
23126:     JSCountHeapNode *node;
23126: 
23126:     JS_ASSERT(trc->callback == CountHeapNotify);
23126:     countTracer = (JSCountHeapTracer *)trc;
23126:     if (!countTracer->ok)
23126:         return;
23126: 
23126:     entry = (JSDHashEntryStub *)
23126:             JS_DHashTableOperate(&countTracer->visited, thing, JS_DHASH_ADD);
23126:     if (!entry) {
23126:         JS_ReportOutOfMemory(trc->context);
23126:         countTracer->ok = JS_FALSE;
23126:         return;
23126:     }
23126:     if (entry->key)
23126:         return;
23126:     entry->key = thing;
23126: 
23126:     node = countTracer->recycleList;
23126:     if (node) {
23126:         countTracer->recycleList = node->next;
23126:     } else {
23126:         node = (JSCountHeapNode *) JS_malloc(trc->context, sizeof *node);
23126:         if (!node) {
23126:             countTracer->ok = JS_FALSE;
23126:             return;
23126:         }
23126:     }
23126:     node->thing = thing;
23126:     node->kind = kind;
23126:     node->next = countTracer->traceList;
23126:     countTracer->traceList = node;
23126: }
23126: 
23126: static JSBool
23126: CountHeap(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     void* startThing;
23126:     int32 startTraceKind;
23126:     jsval v;
23126:     int32 traceKind, i;
23126:     JSString *str;
23126:     char *bytes;
23126:     JSCountHeapTracer countTracer;
23126:     JSCountHeapNode *node;
23126:     size_t counter;
23126: 
23126:     static const struct {
23126:         const char       *name;
23126:         int32             kind;
23126:     } traceKindNames[] = {
23126:         { "all",        -1                  },
23126:         { "object",     JSTRACE_OBJECT      },
23126:         { "double",     JSTRACE_DOUBLE      },
23126:         { "string",     JSTRACE_STRING      },
23126: #if JS_HAS_XML_SUPPORT
23126:         { "xml",        JSTRACE_XML         },
23126: #endif
23126:     };
23126: 
23126:     startThing = NULL;
23126:     startTraceKind = 0;
23126:     if (argc > 0) {
23126:         v = JS_ARGV(cx, vp)[0];
23126:         if (JSVAL_IS_TRACEABLE(v)) {
23126:             startThing = JSVAL_TO_TRACEABLE(v);
23126:             startTraceKind = JSVAL_TRACE_KIND(v);
23126:         } else if (v != JSVAL_NULL) {
23126:             JS_ReportError(cx,
23126:                            "the first argument is not null or a heap-allocated "
23126:                            "thing");
23126:             return JS_FALSE;
23126:         }
23126:     }
23126: 
23126:     traceKind = -1;
23126:     if (argc > 1) {
23126:         str = JS_ValueToString(cx, JS_ARGV(cx, vp)[1]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         bytes = JS_GetStringBytes(str);
23126:         if (!bytes)
23126:             return JS_FALSE;
23126:         for (i = 0; ;) {
23126:             if (strcmp(bytes, traceKindNames[i].name) == 0) {
23126:                 traceKind = traceKindNames[i].kind;
23126:                 break;
23126:             }
23126:             if (++i == JS_ARRAY_LENGTH(traceKindNames)) {
23126:                 JS_ReportError(cx, "trace kind name '%s' is unknown", bytes);
23126:                 return JS_FALSE;
23126:             }
23126:         }
23126:     }
23126: 
23126:     JS_TRACER_INIT(&countTracer.base, cx, CountHeapNotify);
23126:     if (!JS_DHashTableInit(&countTracer.visited, JS_DHashGetStubOps(),
23126:                            NULL, sizeof(JSDHashEntryStub),
23126:                            JS_DHASH_DEFAULT_CAPACITY(100))) {
23126:         JS_ReportOutOfMemory(cx);
23126:         return JS_FALSE;
23126:     }
23126:     countTracer.ok = JS_TRUE;
23126:     countTracer.traceList = NULL;
23126:     countTracer.recycleList = NULL;
23126: 
23126:     if (!startThing) {
23126:         JS_TraceRuntime(&countTracer.base);
23126:     } else {
23126:         JS_SET_TRACING_NAME(&countTracer.base, "root");
23126:         JS_CallTracer(&countTracer.base, startThing, startTraceKind);
23126:     }
23126: 
23126:     counter = 0;
23126:     while ((node = countTracer.traceList) != NULL) {
23126:         if (traceKind == -1 || node->kind == traceKind)
23126:             counter++;
23126:         countTracer.traceList = node->next;
23126:         node->next = countTracer.recycleList;
23126:         countTracer.recycleList = node;
23126:         JS_TraceChildren(&countTracer.base, node->thing, node->kind);
23126:     }
23126:     while ((node = countTracer.recycleList) != NULL) {
23126:         countTracer.recycleList = node->next;
23126:         JS_free(cx, node);
23126:     }
23126:     JS_DHashTableFinish(&countTracer.visited);
23126: 
23126:     return countTracer.ok && JS_NewNumberValue(cx, (jsdouble) counter, vp);
23126: }
23126: 
23126: static JSScript *
23126: ValueToScript(JSContext *cx, jsval v)
23126: {
27012:     JSScript *script = NULL;
23126:     JSFunction *fun;
23126: 
27012:     if (!JSVAL_IS_PRIMITIVE(v)) {
27012:         JSObject *obj = JSVAL_TO_OBJECT(v);
27012:         JSClass *clasp = JS_GET_CLASS(cx, obj);
27012: 
27012:         if (clasp == &js_ScriptClass) {
27012:             script = (JSScript *) JS_GetPrivate(cx, obj);
27012:         } else if (clasp == &js_GeneratorClass) {
27012:             JSGenerator *gen = (JSGenerator *) JS_GetPrivate(cx, obj);
27012:             fun = gen->frame.fun;
27012:             script = FUN_SCRIPT(fun);
27012:         }
27012:     }
27012: 
27012:     if (!script) {
23126:         fun = JS_ValueToFunction(cx, v);
23126:         if (!fun)
23126:             return NULL;
23126:         script = FUN_SCRIPT(fun);
23126:         if (!script) {
23126:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
23126:                                  JSSMSG_SCRIPTS_ONLY);
23126:         }
27012:     }
23126: 
23126:     return script;
23126: }
23126: 
23126: static JSBool
23126: GetTrapArgs(JSContext *cx, uintN argc, jsval *argv, JSScript **scriptp,
23126:             int32 *ip)
23126: {
23126:     jsval v;
23126:     uintN intarg;
23126:     JSScript *script;
23126: 
23126:     *scriptp = JS_GetScriptedCaller(cx, NULL)->script;
23126:     *ip = 0;
23126:     if (argc != 0) {
23126:         v = argv[0];
23126:         intarg = 0;
23126:         if (!JSVAL_IS_PRIMITIVE(v) &&
23126:             (JS_GET_CLASS(cx, JSVAL_TO_OBJECT(v)) == &js_FunctionClass ||
23126:              JS_GET_CLASS(cx, JSVAL_TO_OBJECT(v)) == &js_ScriptClass)) {
23126:             script = ValueToScript(cx, v);
23126:             if (!script)
23126:                 return JS_FALSE;
23126:             *scriptp = script;
23126:             intarg++;
23126:         }
23126:         if (argc > intarg) {
23126:             if (!JS_ValueToInt32(cx, argv[intarg], ip))
23126:                 return JS_FALSE;
23126:         }
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSTrapStatus
23126: TrapHandler(JSContext *cx, JSScript *script, jsbytecode *pc, jsval *rval,
23126:             void *closure)
23126: {
23126:     JSString *str;
23126:     JSStackFrame *caller;
23126: 
23126:     str = (JSString *) closure;
23126:     caller = JS_GetScriptedCaller(cx, NULL);
39916:     if (!JS_EvaluateUCInStackFrame(cx, caller,
39916:                                    JS_GetStringChars(str), JS_GetStringLength(str),
23126:                                    caller->script->filename, caller->script->lineno,
23126:                                    rval)) {
23126:         return JSTRAP_ERROR;
23126:     }
23126:     if (!JSVAL_IS_VOID(*rval))
23126:         return JSTRAP_RETURN;
23126:     return JSTRAP_CONTINUE;
23126: }
23126: 
23126: static JSBool
23126: Trap(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSString *str;
23126:     JSScript *script;
23126:     int32 i;
23126: 
23126:     if (argc == 0) {
23126:         JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL, JSSMSG_TRAP_USAGE);
23126:         return JS_FALSE;
23126:     }
23126:     argc--;
23126:     str = JS_ValueToString(cx, argv[argc]);
23126:     if (!str)
23126:         return JS_FALSE;
23126:     argv[argc] = STRING_TO_JSVAL(str);
23126:     if (!GetTrapArgs(cx, argc, argv, &script, &i))
23126:         return JS_FALSE;
23126:     return JS_SetTrap(cx, script, script->code + i, TrapHandler, str);
23126: }
23126: 
23126: static JSBool
23126: Untrap(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSScript *script;
23126:     int32 i;
23126: 
23126:     if (!GetTrapArgs(cx, argc, argv, &script, &i))
23126:         return JS_FALSE;
23126:     JS_ClearTrap(cx, script, script->code + i, NULL, NULL);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: LineToPC(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSScript *script;
23126:     int32 i;
23126:     uintN lineno;
23126:     jsbytecode *pc;
23126: 
23126:     if (argc == 0) {
23126:         JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL, JSSMSG_LINE2PC_USAGE);
23126:         return JS_FALSE;
23126:     }
23126:     script = JS_GetScriptedCaller(cx, NULL)->script;
23126:     if (!GetTrapArgs(cx, argc, argv, &script, &i))
23126:         return JS_FALSE;
23126:     lineno = (i == 0) ? script->lineno : (uintN)i;
23126:     pc = JS_LineNumberToPC(cx, script, lineno);
23126:     if (!pc)
23126:         return JS_FALSE;
25144:     *rval = INT_TO_JSVAL(pc - script->code);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: PCToLine(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSScript *script;
23126:     int32 i;
23126:     uintN lineno;
23126: 
23126:     if (!GetTrapArgs(cx, argc, argv, &script, &i))
23126:         return JS_FALSE;
23126:     lineno = JS_PCToLineNumber(cx, script, script->code + i);
23126:     if (!lineno)
23126:         return JS_FALSE;
23126:     *rval = INT_TO_JSVAL(lineno);
23126:     return JS_TRUE;
23126: }
23126: 
23126: #ifdef DEBUG
23126: 
23126: static void
25216: UpdateSwitchTableBounds(JSContext *cx, JSScript *script, uintN offset,
23126:                         uintN *start, uintN *end)
23126: {
23126:     jsbytecode *pc;
23126:     JSOp op;
23126:     ptrdiff_t jmplen;
23126:     jsint low, high, n;
23126: 
23126:     pc = script->code + offset;
25216:     op = js_GetOpcode(cx, script, pc);
23126:     switch (op) {
23126:       case JSOP_TABLESWITCHX:
23126:         jmplen = JUMPX_OFFSET_LEN;
23126:         goto jump_table;
23126:       case JSOP_TABLESWITCH:
23126:         jmplen = JUMP_OFFSET_LEN;
23126:       jump_table:
23126:         pc += jmplen;
23126:         low = GET_JUMP_OFFSET(pc);
23126:         pc += JUMP_OFFSET_LEN;
23126:         high = GET_JUMP_OFFSET(pc);
23126:         pc += JUMP_OFFSET_LEN;
23126:         n = high - low + 1;
23126:         break;
23126: 
23126:       case JSOP_LOOKUPSWITCHX:
23126:         jmplen = JUMPX_OFFSET_LEN;
23126:         goto lookup_table;
23126:       case JSOP_LOOKUPSWITCH:
23126:         jmplen = JUMP_OFFSET_LEN;
23126:       lookup_table:
23126:         pc += jmplen;
23126:         n = GET_INDEX(pc);
23126:         pc += INDEX_LEN;
23126:         jmplen += JUMP_OFFSET_LEN;
23126:         break;
23126: 
23126:       default:
23126:         /* [condswitch] switch does not have any jump or lookup tables. */
23126:         JS_ASSERT(op == JSOP_CONDSWITCH);
23126:         return;
23126:     }
23126: 
23126:     *start = (uintN)(pc - script->code);
23126:     *end = *start + (uintN)(n * jmplen);
23126: }
23126: 
23126: static void
23126: SrcNotes(JSContext *cx, JSScript *script)
23126: {
23126:     uintN offset, delta, caseOff, switchTableStart, switchTableEnd;
23126:     jssrcnote *notes, *sn;
23126:     JSSrcNoteType type;
23126:     const char *name;
23126:     uint32 index;
23126:     JSAtom *atom;
23126:     JSString *str;
23126: 
23126:     fprintf(gOutFile, "\nSource notes:\n");
23126:     offset = 0;
32723:     notes = script->notes();
23126:     switchTableEnd = switchTableStart = 0;
23126:     for (sn = notes; !SN_IS_TERMINATOR(sn); sn = SN_NEXT(sn)) {
23126:         delta = SN_DELTA(sn);
23126:         offset += delta;
23126:         type = (JSSrcNoteType) SN_TYPE(sn);
23126:         name = js_SrcNoteSpec[type].name;
23126:         if (type == SRC_LABEL) {
23126:             /* Check if the source note is for a switch case. */
23126:             if (switchTableStart <= offset && offset < switchTableEnd) {
23126:                 name = "case";
23126:             } else {
25216:                 JS_ASSERT(js_GetOpcode(cx, script, script->code + offset) == JSOP_NOP);
23126:             }
23126:         }
23126:         fprintf(gOutFile, "%3u: %5u [%4u] %-8s",
25144:                 (uintN) (sn - notes), offset, delta, name);
23126:         switch (type) {
23126:           case SRC_SETLINE:
23126:             fprintf(gOutFile, " lineno %u", (uintN) js_GetSrcNoteOffset(sn, 0));
23126:             break;
23126:           case SRC_FOR:
23126:             fprintf(gOutFile, " cond %u update %u tail %u",
23126:                    (uintN) js_GetSrcNoteOffset(sn, 0),
23126:                    (uintN) js_GetSrcNoteOffset(sn, 1),
23126:                    (uintN) js_GetSrcNoteOffset(sn, 2));
23126:             break;
23126:           case SRC_IF_ELSE:
23126:             fprintf(gOutFile, " else %u elseif %u",
23126:                    (uintN) js_GetSrcNoteOffset(sn, 0),
23126:                    (uintN) js_GetSrcNoteOffset(sn, 1));
23126:             break;
23126:           case SRC_COND:
23126:           case SRC_WHILE:
23126:           case SRC_PCBASE:
23126:           case SRC_PCDELTA:
23126:           case SRC_DECL:
23126:           case SRC_BRACE:
23126:             fprintf(gOutFile, " offset %u", (uintN) js_GetSrcNoteOffset(sn, 0));
23126:             break;
23126:           case SRC_LABEL:
23126:           case SRC_LABELBRACE:
23126:           case SRC_BREAK2LABEL:
23126:           case SRC_CONT2LABEL:
23126:             index = js_GetSrcNoteOffset(sn, 0);
32673:             JS_GET_SCRIPT_ATOM(script, NULL, index, atom);
23126:             JS_ASSERT(ATOM_IS_STRING(atom));
23126:             str = ATOM_TO_STRING(atom);
23126:             fprintf(gOutFile, " atom %u (", index);
23126:             js_FileEscapedString(gOutFile, str, 0);
23126:             putc(')', gOutFile);
23126:             break;
23126:           case SRC_FUNCDEF: {
23126:             const char *bytes;
23126:             JSObject *obj;
23126:             JSFunction *fun;
23126: 
23126:             index = js_GetSrcNoteOffset(sn, 0);
32723:             obj = script->getObject(index);
23126:             fun = (JSFunction *) JS_GetPrivate(cx, obj);
23126:             str = JS_DecompileFunction(cx, fun, JS_DONT_PRETTY_PRINT);
31366:             if (str) {
31366:               bytes = JS_GetStringBytes(str);
31366:             } else {
31366:               if (JS_IsExceptionPending(cx)) {
31366:                 if (!JS_ReportPendingException(cx))
31366:                   JS_ClearPendingException(cx);
31366:               }
31366:               bytes = "N/A";
31366:             }
23126:             fprintf(gOutFile, " function %u (%s)", index, bytes);
23126:             break;
23126:           }
23126:           case SRC_SWITCH:
23126:             fprintf(gOutFile, " length %u", (uintN) js_GetSrcNoteOffset(sn, 0));
23126:             caseOff = (uintN) js_GetSrcNoteOffset(sn, 1);
23126:             if (caseOff)
23126:                 fprintf(gOutFile, " first case offset %u", caseOff);
25216:             UpdateSwitchTableBounds(cx, script, offset,
23126:                                     &switchTableStart, &switchTableEnd);
23126:             break;
23126:           case SRC_CATCH:
23126:             delta = (uintN) js_GetSrcNoteOffset(sn, 0);
23126:             if (delta) {
23126:                 if (script->main[offset] == JSOP_LEAVEBLOCK)
23126:                     fprintf(gOutFile, " stack depth %u", delta);
23126:                 else
23126:                     fprintf(gOutFile, " guard delta %u", delta);
23126:             }
23126:             break;
23126:           default:;
23126:         }
23126:         fputc('\n', gOutFile);
23126:     }
23126: }
23126: 
23126: static JSBool
23126: Notes(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     uintN i;
23126:     JSScript *script;
23126: 
23126:     for (i = 0; i < argc; i++) {
23126:         script = ValueToScript(cx, argv[i]);
23126:         if (!script)
23126:             continue;
23126: 
23126:         SrcNotes(cx, script);
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: JS_STATIC_ASSERT(JSTRY_CATCH == 0);
23126: JS_STATIC_ASSERT(JSTRY_FINALLY == 1);
23126: JS_STATIC_ASSERT(JSTRY_ITER == 2);
23126: 
23126: static const char* const TryNoteNames[] = { "catch", "finally", "iter" };
23126: 
23126: static JSBool
23126: TryNotes(JSContext *cx, JSScript *script)
23126: {
23126:     JSTryNote *tn, *tnlimit;
23126: 
23126:     if (script->trynotesOffset == 0)
23126:         return JS_TRUE;
23126: 
32723:     tn = script->trynotes()->vector;
32723:     tnlimit = tn + script->trynotes()->length;
23126:     fprintf(gOutFile, "\nException table:\n"
23126:             "kind      stack    start      end\n");
23126:     do {
23126:         JS_ASSERT(tn->kind < JS_ARRAY_LENGTH(TryNoteNames));
23126:         fprintf(gOutFile, " %-7s %6u %8u %8u\n",
23126:                 TryNoteNames[tn->kind], tn->stackDepth,
23126:                 tn->start, tn->start + tn->length);
23126:     } while (++tn != tnlimit);
23126:     return JS_TRUE;
23126: }
23126: 
28924: static bool
28924: DisassembleValue(JSContext *cx, jsval v, bool lines, bool recursive)
23126: {
28924:     JSScript *script = ValueToScript(cx, v);
23126:     if (!script)
28924:         return false;
28924:     if (VALUE_IS_FUNCTION(cx, v)) {
28924:         JSFunction *fun = JS_ValueToFunction(cx, v);
27012:         if (fun && (fun->flags & ~7U)) {
23126:             uint16 flags = fun->flags;
23126:             fputs("flags:", stdout);
23126: 
23126: #define SHOW_FLAG(flag) if (flags & JSFUN_##flag) fputs(" " #flag, stdout);
23126: 
23126:             SHOW_FLAG(LAMBDA);
23126:             SHOW_FLAG(SETTER);
23126:             SHOW_FLAG(GETTER);
23126:             SHOW_FLAG(BOUND_METHOD);
23126:             SHOW_FLAG(HEAVYWEIGHT);
23126:             SHOW_FLAG(THISP_STRING);
23126:             SHOW_FLAG(THISP_NUMBER);
23126:             SHOW_FLAG(THISP_BOOLEAN);
23126:             SHOW_FLAG(EXPR_CLOSURE);
32669:             SHOW_FLAG(TRCINFO);
23126: 
23126: #undef SHOW_FLAG
27012: 
37014:             if (FUN_INTERPRETED(fun)) {
27012:                 if (FUN_NULL_CLOSURE(fun))
27012:                     fputs(" NULL_CLOSURE", stdout);
27012:                 else if (FUN_FLAT_CLOSURE(fun))
27012:                     fputs(" FLAT_CLOSURE", stdout);
37014: 
37014:                 if (fun->u.i.nupvars) {
37014:                     fputs("\nupvars: {\n", stdout);
37014: 
37014:                     void *mark = JS_ARENA_MARK(&cx->tempPool);
37014:                     jsuword *localNames = js_GetLocalNameArray(cx, fun, &cx->tempPool);
37014:                     if (!localNames)
37014:                         return false;
37014: 
37014:                     JSUpvarArray *uva = fun->u.i.script->upvars();
37014:                     uintN upvar_base = fun->countArgsAndVars();
37014: 
37014:                     for (uint32 i = 0, n = uva->length; i < n; i++) {
37014:                         JSAtom *atom = JS_LOCAL_NAME_TO_ATOM(localNames[upvar_base + i]);
37014:                         uint32 cookie = uva->vector[i];
37014: 
37014:                         printf("  %s: {skip:%u, slot:%u},\n",
37014:                                js_AtomToPrintableString(cx, atom),
37014:                                UPVAR_FRAME_SKIP(cookie),
37014:                                UPVAR_FRAME_SLOT(cookie));
37014:                     }
37014: 
37014:                     JS_ARENA_RELEASE(&cx->tempPool, mark);
37014:                     putchar('}');
37014:                 }
37014:             }
23126:             putchar('\n');
23126:         }
23126:     }
23126: 
23126:     if (!js_Disassemble(cx, script, lines, stdout))
28924:         return false;
23126:     SrcNotes(cx, script);
23126:     TryNotes(cx, script);
28924: 
28924:     if (recursive && script->objectsOffset != 0) {
32723:         JSObjectArray *objects = script->objects();
28924:         for (uintN i = 0; i != objects->length; ++i) {
28924:             JSObject *obj = objects->vector[i];
28924:             if (HAS_FUNCTION_CLASS(obj)) {
28924:                 putchar('\n');
28924:                 if (!DisassembleValue(cx, OBJECT_TO_JSVAL(obj),
28924:                                       lines, recursive)) {
28924:                     return false;
28924:                 }
28924:             }
28924:         }
28924:     }
28924:     return true;
28924: }
28924: 
28924: static JSBool
28924: Disassemble(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
28924: {
28924:     bool lines = false, recursive = false;
28924: 
28924:     while (argc > 0 && JSVAL_IS_STRING(argv[0])) {
28924:         const char *bytes = JS_GetStringBytes(JSVAL_TO_STRING(argv[0]));
28924:         lines = !strcmp(bytes, "-l");
28924:         recursive = !strcmp(bytes, "-r");
28924:         if (!lines && !recursive)
28924:             break;
28924:         argv++, argc--;
28924:     }
28924: 
28924:     for (uintN i = 0; i < argc; i++) {
28924:         if (!DisassembleValue(cx, argv[i], lines, recursive))
28924:             return false;
28924:     }
28924:     return true;
23126: }
23126: 
23126: static JSBool
23126: DisassFile(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSString *str;
23126:     const char *filename;
23126:     JSScript *script;
23126:     JSBool ok;
23126:     uint32 oldopts;
23126: 
23126:     if (!argc)
23126:         return JS_TRUE;
23126: 
23126:     str = JS_ValueToString(cx, argv[0]);
23126:     if (!str)
23126:         return JS_FALSE;
23126:     argv[0] = STRING_TO_JSVAL(str);
23126: 
23126:     filename = JS_GetStringBytes(str);
23126:     oldopts = JS_GetOptions(cx);
23126:     JS_SetOptions(cx, oldopts | JSOPTION_COMPILE_N_GO | JSOPTION_NO_SCRIPT_RVAL);
23126:     script = JS_CompileFile(cx, obj, filename);
23126:     JS_SetOptions(cx, oldopts);
23126:     if (!script)
23126:         return JS_FALSE;
23126: 
23126:     obj = JS_NewScriptObject(cx, script);
23126:     if (!obj)
23126:         return JS_FALSE;
23126: 
23126:     *rval = OBJECT_TO_JSVAL(obj); /* I like to root it, root it. */
23126:     ok = Disassemble(cx, obj, 1, rval, rval); /* gross, but works! */
23126:     *rval = JSVAL_VOID;
23126: 
23126:     return ok;
23126: }
23126: 
23126: static JSBool
23126: DisassWithSrc(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
23126:               jsval *rval)
23126: {
23126: #define LINE_BUF_LEN 512
23126:     uintN i, len, line1, line2, bupline;
23126:     JSScript *script;
23126:     FILE *file;
23126:     char linebuf[LINE_BUF_LEN];
23126:     jsbytecode *pc, *end;
23126:     JSBool ok;
23126:     static char sep[] = ";-------------------------";
23126: 
23126:     ok = JS_TRUE;
23126:     for (i = 0; ok && i < argc; i++) {
23126:         script = ValueToScript(cx, argv[i]);
23126:         if (!script)
23126:            return JS_FALSE;
23126: 
23126:         if (!script->filename) {
23126:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
23126:                                  JSSMSG_FILE_SCRIPTS_ONLY);
23126:             return JS_FALSE;
23126:         }
23126: 
23126:         file = fopen(script->filename, "r");
23126:         if (!file) {
23126:             JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
23126:                                  JSSMSG_CANT_OPEN, script->filename,
23126:                                  strerror(errno));
23126:             return JS_FALSE;
23126:         }
23126: 
23126:         pc = script->code;
23126:         end = pc + script->length;
23126: 
23126:         /* burn the leading lines */
23126:         line2 = JS_PCToLineNumber(cx, script, pc);
23126:         for (line1 = 0; line1 < line2 - 1; line1++)
40270:             (void) fgets(linebuf, LINE_BUF_LEN, file); /* Intentionally unused result. */
23126: 
23126:         bupline = 0;
23126:         while (pc < end) {
23126:             line2 = JS_PCToLineNumber(cx, script, pc);
23126: 
23126:             if (line2 < line1) {
23126:                 if (bupline != line2) {
23126:                     bupline = line2;
23126:                     fprintf(gOutFile, "%s %3u: BACKUP\n", sep, line2);
23126:                 }
23126:             } else {
23126:                 if (bupline && line1 == line2)
23126:                     fprintf(gOutFile, "%s %3u: RESTORE\n", sep, line2);
23126:                 bupline = 0;
23126:                 while (line1 < line2) {
23126:                     if (!fgets(linebuf, LINE_BUF_LEN, file)) {
23126:                         JS_ReportErrorNumber(cx, my_GetErrorMessage, NULL,
23126:                                              JSSMSG_UNEXPECTED_EOF,
23126:                                              script->filename);
23126:                         ok = JS_FALSE;
23126:                         goto bail;
23126:                     }
23126:                     line1++;
23126:                     fprintf(gOutFile, "%s %3u: %s", sep, line1, linebuf);
23126:                 }
23126:             }
23126: 
23126:             len = js_Disassemble1(cx, script, pc,
25144:                                   pc - script->code,
23126:                                   JS_TRUE, stdout);
23126:             if (!len) {
23126:                 ok = JS_FALSE;
23126:                 goto bail;
23126:             }
23126:             pc += len;
23126:         }
23126: 
23126:       bail:
23126:         fclose(file);
23126:     }
23126:     return ok;
23126: #undef LINE_BUF_LEN
23126: }
23126: 
23126: static JSBool
23126: Tracing(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
26954:     FILE *file;
26954: 
23126:     if (argc == 0) {
23126:         *rval = BOOLEAN_TO_JSVAL(cx->tracefp != 0);
23126:         return JS_TRUE;
23126:     }
23126: 
23126:     switch (JS_TypeOfValue(cx, argv[0])) {
23126:       case JSTYPE_NUMBER:
26954:       case JSTYPE_BOOLEAN: {
26954:         JSBool bval;
30581:         JS_ValueToBoolean(cx, argv[0], &bval);
26954:         file = bval ? stderr : NULL;
23126:         break;
26954:       }
26954:       case JSTYPE_STRING: {
26954:         char *name = JS_GetStringBytes(JSVAL_TO_STRING(argv[0]));
26954:         file = fopen(name, "w");
26954:         if (!file) {
26954:             JS_ReportError(cx, "tracing: couldn't open output file %s: %s", 
26954:                            name, strerror(errno));
26954:             return JS_FALSE;
26954:         }
23126:         break;
26954:       }
23126:       default:
26954:           goto bad_argument;
26954:     }
26954:     if (cx->tracefp && cx->tracefp != stderr)
26954:       fclose((FILE *)cx->tracefp);
26954:     cx->tracefp = file;
27233:     cx->tracePrevPc = NULL;
26954:     return JS_TRUE;
26954: 
26954:  bad_argument:
26954:     JSString *str = JS_ValueToString(cx, argv[0]);
23126:     if (!str)
23126:         return JS_FALSE;
23126:     JS_ReportError(cx, "tracing: illegal argument %s",
23126:                    JS_GetStringBytes(str));
23126:     return JS_FALSE;
23126: }
23126: 
23126: static void
23126: DumpScope(JSContext *cx, JSObject *obj, FILE *fp)
23126: {
38562:     uintN i = 0;
38562:     for (JSScopeProperty *sprop = NULL; JS_PropertyIterator(obj, &sprop);) {
38562:         fprintf(fp, "%3u %p ", i++, (void *) sprop);
38562:         sprop->dump(cx, fp);
23126:     }
23126: }
23126: 
23126: static JSBool
23126: DumpStats(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     uintN i;
23126:     JSString *str;
23126:     const char *bytes;
23126:     jsid id;
23126:     JSObject *obj2;
23126:     JSProperty *prop;
23126:     jsval value;
23126: 
23126:     for (i = 0; i < argc; i++) {
23126:         str = JS_ValueToString(cx, argv[i]);
23126:         if (!str)
23126:             return JS_FALSE;
23126:         argv[i] = STRING_TO_JSVAL(str);
23126:         bytes = JS_GetStringBytes(str);
23126:         if (strcmp(bytes, "arena") == 0) {
23126: #ifdef JS_ARENAMETER
23126:             JS_DumpArenaStats(stdout);
23126: #endif
23126:         } else if (strcmp(bytes, "atom") == 0) {
23126:             js_DumpAtoms(cx, gOutFile);
23126:         } else if (strcmp(bytes, "global") == 0) {
23126:             DumpScope(cx, cx->globalObject, stdout);
23126:         } else {
23126:             if (!JS_ValueToId(cx, STRING_TO_JSVAL(str), &id))
23126:                 return JS_FALSE;
23126:             if (!js_FindProperty(cx, id, &obj, &obj2, &prop))
23126:                 return JS_FALSE;
23126:             if (prop) {
31501:                 obj2->dropProperty(cx, prop);
31501:                 if (!obj->getProperty(cx, id, &value))
23126:                     return JS_FALSE;
23126:             }
23126:             if (!prop || !JSVAL_IS_OBJECT(value)) {
23126:                 fprintf(gErrFile, "js: invalid stats argument %s\n",
23126:                         bytes);
23126:                 continue;
23126:             }
23126:             obj = JSVAL_TO_OBJECT(value);
23126:             if (obj)
23126:                 DumpScope(cx, obj, stdout);
23126:         }
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: DumpHeap(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     char *fileName;
23126:     jsval v;
23126:     void* startThing;
23126:     uint32 startTraceKind;
23126:     const char *badTraceArg;
23126:     void *thingToFind;
23126:     size_t maxDepth;
23126:     void *thingToIgnore;
23126:     FILE *dumpFile;
23126:     JSBool ok;
23126: 
23126:     fileName = NULL;
23126:     if (argc > 0) {
23126:         v = JS_ARGV(cx, vp)[0];
23126:         if (v != JSVAL_NULL) {
23126:             JSString *str;
23126: 
23126:             str = JS_ValueToString(cx, v);
23126:             if (!str)
23126:                 return JS_FALSE;
23126:             JS_ARGV(cx, vp)[0] = STRING_TO_JSVAL(str);
23126:             fileName = JS_GetStringBytes(str);
23126:         }
23126:     }
23126: 
23126:     startThing = NULL;
23126:     startTraceKind = 0;
23126:     if (argc > 1) {
23126:         v = JS_ARGV(cx, vp)[1];
23126:         if (JSVAL_IS_TRACEABLE(v)) {
23126:             startThing = JSVAL_TO_TRACEABLE(v);
23126:             startTraceKind = JSVAL_TRACE_KIND(v);
23126:         } else if (v != JSVAL_NULL) {
23126:             badTraceArg = "start";
23126:             goto not_traceable_arg;
23126:         }
23126:     }
23126: 
23126:     thingToFind = NULL;
23126:     if (argc > 2) {
23126:         v = JS_ARGV(cx, vp)[2];
23126:         if (JSVAL_IS_TRACEABLE(v)) {
23126:             thingToFind = JSVAL_TO_TRACEABLE(v);
23126:         } else if (v != JSVAL_NULL) {
23126:             badTraceArg = "toFind";
23126:             goto not_traceable_arg;
23126:         }
23126:     }
23126: 
23126:     maxDepth = (size_t)-1;
23126:     if (argc > 3) {
23126:         v = JS_ARGV(cx, vp)[3];
23126:         if (v != JSVAL_NULL) {
23126:             uint32 depth;
23126: 
23126:             if (!JS_ValueToECMAUint32(cx, v, &depth))
23126:                 return JS_FALSE;
23126:             maxDepth = depth;
23126:         }
23126:     }
23126: 
23126:     thingToIgnore = NULL;
23126:     if (argc > 4) {
23126:         v = JS_ARGV(cx, vp)[4];
23126:         if (JSVAL_IS_TRACEABLE(v)) {
23126:             thingToIgnore = JSVAL_TO_TRACEABLE(v);
23126:         } else if (v != JSVAL_NULL) {
23126:             badTraceArg = "toIgnore";
23126:             goto not_traceable_arg;
23126:         }
23126:     }
23126: 
23126:     if (!fileName) {
23126:         dumpFile = stdout;
23126:     } else {
23126:         dumpFile = fopen(fileName, "w");
23126:         if (!dumpFile) {
23126:             JS_ReportError(cx, "can't open %s: %s", fileName, strerror(errno));
23126:             return JS_FALSE;
23126:         }
23126:     }
23126: 
23126:     ok = JS_DumpHeap(cx, dumpFile, startThing, startTraceKind, thingToFind,
23126:                      maxDepth, thingToIgnore);
23126:     if (dumpFile != stdout)
23126:         fclose(dumpFile);
23126:     return ok;
23126: 
23126:   not_traceable_arg:
23126:     JS_ReportError(cx, "argument '%s' is not null or a heap-allocated thing",
23126:                    badTraceArg);
23126:     return JS_FALSE;
23126: }
23126: 
23126: #endif /* DEBUG */
23126: 
23126: #ifdef TEST_CVTARGS
23126: #include <ctype.h>
23126: 
23126: static const char *
23126: EscapeWideString(jschar *w)
23126: {
23126:     static char enuf[80];
23126:     static char hex[] = "0123456789abcdef";
23126:     jschar u;
23126:     unsigned char b, c;
23126:     int i, j;
23126: 
23126:     if (!w)
23126:         return "";
23126:     for (i = j = 0; i < sizeof enuf - 1; i++, j++) {
23126:         u = w[j];
23126:         if (u == 0)
23126:             break;
23126:         b = (unsigned char)(u >> 8);
23126:         c = (unsigned char)(u);
23126:         if (b) {
23126:             if (i >= sizeof enuf - 6)
23126:                 break;
23126:             enuf[i++] = '\\';
23126:             enuf[i++] = 'u';
23126:             enuf[i++] = hex[b >> 4];
23126:             enuf[i++] = hex[b & 15];
23126:             enuf[i++] = hex[c >> 4];
23126:             enuf[i] = hex[c & 15];
23126:         } else if (!isprint(c)) {
23126:             if (i >= sizeof enuf - 4)
23126:                 break;
23126:             enuf[i++] = '\\';
23126:             enuf[i++] = 'x';
23126:             enuf[i++] = hex[c >> 4];
23126:             enuf[i] = hex[c & 15];
23126:         } else {
23126:             enuf[i] = (char)c;
23126:         }
23126:     }
23126:     enuf[i] = 0;
23126:     return enuf;
23126: }
23126: 
23126: #include <stdarg.h>
23126: 
23126: static JSBool
23126: ZZ_formatter(JSContext *cx, const char *format, JSBool fromJS, jsval **vpp,
23126:              va_list *app)
23126: {
23126:     jsval *vp;
23126:     va_list ap;
23126:     jsdouble re, im;
23126: 
23126:     printf("entering ZZ_formatter");
23126:     vp = *vpp;
23126:     ap = *app;
23126:     if (fromJS) {
23126:         if (!JS_ValueToNumber(cx, vp[0], &re))
23126:             return JS_FALSE;
23126:         if (!JS_ValueToNumber(cx, vp[1], &im))
23126:             return JS_FALSE;
23126:         *va_arg(ap, jsdouble *) = re;
23126:         *va_arg(ap, jsdouble *) = im;
23126:     } else {
23126:         re = va_arg(ap, jsdouble);
23126:         im = va_arg(ap, jsdouble);
23126:         if (!JS_NewNumberValue(cx, re, &vp[0]))
23126:             return JS_FALSE;
23126:         if (!JS_NewNumberValue(cx, im, &vp[1]))
23126:             return JS_FALSE;
23126:     }
23126:     *vpp = vp + 2;
23126:     *app = ap;
23126:     printf("leaving ZZ_formatter");
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: ConvertArgs(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSBool b = JS_FALSE;
23126:     jschar c = 0;
23126:     int32 i = 0, j = 0;
23126:     uint32 u = 0;
23126:     jsdouble d = 0, I = 0, re = 0, im = 0;
23126:     char *s = NULL;
23126:     JSString *str = NULL;
23126:     jschar *w = NULL;
23126:     JSObject *obj2 = NULL;
23126:     JSFunction *fun = NULL;
23126:     jsval v = JSVAL_VOID;
23126:     JSBool ok;
23126: 
23126:     if (!JS_AddArgumentFormatter(cx, "ZZ", ZZ_formatter))
31366:         return JS_FALSE;
23126:     ok = JS_ConvertArguments(cx, argc, argv, "b/ciujdIsSWofvZZ*",
23126:                              &b, &c, &i, &u, &j, &d, &I, &s, &str, &w, &obj2,
23126:                              &fun, &v, &re, &im);
23126:     JS_RemoveArgumentFormatter(cx, "ZZ");
23126:     if (!ok)
23126:         return JS_FALSE;
23126:     fprintf(gOutFile,
23126:             "b %u, c %x (%c), i %ld, u %lu, j %ld\n",
23126:             b, c, (char)c, i, u, j);
31366:     ToString obj2string(cx, obj2);
31366:     ToString valueString(cx, v);
31366:     JSString *tmpstr = JS_DecompileFunction(cx, fun, 4);
31366:     const char *func;
31366:     if (tmpstr) {
31366:         func = JS_GetStringBytes(tmpstr);
31366:     } else {
31366:         if (JS_IsExceptionPending(cx)) {
31366:             if (!JS_ReportPendingException(cx))
31366:                 JS_ClearPendingException(cx);
31366:         }
31366:         func = "error decompiling fun";
31366:     }
23126:     fprintf(gOutFile,
23126:             "d %g, I %g, s %s, S %s, W %s, obj %s, fun %s\n"
23126:             "v %s, re %g, im %g\n",
23126:             d, I, s, str ? JS_GetStringBytes(str) : "", EscapeWideString(w),
31366:             obj2string.getBytes(),
31366:             fun ? func : "",
31366:             valueString.getBytes(), re, im);
23126:     return JS_TRUE;
23126: }
23126: #endif
23126: 
23126: static JSBool
23126: BuildDate(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     char version[20] = "\n";
23126: #if JS_VERSION < 150
23126:     sprintf(version, " for version %d\n", JS_VERSION);
23126: #endif
23126:     fprintf(gOutFile, "built on %s at %s%s", __DATE__, __TIME__, version);
23126:     *vp = JSVAL_VOID;
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Clear(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     if (argc != 0 && !JS_ValueToObject(cx, argv[0], &obj))
23126:         return JS_FALSE;
23126:     JS_ClearScope(cx, obj);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Intern(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     JSString *str;
23126: 
23126:     str = JS_ValueToString(cx, argc == 0 ? JSVAL_VOID : vp[2]);
23126:     if (!str)
23126:         return JS_FALSE;
23126:     if (!JS_InternUCStringN(cx, JS_GetStringChars(str),
23126:                                 JS_GetStringLength(str))) {
23126:         return JS_FALSE;
23126:     }
23126:     *vp = JSVAL_VOID;
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Clone(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSObject *funobj, *parent, *clone;
23126: 
27012:     if (VALUE_IS_FUNCTION(cx, argv[0])) {
27012:         funobj = JSVAL_TO_OBJECT(argv[0]);
27012:     } else {
27012:         JSFunction *fun = JS_ValueToFunction(cx, argv[0]);
23126:         if (!fun)
23126:             return JS_FALSE;
23126:         funobj = JS_GetFunctionObject(fun);
27012:     }
23126:     if (argc > 1) {
23126:         if (!JS_ValueToObject(cx, argv[1], &parent))
23126:             return JS_FALSE;
23126:     } else {
23126:         parent = JS_GetParent(cx, funobj);
23126:     }
23126:     clone = JS_CloneFunctionObject(cx, funobj, parent);
23126:     if (!clone)
23126:         return JS_FALSE;
23126:     *rval = OBJECT_TO_JSVAL(clone);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: Seal(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSObject *target;
23126:     JSBool deep = JS_FALSE;
23126: 
23126:     if (!JS_ConvertArguments(cx, argc, argv, "o/b", &target, &deep))
23126:         return JS_FALSE;
23126:     if (!target)
23126:         return JS_TRUE;
23126:     return JS_SealObject(cx, target, deep);
23126: }
23126: 
23126: static JSBool
23126: GetPDA(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     JSObject *vobj, *aobj, *pdobj;
23126:     JSBool ok;
23126:     JSPropertyDescArray pda;
23126:     JSPropertyDesc *pd;
23126:     uint32 i;
23126:     jsval v;
23126: 
23126:     if (!JS_ValueToObject(cx, argc == 0 ? JSVAL_VOID : vp[2], &vobj))
23126:         return JS_FALSE;
24303:     if (!vobj) {
24303:         *vp = JSVAL_VOID;
23126:         return JS_TRUE;
24303:     }
23126: 
23126:     aobj = JS_NewArrayObject(cx, 0, NULL);
23126:     if (!aobj)
23126:         return JS_FALSE;
23126:     *vp = OBJECT_TO_JSVAL(aobj);
23126: 
23126:     ok = JS_GetPropertyDescArray(cx, vobj, &pda);
23126:     if (!ok)
23126:         return JS_FALSE;
23126:     pd = pda.array;
24303:     for (i = 0; i < pda.length; i++, pd++) {
23126:         pdobj = JS_NewObject(cx, NULL, NULL, NULL);
23126:         if (!pdobj) {
23126:             ok = JS_FALSE;
23126:             break;
23126:         }
23126: 
23126:         /* Protect pdobj from GC by setting it as an element of aobj now */
23126:         v = OBJECT_TO_JSVAL(pdobj);
23126:         ok = JS_SetElement(cx, aobj, i, &v);
23126:         if (!ok)
23126:             break;
23126: 
23126:         ok = JS_SetProperty(cx, pdobj, "id", &pd->id) &&
23126:              JS_SetProperty(cx, pdobj, "value", &pd->value) &&
23126:              (v = INT_TO_JSVAL(pd->flags),
23126:               JS_SetProperty(cx, pdobj, "flags", &v)) &&
23126:              (v = INT_TO_JSVAL(pd->slot),
23126:               JS_SetProperty(cx, pdobj, "slot", &v)) &&
23126:              JS_SetProperty(cx, pdobj, "alias", &pd->alias);
23126:         if (!ok)
23126:             break;
23126:     }
23126:     JS_PutPropertyDescArray(cx, &pda);
23126:     return ok;
23126: }
23126: 
23126: static JSBool
23126: GetSLX(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     JSScript *script;
23126: 
23126:     script = ValueToScript(cx, argc == 0 ? JSVAL_VOID : vp[2]);
23126:     if (!script)
23126:         return JS_FALSE;
23126:     *vp = INT_TO_JSVAL(js_GetScriptLineExtent(script));
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: ToInt32(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     int32 i;
23126: 
23126:     if (!JS_ValueToInt32(cx, argc == 0 ? JSVAL_VOID : vp[2], &i))
23126:         return JS_FALSE;
23126:     return JS_NewNumberValue(cx, i, vp);
23126: }
23126: 
23126: static JSBool
23126: StringsAreUTF8(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
23126:                jsval *rval)
23126: {
23126:     *rval = JS_CStringsAreUTF8() ? JSVAL_TRUE : JSVAL_FALSE;
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: StackQuota(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     uint32 n;
23126: 
23126:     if (argc == 0)
23126:         return JS_NewNumberValue(cx, (double) gScriptStackQuota, vp);
23126:     if (!JS_ValueToECMAUint32(cx, JS_ARGV(cx, vp)[0], &n))
23126:         return JS_FALSE;
23126:     gScriptStackQuota = n;
23126:     JS_SetScriptStackQuota(cx, gScriptStackQuota);
23126:     JS_SET_RVAL(cx, vp, JSVAL_VOID);
23126:     return JS_TRUE;
23126: }
23126: 
23126: static const char* badUTF8 = "...\xC0...";
23126: static const char* bigUTF8 = "...\xFB\xBF\xBF\xBF\xBF...";
23126: static const jschar badSurrogate[] = { 'A', 'B', 'C', 0xDEEE, 'D', 'E', 0 };
23126: 
23126: static JSBool
23126: TestUTF8(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     int32 mode = 1;
23126:     jschar chars[20];
23126:     size_t charsLength = 5;
23126:     char bytes[20];
23126:     size_t bytesLength = 20;
23126:     if (argc && !JS_ValueToInt32(cx, *argv, &mode))
23126:         return JS_FALSE;
23126: 
23126:     /* The following throw errors if compiled with UTF-8. */
23126:     switch (mode) {
23126:       /* mode 1: malformed UTF-8 string. */
23126:       case 1:
23126:         JS_NewStringCopyZ(cx, badUTF8);
23126:         break;
23126:       /* mode 2: big UTF-8 character. */
23126:       case 2:
23126:         JS_NewStringCopyZ(cx, bigUTF8);
23126:         break;
23126:       /* mode 3: bad surrogate character. */
23126:       case 3:
23126:         JS_EncodeCharacters(cx, badSurrogate, 6, bytes, &bytesLength);
23126:         break;
23126:       /* mode 4: use a too small buffer. */
23126:       case 4:
23126:         JS_DecodeBytes(cx, "1234567890", 10, chars, &charsLength);
23126:         break;
23126:       default:
23126:         JS_ReportError(cx, "invalid mode parameter");
23126:         return JS_FALSE;
23126:     }
23126:     return !JS_IsExceptionPending (cx);
23126: }
23126: 
23126: static JSBool
23126: ThrowError(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JS_ReportError(cx, "This is an error");
23126:     return JS_FALSE;
23126: }
23126: 
23126: #define LAZY_STANDARD_CLASSES
23126: 
23126: /* A class for easily testing the inner/outer object callbacks. */
23126: typedef struct ComplexObject {
23126:     JSBool isInner;
23126:     JSBool frozen;
23126:     JSObject *inner;
23126:     JSObject *outer;
23126: } ComplexObject;
23126: 
23126: static JSObject *
23126: split_create_outer(JSContext *cx);
23126: 
23126: static JSObject *
23126: split_create_inner(JSContext *cx, JSObject *outer);
23126: 
23126: static ComplexObject *
23126: split_get_private(JSContext *cx, JSObject *obj);
23126: 
23126: static JSBool
23126: split_addProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
23126:     ComplexObject *cpx;
23126:     jsid asId;
23126: 
23126:     cpx = split_get_private(cx, obj);
23126:     if (!cpx)
23126:         return JS_TRUE;
23126:     if (!cpx->isInner && cpx->inner) {
23126:         /* Make sure to define this property on the inner object. */
39906:         if (!JS_ValueToId(cx, id, &asId))
23126:             return JS_FALSE;
32573:         return JS_DefinePropertyById(cx, cpx->inner, asId, *vp, NULL, NULL, JSPROP_ENUMERATE);
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: split_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
23126:     ComplexObject *cpx;
23126: 
23126:     cpx = split_get_private(cx, obj);
23126:     if (!cpx)
23126:         return JS_TRUE;
32785: 
32785:     if (JSVAL_IS_STRING(id) &&
32785:         !strcmp(JS_GetStringBytes(JSVAL_TO_STRING(id)), "isInner")) {
32785:         *vp = BOOLEAN_TO_JSVAL(cpx->isInner);
32785:         return JS_TRUE;
32785:     }
32785: 
23126:     if (!cpx->isInner && cpx->inner) {
23126:         if (JSVAL_IS_STRING(id)) {
23126:             JSString *str;
23126: 
23126:             str = JSVAL_TO_STRING(id);
23126:             return JS_GetUCProperty(cx, cpx->inner, JS_GetStringChars(str),
23126:                                     JS_GetStringLength(str), vp);
23126:         }
23126:         if (JSVAL_IS_INT(id))
23126:             return JS_GetElement(cx, cpx->inner, JSVAL_TO_INT(id), vp);
23126:         return JS_TRUE;
23126:     }
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: split_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
23126:     ComplexObject *cpx;
23126: 
23126:     cpx = split_get_private(cx, obj);
23126:     if (!cpx)
23126:         return JS_TRUE;
23126:     if (!cpx->isInner && cpx->inner) {
23126:         if (JSVAL_IS_STRING(id)) {
23126:             JSString *str;
23126: 
23126:             str = JSVAL_TO_STRING(id);
23126:             return JS_SetUCProperty(cx, cpx->inner, JS_GetStringChars(str),
23126:                                     JS_GetStringLength(str), vp);
23126:         }
23126:         if (JSVAL_IS_INT(id))
23126:             return JS_SetElement(cx, cpx->inner, JSVAL_TO_INT(id), vp);
23126:         return JS_TRUE;
23126:     }
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: split_delProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
23126:     ComplexObject *cpx;
23126:     jsid asId;
23126: 
23126:     cpx = split_get_private(cx, obj);
23126:     if (!cpx)
23126:         return JS_TRUE;
23126:     if (!cpx->isInner && cpx->inner) {
23126:         /* Make sure to define this property on the inner object. */
23126:         if (!JS_ValueToId(cx, *vp, &asId))
23126:             return JS_FALSE;
31501:         return cpx->inner->deleteProperty(cx, asId, vp);
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: split_enumerate(JSContext *cx, JSObject *obj, JSIterateOp enum_op,
23126:                   jsval *statep, jsid *idp)
23126: {
23126:     ComplexObject *cpx;
23126:     JSObject *iterator;
23126: 
23126:     switch (enum_op) {
23126:       case JSENUMERATE_INIT:
23126:         cpx = (ComplexObject *) JS_GetPrivate(cx, obj);
23126: 
23126:         if (!cpx->isInner && cpx->inner)
23126:             obj = cpx->inner;
23126: 
23126:         iterator = JS_NewPropertyIterator(cx, obj);
23126:         if (!iterator)
23126:             return JS_FALSE;
23126: 
23126:         *statep = OBJECT_TO_JSVAL(iterator);
23126:         if (idp)
23126:             *idp = JSVAL_ZERO;
23126:         break;
23126: 
23126:       case JSENUMERATE_NEXT:
23126:         iterator = (JSObject*)JSVAL_TO_OBJECT(*statep);
23126:         if (!JS_NextProperty(cx, iterator, idp))
23126:             return JS_FALSE;
23126: 
23126:         if (!JSVAL_IS_VOID(*idp))
23126:             break;
23126:         /* Fall through. */
23126: 
23126:       case JSENUMERATE_DESTROY:
23126:         /* Let GC at our iterator object. */
23126:         *statep = JSVAL_NULL;
23126:         break;
23126:     }
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
35108: split_resolve(JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp)
23126: {
23126:     ComplexObject *cpx;
23126: 
32785:     if (JSVAL_IS_STRING(id) &&
32785:         !strcmp(JS_GetStringBytes(JSVAL_TO_STRING(id)), "isInner")) {
32785:         *objp = obj;
32785:         return JS_DefineProperty(cx, obj, "isInner", JSVAL_VOID, NULL, NULL,
32785:                                  JSPROP_SHARED);
32785:     }
32785: 
23126:     cpx = split_get_private(cx, obj);
23126:     if (!cpx)
23126:         return JS_TRUE;
23126:     if (!cpx->isInner && cpx->inner) {
23126:         jsid asId;
23126:         JSProperty *prop;
23126: 
23126:         if (!JS_ValueToId(cx, id, &asId))
23126:             return JS_FALSE;
23126: 
31501:         if (!cpx->inner->lookupProperty(cx, asId, objp, &prop))
23126:             return JS_FALSE;
23126:         if (prop)
31501:             cpx->inner->dropProperty(cx, prop);
23126: 
23126:         return JS_TRUE;
23126:     }
23126: 
23126: #ifdef LAZY_STANDARD_CLASSES
23126:     if (!(flags & JSRESOLVE_ASSIGNING)) {
23126:         JSBool resolved;
23126: 
23126:         if (!JS_ResolveStandardClass(cx, obj, id, &resolved))
23126:             return JS_FALSE;
23126: 
23126:         if (resolved) {
23126:             *objp = obj;
23126:             return JS_TRUE;
23126:         }
23126:     }
23126: #endif
23126: 
23126:     /* XXX For additional realism, let's resolve some random property here. */
23126:     return JS_TRUE;
23126: }
23126: 
23126: static void
23126: split_finalize(JSContext *cx, JSObject *obj)
23126: {
23126:     JS_free(cx, JS_GetPrivate(cx, obj));
23126: }
23126: 
23126: static uint32
23126: split_mark(JSContext *cx, JSObject *obj, void *arg)
23126: {
23126:     ComplexObject *cpx;
23126: 
23126:     cpx = (ComplexObject *) JS_GetPrivate(cx, obj);
23126: 
23126:     if (!cpx->isInner && cpx->inner) {
23126:         /* Mark the inner object. */
23126:         JS_MarkGCThing(cx, cpx->inner, "ComplexObject.inner", arg);
23126:     }
23126: 
23126:     return 0;
23126: }
23126: 
23126: static JSObject *
23126: split_outerObject(JSContext *cx, JSObject *obj)
23126: {
23126:     ComplexObject *cpx;
23126: 
23126:     cpx = (ComplexObject *) JS_GetPrivate(cx, obj);
23126:     return cpx->isInner ? cpx->outer : obj;
23126: }
23126: 
32785: static JSObject *
32785: split_thisObject(JSContext *cx, JSObject *obj)
32785: {
32785:     OBJ_TO_OUTER_OBJECT(cx, obj);
32785:     if (!obj)
32785:         return NULL;
32785:     return obj;
32785: }
32785: 
32785: static JSObjectOps split_objectops;
32785: 
32785: static JSObjectOps *
32785: split_getObjectOps(JSContext *cx, JSClass *clasp)
32785: {
32785:     if (!split_objectops.thisObject) {
32785:         memcpy(&split_objectops, &js_ObjectOps, sizeof split_objectops);
32785:         split_objectops.thisObject = split_thisObject;
32785:     }
32785: 
32785:     return &split_objectops;
32785: }
32785: 
23126: static JSBool
23126: split_equality(JSContext *cx, JSObject *obj, jsval v, JSBool *bp);
23126: 
23126: static JSObject *
23126: split_innerObject(JSContext *cx, JSObject *obj)
23126: {
23126:     ComplexObject *cpx;
23126: 
23126:     cpx = (ComplexObject *) JS_GetPrivate(cx, obj);
23126:     if (cpx->frozen) {
23126:         JS_ASSERT(!cpx->isInner);
23126:         return obj;
23126:     }
23126:     return !cpx->isInner ? cpx->inner : obj;
23126: }
23126: 
23126: static JSExtendedClass split_global_class = {
23126:     {"split_global",
23126:     JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_HAS_PRIVATE |
23126:     JSCLASS_GLOBAL_FLAGS | JSCLASS_IS_EXTENDED,
23126:     split_addProperty, split_delProperty,
23126:     split_getProperty, split_setProperty,
23126:     (JSEnumerateOp)split_enumerate,
23126:     (JSResolveOp)split_resolve,
23126:     JS_ConvertStub, split_finalize,
32785:     split_getObjectOps, NULL, NULL, NULL, NULL, NULL,
23126:     split_mark, NULL},
23126:     split_equality, split_outerObject, split_innerObject,
23126:     NULL, NULL, NULL, NULL, NULL
23126: };
23126: 
23126: static JSBool
23126: split_equality(JSContext *cx, JSObject *obj, jsval v, JSBool *bp)
23126: {
23126:     *bp = JS_FALSE;
23126:     if (JSVAL_IS_PRIMITIVE(v))
23126:         return JS_TRUE;
23126: 
23126:     JSObject *obj2 = JSVAL_TO_OBJECT(v);
23126:     if (JS_GET_CLASS(cx, obj2) != &split_global_class.base)
23126:         return JS_TRUE;
23126: 
23126:     ComplexObject *cpx = (ComplexObject *) JS_GetPrivate(cx, obj2);
23126:     JS_ASSERT(!cpx->isInner);
23126: 
23126:     ComplexObject *ourCpx = (ComplexObject *) JS_GetPrivate(cx, obj);
23126:     JS_ASSERT(!ourCpx->isInner);
23126: 
23126:     *bp = (cpx == ourCpx);
23126:     return JS_TRUE;
23126: }
23126: 
23126: JSObject *
23126: split_create_outer(JSContext *cx)
23126: {
23126:     ComplexObject *cpx;
23126:     JSObject *obj;
23126: 
23126:     cpx = (ComplexObject *) JS_malloc(cx, sizeof *obj);
23126:     if (!cpx)
23126:         return NULL;
23126:     cpx->isInner = JS_FALSE;
23126:     cpx->frozen = JS_TRUE;
23126:     cpx->inner = NULL;
23126:     cpx->outer = NULL;
23126: 
23126:     obj = JS_NewObject(cx, &split_global_class.base, NULL, NULL);
23126:     if (!obj || !JS_SetParent(cx, obj, NULL)) {
23126:         JS_free(cx, cpx);
23126:         return NULL;
23126:     }
23126: 
23126:     if (!JS_SetPrivate(cx, obj, cpx)) {
23126:         JS_free(cx, cpx);
23126:         return NULL;
23126:     }
23126: 
23126:     return obj;
23126: }
23126: 
23126: static JSObject *
23126: split_create_inner(JSContext *cx, JSObject *outer)
23126: {
23126:     ComplexObject *cpx, *outercpx;
23126:     JSObject *obj;
23126: 
23126:     JS_ASSERT(JS_GET_CLASS(cx, outer) == &split_global_class.base);
23126: 
23126:     cpx = (ComplexObject *) JS_malloc(cx, sizeof *cpx);
23126:     if (!cpx)
23126:         return NULL;
23126:     cpx->isInner = JS_TRUE;
23126:     cpx->frozen = JS_FALSE;
23126:     cpx->inner = NULL;
23126:     cpx->outer = outer;
23126: 
23126:     obj = JS_NewObject(cx, &split_global_class.base, NULL, NULL);
23126:     if (!obj || !JS_SetParent(cx, obj, NULL) || !JS_SetPrivate(cx, obj, cpx)) {
23126:         JS_free(cx, cpx);
23126:         return NULL;
23126:     }
23126: 
23126:     outercpx = (ComplexObject *) JS_GetPrivate(cx, outer);
23126:     outercpx->inner = obj;
23126:     outercpx->frozen = JS_FALSE;
23126: 
23126:     return obj;
23126: }
23126: 
23126: static ComplexObject *
23126: split_get_private(JSContext *cx, JSObject *obj)
23126: {
23126:     do {
23126:         if (JS_GET_CLASS(cx, obj) == &split_global_class.base)
23126:             return (ComplexObject *) JS_GetPrivate(cx, obj);
23126:         obj = JS_GetParent(cx, obj);
23126:     } while (obj);
23126: 
23126:     return NULL;
23126: }
23126: 
23126: static JSBool
23126: sandbox_enumerate(JSContext *cx, JSObject *obj)
23126: {
23126:     jsval v;
23126:     JSBool b;
23126: 
30581:     if (!JS_GetProperty(cx, obj, "lazy", &v))
23126:         return JS_FALSE;
30581: 
30581:     JS_ValueToBoolean(cx, v, &b);
23126:     return !b || JS_EnumerateStandardClasses(cx, obj);
23126: }
23126: 
23126: static JSBool
23126: sandbox_resolve(JSContext *cx, JSObject *obj, jsval id, uintN flags,
23126:                 JSObject **objp)
23126: {
23126:     jsval v;
23126:     JSBool b, resolved;
23126: 
30581:     if (!JS_GetProperty(cx, obj, "lazy", &v))
23126:         return JS_FALSE;
30581: 
30581:     JS_ValueToBoolean(cx, v, &b);
23126:     if (b && (flags & JSRESOLVE_ASSIGNING) == 0) {
23126:         if (!JS_ResolveStandardClass(cx, obj, id, &resolved))
23126:             return JS_FALSE;
23126:         if (resolved) {
23126:             *objp = obj;
23126:             return JS_TRUE;
23126:         }
23126:     }
23126:     *objp = NULL;
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSClass sandbox_class = {
23126:     "sandbox",
38533:     JSCLASS_NEW_RESOLVE | JSCLASS_GLOBAL_FLAGS,
23126:     JS_PropertyStub,   JS_PropertyStub,
23126:     JS_PropertyStub,   JS_PropertyStub,
23126:     sandbox_enumerate, (JSResolveOp)sandbox_resolve,
30654:     JS_ConvertStub,    NULL,
23126:     JSCLASS_NO_OPTIONAL_MEMBERS
23126: };
23126: 
23126: static JSBool
23126: EvalInContext(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
23126:               jsval *rval)
23126: {
23126:     JSString *str;
23126:     JSObject *sobj;
23126:     JSContext *scx;
23126:     const jschar *src;
23126:     size_t srclen;
35108:     JSBool lazy, split, ok;
23126:     jsval v;
23126:     JSStackFrame *fp;
23126: 
23126:     sobj = NULL;
23126:     if (!JS_ConvertArguments(cx, argc, argv, "S / o", &str, &sobj))
23126:         return JS_FALSE;
23126: 
25087:     WITH_LOCKED_CONTEXT_LIST(
25087:         scx = JS_NewContext(JS_GetRuntime(cx), gStackChunkSize)
25087:     );
23126:     if (!scx) {
23126:         JS_ReportOutOfMemory(cx);
23126:         return JS_FALSE;
23126:     }
23126:     JS_SetOptions(scx, JS_GetOptions(cx));
23126: 
23126:     JS_BeginRequest(scx);
23126:     src = JS_GetStringChars(str);
23126:     srclen = JS_GetStringLength(str);
35118:     split = lazy = JS_FALSE;
35108:     if (srclen == 4) {
35108:         if (src[0] == 'l' && src[1] == 'a' && src[2] == 'z' && src[3] == 'y') {
23126:             lazy = JS_TRUE;
23126:             srclen = 0;
23126:         }
35108:     } else if (srclen == 5) {
35108:         if (src[0] == 's' && src[1] == 'p' && src[2] == 'l' && src[3] == 'i' && src[4] == 't') {
35108:             split = lazy = JS_TRUE;
35108:             srclen = 0;
35108:         }
35108:     }
23126: 
23126:     if (!sobj) {
35108:         sobj = split
35108:                ? split_setup(scx, JS_TRUE)
35108:                : JS_NewObject(scx, &sandbox_class, NULL, NULL);
23126:         if (!sobj || (!lazy && !JS_InitStandardClasses(scx, sobj))) {
23126:             ok = JS_FALSE;
23126:             goto out;
23126:         }
23126:         v = BOOLEAN_TO_JSVAL(lazy);
23126:         ok = JS_SetProperty(cx, sobj, "lazy", &v);
23126:         if (!ok)
23126:             goto out;
35108:         if (split)
35108:             sobj = split_outerObject(cx, sobj);
23126:     }
23126: 
23126:     if (srclen == 0) {
23126:         *rval = OBJECT_TO_JSVAL(sobj);
23126:         ok = JS_TRUE;
23126:     } else {
23126:         fp = JS_GetScriptedCaller(cx, NULL);
23126:         JS_SetGlobalObject(scx, sobj);
23126:         JS_ToggleOptions(scx, JSOPTION_DONT_REPORT_UNCAUGHT);
35108:         OBJ_TO_INNER_OBJECT(cx, sobj);
35108:         if (!sobj) {
35108:             ok = JS_FALSE;
35108:             goto out;
35108:         }
23126:         ok = JS_EvaluateUCScript(scx, sobj, src, srclen,
23126:                                  fp->script->filename,
23126:                                  JS_PCToLineNumber(cx, fp->script,
23126:                                                    fp->regs->pc),
23126:                                  rval);
23126:         if (!ok) {
23126:             if (JS_GetPendingException(scx, &v))
23126:                 JS_SetPendingException(cx, v);
23126:             else
23126:                 JS_ReportOutOfMemory(cx);
23126:         }
23126:     }
23126: 
23126: out:
23126:     JS_EndRequest(scx);
25087:     WITH_LOCKED_CONTEXT_LIST(
25087:         JS_DestroyContextNoGC(scx)
25087:     );
23126:     return ok;
23126: }
23126: 
23126: static JSBool
40276: EvalInFrame(JSContext *cx, uintN argc, jsval *vp)
40276: {
40276:     jsval *argv = JS_ARGV(cx, vp);
40276:     if (argc < 2 ||
40276:         !JSVAL_IS_INT(argv[0]) ||
40276:         !JSVAL_IS_STRING(argv[1])) {
40276:         JS_ReportError(cx, "Invalid arguments to evalInFrame");
40276:         return JS_FALSE;
40276:     }
40276: 
40276:     uint32 upCount = JSVAL_TO_INT(argv[0]);
40276:     JSString *str = JSVAL_TO_STRING(argv[1]);
40276: 
40276:     bool saveCurrent = JSVAL_IS_BOOLEAN(argv[2])
40276:                         ? (bool)JSVAL_TO_SPECIAL(argv[2])
40276:                         : false;
40276: 
40276:     JS_ASSERT(cx->fp);
40276: 
40276:     JSStackFrame *fp = cx->fp;
40276:     for (uint32 i = 0; i < upCount; ++i) {
40276:         if (!fp->down)
40276:             break;
40276:         fp = fp->down;
40276:     }
40276: 
40276:     if (!fp->script) {
40276:         JS_ReportError(cx, "cannot eval in non-script frame");
40276:         return JS_FALSE;
40276:     }
40276: 
40278:     JSStackFrame *oldfp = NULL;
40276:     if (saveCurrent)
40276:         oldfp = JS_SaveFrameChain(cx);
40276: 
40276:     JSBool ok = JS_EvaluateUCInStackFrame(cx, fp, str->chars(), str->length(),
40276:                                           fp->script->filename,
40276:                                           JS_PCToLineNumber(cx, fp->script,
40276:                                                             fp->regs->pc),
40276:                                           vp);
40276: 
40276:     if (saveCurrent)
40276:         JS_RestoreFrameChain(cx, oldfp);
40276: 
40276:     return ok;
40276: }
40276: 
40276: static JSBool
23126: ShapeOf(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     jsval v = JS_ARGV(cx, vp)[0];
23126:     if (!JSVAL_IS_OBJECT(v)) {
23126:         JS_ReportError(cx, "shapeOf: object expected");
23126:         return JS_FALSE;
23126:     }
27165:     JSObject *obj = JSVAL_TO_OBJECT(v);
27165:     if (!obj) {
27165:         *vp = JSVAL_ZERO;
27165:         return JS_TRUE;
27165:     }
27165:     if (!OBJ_IS_NATIVE(obj)) {
27165:         *vp = INT_TO_JSVAL(-1);
27165:         return JS_TRUE;
27165:     }
27165:     return JS_NewNumberValue(cx, OBJ_SHAPE(obj), vp);
23126: }
23126: 
23126: #ifdef JS_THREADSAFE
23126: 
25472: /*
25472:  * Check that t1 comes strictly before t2. The function correctly deals with
25472:  * PRIntervalTime wrap-around between t2 and t1 assuming that t2 and t1 stays
25472:  * within INT32_MAX from each other. We use MAX_TIMEOUT_INTERVAL to enforce
25472:  * this restriction.
25472:  */
25472: static bool
25472: IsBefore(PRIntervalTime t1, PRIntervalTime t2)
25472: {
25472:     return int32(t1 - t2) < 0;
25472: }
25472: 
23126: static JSBool
23126: Sleep_fn(JSContext *cx, uintN argc, jsval *vp)
23126: {
25472:     PRIntervalTime t_ticks;
25472: 
25472:     if (argc == 0) {
25472:         t_ticks = 0;
25472:     } else {
23126:         jsdouble t_secs;
23126: 
23126:         if (!JS_ValueToNumber(cx, argc == 0 ? JSVAL_VOID : vp[2], &t_secs))
23126:             return JS_FALSE;
23126: 
25472:         /* NB: The next condition also filter out NaNs. */
25472:         if (!(t_secs <= MAX_TIMEOUT_INTERVAL)) {
25472:             JS_ReportError(cx, "Excessive sleep interval");
25472:             return JS_FALSE;
25472:         }
25472:         t_ticks = (t_secs <= 0.0)
25472:                   ? 0
25472:                   : PRIntervalTime(PR_TicksPerSecond() * t_secs);
25472:     }
25472:     if (t_ticks == 0) {
25472:         JS_YieldRequest(cx);
25472:     } else {
25472:         jsrefcount rc = JS_SuspendRequest(cx);
25472:         PR_Lock(gWatchdogLock);
25472:         PRIntervalTime to_wakeup = PR_IntervalNow() + t_ticks;
25472:         for (;;) {
25472:             PR_WaitCondVar(gSleepWakeup, t_ticks);
25472:             if (gCanceled)
25472:                 break;
25472:             PRIntervalTime now = PR_IntervalNow();
25472:             if (!IsBefore(now, to_wakeup))
25472:                 break;
25472:             t_ticks = to_wakeup - now;
25472:         }
25472:         PR_Unlock(gWatchdogLock);
23126:         JS_ResumeRequest(cx, rc);
25472:     }
25472:     return !gCanceled;
23126: }
23126: 
23126: typedef struct ScatterThreadData ScatterThreadData;
23126: typedef struct ScatterData ScatterData;
23126: 
23126: typedef enum ScatterStatus {
23126:     SCATTER_WAIT,
23126:     SCATTER_GO,
23126:     SCATTER_CANCEL
23126: } ScatterStatus;
23126: 
23126: struct ScatterData {
23126:     ScatterThreadData   *threads;
23126:     jsval               *results;
23126:     PRLock              *lock;
23126:     PRCondVar           *cvar;
23126:     ScatterStatus       status;
23126: };
23126: 
23126: struct ScatterThreadData {
23126:     jsint               index;
23126:     ScatterData         *shared;
23126:     PRThread            *thr;
23126:     JSContext           *cx;
23126:     jsval               fn;
23126: };
23126: 
23126: static void
23126: DoScatteredWork(JSContext *cx, ScatterThreadData *td)
23126: {
23126:     jsval *rval = &td->shared->results[td->index];
23126: 
25087:     if (!JS_CallFunctionValue(cx, NULL, td->fn, 0, NULL, rval)) {
23126:         *rval = JSVAL_VOID;
23126:         JS_GetPendingException(cx, rval);
23126:         JS_ClearPendingException(cx);
23126:     }
23126: }
23126: 
23126: static void
23126: RunScatterThread(void *arg)
23126: {
26673:     int stackDummy;
23126:     ScatterThreadData *td;
23126:     ScatterStatus st;
23126:     JSContext *cx;
23126: 
26673:     if (PR_FAILURE == PR_SetThreadPrivate(gStackBaseThreadIndex, &stackDummy))
26673:         return;
26673: 
23126:     td = (ScatterThreadData *)arg;
23126:     cx = td->cx;
23126: 
25087:     /* Wait for our signal. */
23126:     PR_Lock(td->shared->lock);
23126:     while ((st = td->shared->status) == SCATTER_WAIT)
23126:         PR_WaitCondVar(td->shared->cvar, PR_INTERVAL_NO_TIMEOUT);
23126:     PR_Unlock(td->shared->lock);
23126: 
23126:     if (st == SCATTER_CANCEL)
23126:         return;
23126: 
25087:     /* We are good to go. */
23126:     JS_SetContextThread(cx);
26673:     SetThreadStackLimit(cx);
23126:     JS_BeginRequest(cx);
23126:     DoScatteredWork(cx, td);
23126:     JS_EndRequest(cx);
23126:     JS_ClearContextThread(cx);
23126: }
23126: 
23126: /*
23126:  * scatter(fnArray) - Call each function in `fnArray` without arguments, each
23126:  * in a different thread. When all threads have finished, return an array: the
23126:  * return values. Errors are not propagated; if any of the function calls
23126:  * fails, the corresponding element in the results array gets the exception
23126:  * object, if any, else (undefined).
23126:  */
23126: static JSBool
23126: Scatter(JSContext *cx, uintN argc, jsval *vp)
23126: {
23126:     jsuint i;
23126:     jsuint n;  /* number of threads */
23126:     JSObject *inArr;
23126:     JSObject *arr;
23126:     ScatterData sd;
23126:     JSBool ok;
23126:     jsrefcount rc;
23126: 
23126:     sd.lock = NULL;
23126:     sd.cvar = NULL;
23126:     sd.results = NULL;
23126:     sd.threads = NULL;
23126:     sd.status = SCATTER_WAIT;
23126: 
23126:     if (argc == 0 || JSVAL_IS_PRIMITIVE(JS_ARGV(cx, vp)[0])) {
23126:         JS_ReportError(cx, "the first argument must be an object");
23126:         goto fail;
23126:     }
23126: 
23126:     inArr = JSVAL_TO_OBJECT(JS_ARGV(cx, vp)[0]);
23126:     ok = JS_GetArrayLength(cx, inArr, &n);
23126:     if (!ok)
23126:         goto out;
23126:     if (n == 0)
23126:         goto success;
23126: 
23126:     sd.lock = PR_NewLock();
23126:     if (!sd.lock)
23126:         goto fail;
23126: 
23126:     sd.cvar = PR_NewCondVar(sd.lock);
23126:     if (!sd.cvar)
23126:         goto fail;
23126: 
23126:     sd.results = (jsval *) malloc(n * sizeof(jsval));
23126:     if (!sd.results)
23126:         goto fail;
23126:     for (i = 0; i < n; i++) {
23126:         sd.results[i] = JSVAL_VOID;
23126:         ok = JS_AddRoot(cx, &sd.results[i]);
23126:         if (!ok) {
23126:             while (i-- > 0)
23126:                 JS_RemoveRoot(cx, &sd.results[i]);
23126:             free(sd.results);
23126:             sd.results = NULL;
23126:             goto fail;
23126:         }
23126:     }
23126: 
23126:     sd.threads = (ScatterThreadData *) malloc(n * sizeof(ScatterThreadData));
23126:     if (!sd.threads)
23126:         goto fail;
23126:     for (i = 0; i < n; i++) {
23126:         sd.threads[i].index = i;
23126:         sd.threads[i].shared = &sd;
23126:         sd.threads[i].thr = NULL;
23126:         sd.threads[i].cx = NULL;
23126:         sd.threads[i].fn = JSVAL_NULL;
23126: 
23126:         ok = JS_AddRoot(cx, &sd.threads[i].fn);
23126:         if (ok && !JS_GetElement(cx, inArr, (jsint) i, &sd.threads[i].fn)) {
23126:             JS_RemoveRoot(cx, &sd.threads[i].fn);
23126:             ok = JS_FALSE;
23126:         }
23126:         if (!ok) {
23126:             while (i-- > 0)
23126:                 JS_RemoveRoot(cx, &sd.threads[i].fn);
23126:             free(sd.threads);
23126:             sd.threads = NULL;
23126:             goto fail;
23126:         }
23126:     }
23126: 
23126:     for (i = 1; i < n; i++) {
25087:         JSContext *newcx;
25087:         WITH_LOCKED_CONTEXT_LIST(
25087:             newcx = JS_NewContext(JS_GetRuntime(cx), 8192)
25087:         );
23126:         if (!newcx)
23126:             goto fail;
36243:         JS_BeginRequest(newcx);
23126:         JS_SetGlobalObject(newcx, JS_GetGlobalObject(cx));
36243:         JS_EndRequest(newcx);
23126:         JS_ClearContextThread(newcx);
23126:         sd.threads[i].cx = newcx;
23126:     }
23126: 
23126:     for (i = 1; i < n; i++) {
23126:         PRThread *t = PR_CreateThread(PR_USER_THREAD,
23126:                                       RunScatterThread,
23126:                                       &sd.threads[i],
23126:                                       PR_PRIORITY_NORMAL,
23126:                                       PR_GLOBAL_THREAD,
23126:                                       PR_JOINABLE_THREAD,
23126:                                       0);
23126:         if (!t) {
23126:             /* Failed to start thread. */
23126:             PR_Lock(sd.lock);
23126:             sd.status = SCATTER_CANCEL;
23126:             PR_NotifyAllCondVar(sd.cvar);
23126:             PR_Unlock(sd.lock);
23126:             while (i-- > 1)
23126:                 PR_JoinThread(sd.threads[i].thr);
23126:             goto fail;
23126:         }
23126: 
23126:         sd.threads[i].thr = t;
23126:     }
23126:     PR_Lock(sd.lock);
23126:     sd.status = SCATTER_GO;
23126:     PR_NotifyAllCondVar(sd.cvar);
23126:     PR_Unlock(sd.lock);
23126: 
23126:     DoScatteredWork(cx, &sd.threads[0]);
23126: 
23126:     rc = JS_SuspendRequest(cx);
23126:     for (i = 1; i < n; i++) {
23126:         PR_JoinThread(sd.threads[i].thr);
23126:     }
23126:     JS_ResumeRequest(cx, rc);
23126: 
23126: success:
23126:     arr = JS_NewArrayObject(cx, n, sd.results);
23126:     if (!arr)
23126:         goto fail;
23126:     *vp = OBJECT_TO_JSVAL(arr);
23126:     ok = JS_TRUE;
23126: 
23126: out:
23126:     if (sd.threads) {
23126:         JSContext *acx;
23126: 
23126:         for (i = 0; i < n; i++) {
23126:             JS_RemoveRoot(cx, &sd.threads[i].fn);
23126:             acx = sd.threads[i].cx;
23126:             if (acx) {
23126:                 JS_SetContextThread(acx);
25087:                 WITH_LOCKED_CONTEXT_LIST(
25087:                     JS_DestroyContext(acx)
25087:                 );
23126:             }
23126:         }
23126:         free(sd.threads);
23126:     }
23126:     if (sd.results) {
23126:         for (i = 0; i < n; i++)
23126:             JS_RemoveRoot(cx, &sd.results[i]);
23126:         free(sd.results);
23126:     }
23126:     if (sd.cvar)
23126:         PR_DestroyCondVar(sd.cvar);
23126:     if (sd.lock)
23126:         PR_DestroyLock(sd.lock);
23126: 
23126:     return ok;
23126: 
23126: fail:
23126:     ok = JS_FALSE;
23126:     goto out;
23126: }
23726: 
25472: static bool
25472: InitWatchdog(JSRuntime *rt)
25472: {
25472:     JS_ASSERT(!gWatchdogThread);
25472:     gWatchdogLock = PR_NewLock();
25472:     if (gWatchdogLock) {
25472:         gWatchdogWakeup = PR_NewCondVar(gWatchdogLock);
25472:         if (gWatchdogWakeup) {
25472:             gSleepWakeup = PR_NewCondVar(gWatchdogLock);
25472:             if (gSleepWakeup)
25472:                 return true;
25472:             PR_DestroyCondVar(gWatchdogWakeup);
25472:         }
25472:         PR_DestroyLock(gWatchdogLock);
25472:     }
25472:     return false;
25472: }
25472: 
25472: static void
25472: KillWatchdog()
25472: {
25472:     PRThread *thread;
25472: 
25472:     PR_Lock(gWatchdogLock);
25472:     thread = gWatchdogThread;
25472:     if (thread) {
25472:         /*
25472:          * The watchdog thread is running, tell it to terminate waking it up
25472:          * if necessary.
25472:          */
25472:         gWatchdogThread = NULL;
25472:         PR_NotifyCondVar(gWatchdogWakeup);
25472:     }
25472:     PR_Unlock(gWatchdogLock);
25472:     if (thread)
25472:         PR_JoinThread(thread);
25472:     PR_DestroyCondVar(gSleepWakeup);
25472:     PR_DestroyCondVar(gWatchdogWakeup);
25472:     PR_DestroyLock(gWatchdogLock);
25472: }
25472: 
23726: static void
23726: WatchdogMain(void *arg)
23726: {
23726:     JSRuntime *rt = (JSRuntime *) arg;
23726: 
25472:     PR_Lock(gWatchdogLock);
23726:     while (gWatchdogThread) {
25472:         PRIntervalTime now = PR_IntervalNow();
25472:          if (gWatchdogHasTimeout && !IsBefore(now, gWatchdogTimeout)) {
25472:             /*
25472:              * The timeout has just expired. Trigger the operation callback
25472:              * outside the lock.
25472:              */
25472:             gWatchdogHasTimeout = false;
25472:             PR_Unlock(gWatchdogLock);
25472:             CancelExecution(rt);
25472:             PR_Lock(gWatchdogLock);
25472: 
25472:             /* Wake up any threads doing sleep. */
25472:             PR_NotifyAllCondVar(gSleepWakeup);
25472:         } else {
25472:             PRIntervalTime sleepDuration = gWatchdogHasTimeout
25472:                                            ? gWatchdogTimeout - now
25472:                                            : PR_INTERVAL_NO_TIMEOUT;
23726: #ifdef DEBUG
23726:             PRStatus status =
23726: #endif
25472:                 PR_WaitCondVar(gWatchdogWakeup, sleepDuration);
23726:             JS_ASSERT(status == PR_SUCCESS);
23726:         }
25472:     }
25472:     PR_Unlock(gWatchdogLock);
25472: }
25472: 
25472: static bool
25472: ScheduleWatchdog(JSRuntime *rt, jsdouble t)
23726: {
25472:     if (t <= 0) {
25472:         PR_Lock(gWatchdogLock);
25472:         gWatchdogHasTimeout = false;
25472:         PR_Unlock(gWatchdogLock);
25472:         return true;
25472:     }
25472: 
25472:     PRIntervalTime interval = PRIntervalTime(ceil(t * PR_TicksPerSecond()));
25472:     PRIntervalTime timeout = PR_IntervalNow() + interval;
25472:     PR_Lock(gWatchdogLock);
25472:     if (!gWatchdogThread) {
25472:         JS_ASSERT(!gWatchdogHasTimeout);
23726:         gWatchdogThread = PR_CreateThread(PR_USER_THREAD,
23726:                                           WatchdogMain,
25087:                                           rt,
23726:                                           PR_PRIORITY_NORMAL,
23726:                                           PR_LOCAL_THREAD,
25472:                                           PR_JOINABLE_THREAD,
23726:                                           0);
23726:         if (!gWatchdogThread) {
25472:             PR_Unlock(gWatchdogLock);
25472:             return false;
25472:         }
25472:     } else if (!gWatchdogHasTimeout || IsBefore(timeout, gWatchdogTimeout)) {
25087:          PR_NotifyCondVar(gWatchdogWakeup);
25472:     }
25472:     gWatchdogHasTimeout = true;
25472:     gWatchdogTimeout = timeout;
25472:     PR_Unlock(gWatchdogLock);
25472:     return true;
25472: }
25472: 
25472: #else /* !JS_THREADSAFE */
25087: 
25087: #ifdef XP_WIN
25087: static HANDLE gTimerHandle = 0;
25087: 
25472: VOID CALLBACK
25472: TimerCallback(PVOID lpParameter, BOOLEAN TimerOrWaitFired)
25087: {
25479:     CancelExecution((JSRuntime *) lpParameter);
25472: }
25472: 
25472: #else
25472: 
25472: static void
25472: AlarmHandler(int sig)
25472: {
25472:     CancelExecution(gRuntime);
25472: }
25472: 
25087: #endif
25087: 
25472: static bool
25472: InitWatchdog(JSRuntime *rt)
25087: {
25472:     gRuntime = rt;
25472:     return true;
25472: }
25472: 
25472: static void
25472: KillWatchdog()
25472: {
25472:     ScheduleWatchdog(gRuntime, -1);
25472: }
25472: 
25472: static bool
25472: ScheduleWatchdog(JSRuntime *rt, jsdouble t)
25472: {
25087: #ifdef XP_WIN
25472:     if (gTimerHandle) {
25472:         DeleteTimerQueueTimer(NULL, gTimerHandle, NULL);
25472:         gTimerHandle = 0;
25472:     }
25472:     if (t > 0 &&
25472:         !CreateTimerQueueTimer(&gTimerHandle,
25087:                                NULL,
25087:                                (WAITORTIMERCALLBACK)TimerCallback,
25472:                                rt,
25472:                                DWORD(ceil(t * 1000.0)),
25472:                                0,
25472:                                WT_EXECUTEINTIMERTHREAD | WT_EXECUTEONLYONCE)) {
25472:         gTimerHandle = 0;
25472:         return false;
25472:     }
25087: #else
25472:     /* FIXME: use setitimer when available for sub-second resolution. */
25472:     if (t <= 0) {
25087:         alarm(0);
25087:         signal(SIGALRM, NULL);
25472:     } else {
25472:         signal(SIGALRM, AlarmHandler); /* set the Alarm signal capture */
25472:         alarm(ceil(t));
25472:     }
25087: #endif
25472:     return true;
25472: }
25472: 
25472: #endif /* !JS_THREADSAFE */
25472: 
25472: static void
25472: CancelExecution(JSRuntime *rt)
25472: {
25472:     gCanceled = true;
25472:     if (gExitCode == 0)
25472:         gExitCode = EXITCODE_TIMEOUT;
25472:     JS_TriggerAllOperationCallbacks(rt);
25472: 
25472:     static const char msg[] = "Script runs for too long, terminating.\n";
25472: #if defined(XP_UNIX) && !defined(JS_THREADSAFE)
25472:     /* It is not safe to call fputs from signals. */
40249:     /* Dummy assignment avoids GCC warning on "attribute warn_unused_result" */
40249:     ssize_t dummy = write(2, msg, sizeof(msg) - 1);
40249:     (void)dummy;
25472: #else
25472:     fputs(msg, stderr);
25472: #endif
25472: }
23457: 
23457: static JSBool
23457: SetTimeoutValue(JSContext *cx, jsdouble t)
23457: {
23457:     /* NB: The next condition also filter out NaNs. */
25472:     if (!(t <= MAX_TIMEOUT_INTERVAL)) {
23726:         JS_ReportError(cx, "Excessive timeout value");
23457:         return JS_FALSE;
23457:     }
25472:     gTimeoutInterval = t;
25472:     if (!ScheduleWatchdog(cx->runtime, t)) {
25472:         JS_ReportError(cx, "Failed to create the watchdog");
23726:         return JS_FALSE;
23726:     }
23457:     return JS_TRUE;
23457: }
23457: 
23457: static JSBool
23457: Timeout(JSContext *cx, uintN argc, jsval *vp)
23457: {
25087:     if (argc == 0)
25472:         return JS_NewNumberValue(cx, gTimeoutInterval, vp);
23457: 
23457:     if (argc > 1) {
23457:         JS_ReportError(cx, "Wrong number of arguments");
23457:         return JS_FALSE;
23457:     }
23457: 
23457:     jsdouble t;
23457:     if (!JS_ValueToNumber(cx, JS_ARGV(cx, vp)[0], &t))
23457:         return JS_FALSE;
23457: 
23457:     *vp = JSVAL_VOID;
23457:     return SetTimeoutValue(cx, t);
23457: }
23126: 
25087: static JSBool
25087: Elapsed(JSContext *cx, uintN argc, jsval *vp)
25087: {
25087:     if (argc == 0) {
25087:         double d = 0.0;
25087:         JSShellContextData *data = GetContextData(cx);
25087:         if (data)
25087:             d = js_IntervalNow() - data->startTime;
25087:         return JS_NewNumberValue(cx, d, vp);
25087:     }
25087:     JS_ReportError(cx, "Wrong number of arguments");
25087:     return JS_FALSE;
25087: }
25087: 
24148: #ifdef XP_UNIX
24148: 
24148: #include <fcntl.h>
24148: #include <sys/stat.h>
24148: 
24148: /*
24148:  * Returns a JS_malloc'd string (that the caller needs to JS_free)
24148:  * containing the directory (non-leaf) part of |from| prepended to |leaf|.
24148:  * If |from| is empty or a leaf, MakeAbsolutePathname returns a copy of leaf.
24148:  * Returns NULL to indicate an error.
24148:  */
24148: static char *
24148: MakeAbsolutePathname(JSContext *cx, const char *from, const char *leaf)
24148: {
24148:     size_t dirlen;
24148:     char *dir;
24148:     const char *slash = NULL, *cp;
24148: 
24148:     cp = from;
24148:     while (*cp) {
24148:         if (*cp == '/') {
24148:             slash = cp;
24148:         }
24148: 
24148:         ++cp;
24148:     }
24148: 
24148:     if (!slash) {
24148:         /* We were given a leaf or |from| was empty. */
24148:         return JS_strdup(cx, leaf);
24148:     }
24148: 
24148:     /* Else, we were given a real pathname, return that + the leaf. */
24148:     dirlen = slash - from + 1;
24148:     dir = (char*) JS_malloc(cx, dirlen + strlen(leaf) + 1);
24148:     if (!dir)
24148:         return NULL;
24148: 
24148:     strncpy(dir, from, dirlen);
24148:     strcpy(dir + dirlen, leaf); /* Note: we can't use strcat here. */
24148: 
24148:     return dir;
24148: }
24148: 
24148: #endif // XP_UNIX
24148: 
24148: static JSBool
39934: Compile(JSContext *cx, uintN argc, jsval *vp)
39934: {
39934:     if (argc < 1) {
39934:         JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL, JSMSG_MORE_ARGS_NEEDED,
39934:                              "compile", "0", "s");
39934:         return JS_FALSE;
39934:     }
39934:     jsval arg0 = JS_ARGV(cx, vp)[0];
39934:     if (!JSVAL_IS_STRING(arg0)) {
39934:         const char *typeName = JS_GetTypeName(cx, JS_TypeOfValue(cx, arg0));
39934:         JS_ReportError(cx, "expected string to compile, got %s", typeName);
39934:         return JS_FALSE;
39934:     }
39934: 
39934:     JSString *scriptContents = JSVAL_TO_STRING(arg0);
39934:     JSScript *result = JS_CompileUCScript(cx, NULL, JS_GetStringCharsZ(cx, scriptContents),
39934:                                           JS_GetStringLength(scriptContents), "<string>", 0);
39934:     if (!result)
39934:         return JS_FALSE;
39934: 
39934:     JS_DestroyScript(cx, result);
39934:     JS_SET_RVAL(cx, vp, JSVAL_VOID);
39934:     return JS_TRUE;
39934: }
39934: 
39934: static JSBool
24148: Snarf(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
24148: {
24148:     JSString *str;
24148:     const char *filename;
24148:     const char *pathname;
24148:     JSStackFrame *fp;
24148:     JSBool ok;
24148:     size_t cc, len;
24148:     char *buf;
24148:     FILE *file;
24148: 
24148:     str = JS_ValueToString(cx, argv[0]);
24148:     if (!str)
24148:         return JS_FALSE;
24148:     filename = JS_GetStringBytes(str);
24148: 
24148:     /* Get the currently executing script's name. */
24148:     fp = JS_GetScriptedCaller(cx, NULL);
24148:     JS_ASSERT(fp && fp->script->filename);
24148: #ifdef XP_UNIX
24148:     pathname = MakeAbsolutePathname(cx, fp->script->filename, filename);
24148:     if (!pathname)
24148:         return JS_FALSE;
24148: #else
24148:     pathname = filename;
24148: #endif
24148: 
24148:     ok = JS_FALSE;
24148:     len = 0;
24148:     buf = NULL;
24148:     file = fopen(pathname, "rb");
24148:     if (!file) {
24148:         JS_ReportError(cx, "can't open %s: %s", pathname, strerror(errno));
24148:     } else {
24148:         if (fseek(file, 0, SEEK_END) == EOF) {
24148:             JS_ReportError(cx, "can't seek end of %s", pathname);
24148:         } else {
24148:             len = ftell(file);
24148:             if (fseek(file, 0, SEEK_SET) == EOF) {
24148:                 JS_ReportError(cx, "can't seek start of %s", pathname);
24148:             } else {
24148:                 buf = (char*) JS_malloc(cx, len + 1);
24148:                 if (buf) {
24148:                     cc = fread(buf, 1, len, file);
24148:                     if (cc != len) {
24148:                         JS_ReportError(cx, "can't read %s: %s", pathname,
24148:                                        (ptrdiff_t(cc) < 0) ? strerror(errno) : "short read");
24148:                     } else {
24148:                         len = (size_t)cc;
24148:                         ok = JS_TRUE;
24148:                     }
24148:                 }
24148:             }
24148:         }
24148:         fclose(file);
24148:     }
24148:     JS_free(cx, (void*)pathname);
24148:     if (!ok) {
24148:         JS_free(cx, buf);
24148:         return ok;
24148:     }
24148: 
24148:     buf[len] = '\0';
24148:     str = JS_NewString(cx, buf, len);
24148:     if (!str) {
24148:         JS_free(cx, buf);
24148:         return JS_FALSE;
24148:     }
24148:     *rval = STRING_TO_JSVAL(str);
24148:     return JS_TRUE;
24148: }
24148: 
23126: /* We use a mix of JS_FS and JS_FN to test both kinds of natives. */
23126: static JSFunctionSpec shell_functions[] = {
23126:     JS_FS("version",        Version,        0,0,0),
23126:     JS_FS("options",        Options,        0,0,0),
23126:     JS_FS("load",           Load,           1,0,0),
23126:     JS_FN("readline",       ReadLine,       0,0),
27165:     JS_FN("print",          Print,          0,0),
23126:     JS_FS("help",           Help,           0,0,0),
23126:     JS_FS("quit",           Quit,           0,0,0),
27165:     JS_FN("assertEq",       AssertEq,       2,0),
30450:     JS_FN("gc",             ::GC,           0,0),
36680: #ifdef JS_GCMETER
36680:     JS_FN("gcstats",        GCStats,        0,0),
36680: #endif
23126:     JS_FN("gcparam",        GCParameter,    2,0),
23126:     JS_FN("countHeap",      CountHeap,      0,0),
23126: #ifdef JS_GC_ZEAL
23126:     JS_FN("gczeal",         GCZeal,         1,0),
23126: #endif
23126:     JS_FS("trap",           Trap,           3,0,0),
23126:     JS_FS("untrap",         Untrap,         2,0,0),
23126:     JS_FS("line2pc",        LineToPC,       0,0,0),
23126:     JS_FS("pc2line",        PCToLine,       0,0,0),
23126:     JS_FN("stackQuota",     StackQuota,     0,0),
23126:     JS_FS("stringsAreUTF8", StringsAreUTF8, 0,0,0),
23126:     JS_FS("testUTF8",       TestUTF8,       1,0,0),
23126:     JS_FS("throwError",     ThrowError,     0,0,0),
23126: #ifdef DEBUG
23126:     JS_FS("dis",            Disassemble,    1,0,0),
23126:     JS_FS("disfile",        DisassFile,     1,0,0),
23126:     JS_FS("dissrc",         DisassWithSrc,  1,0,0),
23126:     JS_FN("dumpHeap",       DumpHeap,       0,0),
23126:     JS_FS("notes",          Notes,          1,0,0),
23126:     JS_FS("tracing",        Tracing,        0,0,0),
23126:     JS_FS("stats",          DumpStats,      1,0,0),
23126: #endif
23126: #ifdef TEST_CVTARGS
23126:     JS_FS("cvtargs",        ConvertArgs,    0,0,12),
23126: #endif
23126:     JS_FN("build",          BuildDate,      0,0),
23126:     JS_FS("clear",          Clear,          0,0,0),
23126:     JS_FN("intern",         Intern,         1,0),
23126:     JS_FS("clone",          Clone,          1,0,0),
23126:     JS_FS("seal",           Seal,           1,0,1),
23126:     JS_FN("getpda",         GetPDA,         1,0),
23126:     JS_FN("getslx",         GetSLX,         1,0),
23126:     JS_FN("toint32",        ToInt32,        1,0),
23126:     JS_FS("evalcx",         EvalInContext,  1,0,0),
40276:     JS_FN("evalInFrame",    EvalInFrame,    2,0),
27165:     JS_FN("shapeOf",        ShapeOf,        1,0),
23126: #ifdef MOZ_SHARK
23126:     JS_FS("startShark",     js_StartShark,      0,0,0),
23126:     JS_FS("stopShark",      js_StopShark,       0,0,0),
23126:     JS_FS("connectShark",   js_ConnectShark,    0,0,0),
23126:     JS_FS("disconnectShark",js_DisconnectShark, 0,0,0),
23126: #endif
23126: #ifdef MOZ_CALLGRIND
23126:     JS_FS("startCallgrind", js_StartCallgrind,  0,0,0),
23126:     JS_FS("stopCallgrind",  js_StopCallgrind,   0,0,0),
23126:     JS_FS("dumpCallgrind",  js_DumpCallgrind,   1,0,0),
23126: #endif
23126: #ifdef MOZ_VTUNE
23126:     JS_FS("startVtune",     js_StartVtune,    1,0,0),
23126:     JS_FS("stopVtune",      js_StopVtune,     0,0,0),
23126:     JS_FS("pauseVtune",     js_PauseVtune,    0,0,0),
23126:     JS_FS("resumeVtune",    js_ResumeVtune,   0,0,0),
23126: #endif
29368: #ifdef MOZ_TRACEVIS
38585:     JS_FS("startTraceVis",  StartTraceVisNative, 1,0,0),
38585:     JS_FS("stopTraceVis",   StopTraceVisNative,  0,0,0),
29368: #endif
23126: #ifdef DEBUG_ARRAYS
23126:     JS_FS("arrayInfo",      js_ArrayInfo,       1,0,0),
23126: #endif
23126: #ifdef JS_THREADSAFE
23126:     JS_FN("sleep",          Sleep_fn,       1,0),
23126:     JS_FN("scatter",        Scatter,        1,0),
23126: #endif
24148:     JS_FS("snarf",          Snarf,        0,0,0),
39934:     JS_FN("compile",        Compile,        1,0),
23457:     JS_FN("timeout",        Timeout,        1,0),
25087:     JS_FN("elapsed",        Elapsed,        0,0),
23126:     JS_FS_END
23126: };
23126: 
23126: static const char shell_help_header[] =
23126: "Command                  Description\n"
23126: "=======                  ===========\n";
23126: 
23126: static const char *const shell_help_messages[] = {
23126: "version([number])        Get or set JavaScript version number",
23126: "options([option ...])    Get or toggle JavaScript options",
23126: "load(['foo.js' ...])     Load files named by string arguments",
23126: "readline()               Read a single line from stdin",
23126: "print([exp ...])         Evaluate and print expressions",
23126: "help([name ...])         Display usage and help messages",
23126: "quit()                   Quit the shell",
32760: "assertEq(actual, expected[, msg])\n"
32760: "  Throw if the first two arguments are not the same (both +0 or both -0,\n"
32760: "  both NaN, or non-zero and ===)",
23126: "gc()                     Run the garbage collector",
36680: #ifdef JS_GCMETER
36680: "gcstats()                Print garbage collector statistics",
36680: #endif
23126: "gcparam(name, value)\n"
23126: "  Wrapper for JS_SetGCParameter. The name must be either 'maxBytes' or\n"
23126: "  'maxMallocBytes' and the value must be convertable to a positive uint32",
23126: "countHeap([start[, kind]])\n"
23126: "  Count the number of live GC things in the heap or things reachable from\n"
23126: "  start when it is given and is not null. kind is either 'all' (default) to\n"
23126: "  count all things or one of 'object', 'double', 'string', 'function',\n"
23126: "  'qname', 'namespace', 'xml' to count only things of that kind",
23126: #ifdef JS_GC_ZEAL
23126: "gczeal(level)            How zealous the garbage collector should be",
23126: #endif
23126: "trap([fun, [pc,]] exp)   Trap bytecode execution",
23126: "untrap(fun[, pc])        Remove a trap",
23126: "line2pc([fun,] line)     Map line number to PC",
23126: "pc2line(fun[, pc])       Map PC to line number",
23126: "stackQuota([number])     Query/set script stack quota",
23126: "stringsAreUTF8()         Check if strings are UTF-8 encoded",
23126: "testUTF8(mode)           Perform UTF-8 tests (modes are 1 to 4)",
23126: "throwError()             Throw an error from JS_ReportError",
23126: #ifdef DEBUG
23126: "dis([fun])               Disassemble functions into bytecodes",
23126: "disfile('foo.js')        Disassemble script file into bytecodes",
23126: "dissrc([fun])            Disassemble functions with source lines",
23126: "dumpHeap([fileName[, start[, toFind[, maxDepth[, toIgnore]]]]])\n"
23126: "  Interface to JS_DumpHeap with output sent to file",
23126: "notes([fun])             Show source notes for functions",
26954: "tracing([true|false|filename]) Turn bytecode execution tracing on/off.\n"
26954: "                         With filename, send to file.\n",
23126: "stats([string ...])      Dump 'arena', 'atom', 'global' stats",
23126: #endif
23126: #ifdef TEST_CVTARGS
23126: "cvtargs(arg1..., arg12)  Test argument formatter",
23126: #endif
23126: "build()                  Show build date and time",
23126: "clear([obj])             Clear properties of object",
23126: "intern(str)              Internalize str in the atom table",
23126: "clone(fun[, scope])      Clone function object",
23126: "seal(obj[, deep])        Seal object, or object graph if deep",
23126: "getpda(obj)              Get the property descriptors for obj",
23126: "getslx(obj)              Get script line extent",
23126: "toint32(n)               Testing hook for JS_ValueToInt32",
23126: "evalcx(s[, o])\n"
23126: "  Evaluate s in optional sandbox object o\n"
23126: "  if (s == '' && !o) return new o with eager standard classes\n"
35108: "  if (s == 'lazy' && !o) return new o with lazy standard classes\n"
35108: "  if (s == 'split' && !o) return new split-object o with lazy standard classes",
40276: "evalInFrame(n,str,save)  Evaluate 'str' in the nth up frame.\n"
40276: "                         If 'save' (default false), save the frame chain",
23126: "shapeOf(obj)             Get the shape of obj (an implementation detail)",
23126: #ifdef MOZ_SHARK
23126: "startShark()             Start a Shark session.\n"
23457: "                         Shark must be running with programatic sampling",
23457: "stopShark()              Stop a running Shark session",
23126: "connectShark()           Connect to Shark.\n"
23457: "                         The -k switch does this automatically",
23457: "disconnectShark()        Disconnect from Shark",
23126: #endif
23126: #ifdef MOZ_CALLGRIND
23457: "startCallgrind()         Start callgrind instrumentation",
23457: "stopCallgrind()          Stop callgrind instrumentation",
23457: "dumpCallgrind([name])    Dump callgrind counters",
23126: #endif
23126: #ifdef MOZ_VTUNE
23457: "startVtune([filename])   Start vtune instrumentation",
23457: "stopVtune()              Stop vtune instrumentation",
23457: "pauseVtune()             Pause vtune collection",
23457: "resumeVtune()            Resume vtune collection",
23126: #endif
29368: #ifdef MOZ_TRACEVIS
29368: "startTraceVis(filename)  Start TraceVis recording (stops any current recording)",
29368: "stopTraceVis()           Stop TraceVis recording",
29368: #endif
23126: #ifdef DEBUG_ARRAYS
23457: "arrayInfo(a1, a2, ...)   Report statistics about arrays",
23126: #endif
23126: #ifdef JS_THREADSAFE
23126: "sleep(dt)                Sleep for dt seconds",
23126: "scatter(fns)             Call functions concurrently (ignoring errors)",
23126: #endif
24148: "snarf(filename)          Read filename into returned string",
39934: "compile(code)            Parses a string, potentially throwing",
23457: "timeout([seconds])\n"
23457: "  Get/Set the limit in seconds for the execution time for the current context.\n"
23457: "  A negative value (default) means that the execution time is unlimited.",
25087: "elapsed()                Execution time elapsed for the current context.\n",
23126: };
23126: 
23126: /* Help messages must match shell functions. */
23126: JS_STATIC_ASSERT(JS_ARRAY_LENGTH(shell_help_messages) + 1 ==
23126:                  JS_ARRAY_LENGTH(shell_functions));
23126: 
23126: #ifdef DEBUG
23126: static void
23126: CheckHelpMessages()
23126: {
23126:     const char *const *m;
23126:     const char *lp;
23126: 
23126:     /* Each message must begin with "function_name(" prefix. */
23126:     for (m = shell_help_messages; m != JS_ARRAY_END(shell_help_messages); ++m) {
23126:         lp = strchr(*m, '(');
23126:         JS_ASSERT(lp);
23126:         JS_ASSERT(memcmp(shell_functions[m - shell_help_messages].name,
23126:                          *m, lp - *m) == 0);
23126:     }
23126: }
23126: #else
23126: # define CheckHelpMessages() ((void) 0)
23126: #endif
23126: 
23126: static JSBool
23126: Help(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     uintN i, j;
23126:     int did_header, did_something;
23126:     JSType type;
23126:     JSFunction *fun;
23126:     JSString *str;
23126:     const char *bytes;
23126: 
23126:     fprintf(gOutFile, "%s\n", JS_GetImplementationVersion());
23126:     if (argc == 0) {
23126:         fputs(shell_help_header, gOutFile);
23126:         for (i = 0; shell_functions[i].name; i++)
23126:             fprintf(gOutFile, "%s\n", shell_help_messages[i]);
23126:     } else {
23126:         did_header = 0;
23126:         for (i = 0; i < argc; i++) {
23126:             did_something = 0;
23126:             type = JS_TypeOfValue(cx, argv[i]);
23126:             if (type == JSTYPE_FUNCTION) {
23126:                 fun = JS_ValueToFunction(cx, argv[i]);
23126:                 str = fun->atom ? ATOM_TO_STRING(fun->atom) : NULL;
23126:             } else if (type == JSTYPE_STRING) {
23126:                 str = JSVAL_TO_STRING(argv[i]);
23126:             } else {
23126:                 str = NULL;
23126:             }
23126:             if (str) {
23126:                 bytes = JS_GetStringBytes(str);
23126:                 for (j = 0; shell_functions[j].name; j++) {
23126:                     if (!strcmp(bytes, shell_functions[j].name)) {
23126:                         if (!did_header) {
23126:                             did_header = 1;
23126:                             fputs(shell_help_header, gOutFile);
23126:                         }
23126:                         did_something = 1;
23126:                         fprintf(gOutFile, "%s\n", shell_help_messages[j]);
23126:                         break;
23126:                     }
23126:                 }
23126:             }
23126:             if (!did_something) {
23126:                 str = JS_ValueToString(cx, argv[i]);
23126:                 if (!str)
23126:                     return JS_FALSE;
23126:                 fprintf(gErrFile, "Sorry, no help for %s\n",
23126:                         JS_GetStringBytes(str));
23126:             }
23126:         }
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSObject *
35108: split_setup(JSContext *cx, JSBool evalcx)
23126: {
23126:     JSObject *outer, *inner, *arguments;
23126: 
23126:     outer = split_create_outer(cx);
23126:     if (!outer)
23126:         return NULL;
23126:     JS_SetGlobalObject(cx, outer);
23126: 
23126:     inner = split_create_inner(cx, outer);
23126:     if (!inner)
23126:         return NULL;
23126: 
35108:     if (!evalcx) {
23126:         if (!JS_DefineFunctions(cx, inner, shell_functions))
23126:             return NULL;
23126: 
23126:         /* Create a dummy arguments object. */
23126:         arguments = JS_NewArrayObject(cx, 0, NULL);
23126:         if (!arguments ||
23126:             !JS_DefineProperty(cx, inner, "arguments", OBJECT_TO_JSVAL(arguments),
23126:                                NULL, NULL, 0)) {
23126:             return NULL;
23126:         }
35108:     }
35108: 
35108:     JS_ClearScope(cx, outer);
23126: 
23126: #ifndef LAZY_STANDARD_CLASSES
23126:     if (!JS_InitStandardClasses(cx, inner))
23126:         return NULL;
23126: #endif
23126: 
23126:     return inner;
23126: }
23126: 
23126: /*
23126:  * Define a JS object called "it".  Give it class operations that printf why
23126:  * they're being called for tutorial purposes.
23126:  */
23126: enum its_tinyid {
26666:     ITS_COLOR, ITS_HEIGHT, ITS_WIDTH, ITS_FUNNY, ITS_ARRAY, ITS_RDONLY,
26666:     ITS_CUSTOM, ITS_CUSTOMRDONLY
23126: };
23126: 
26666: static JSBool
26666: its_getter(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
26666: {
26666:   jsval *val = (jsval *) JS_GetPrivate(cx, obj);
26666:   *vp = val ? *val : JSVAL_VOID;
26666:   return JS_TRUE;
26666: }
26666: 
26666: static JSBool
26666: its_setter(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
26666: {
26666:   jsval *val = (jsval *) JS_GetPrivate(cx, obj);
26666:   if (val) {
26666:       *val = *vp;
26666:       return JS_TRUE;
26666:   }
26666: 
26666:   val = new jsval;
26666:   if (!val) {
26666:       JS_ReportOutOfMemory(cx);
26666:       return JS_FALSE;
26666:   }
26666: 
26666:   if (!JS_AddRoot(cx, val)) {
26666:       delete val;
26666:       return JS_FALSE;
26666:   }
26666: 
26666:   if (!JS_SetPrivate(cx, obj, (void*)val)) {
26666:       JS_RemoveRoot(cx, val);
26666:       delete val;
26666:       return JS_FALSE;
26666:   }
26666: 
26666:   *val = *vp;
26666:   return JS_TRUE;
26666: }
26666: 
23126: static JSPropertySpec its_props[] = {
23126:     {"color",           ITS_COLOR,      JSPROP_ENUMERATE,       NULL, NULL},
23126:     {"height",          ITS_HEIGHT,     JSPROP_ENUMERATE,       NULL, NULL},
23126:     {"width",           ITS_WIDTH,      JSPROP_ENUMERATE,       NULL, NULL},
23126:     {"funny",           ITS_FUNNY,      JSPROP_ENUMERATE,       NULL, NULL},
23126:     {"array",           ITS_ARRAY,      JSPROP_ENUMERATE,       NULL, NULL},
23126:     {"rdonly",          ITS_RDONLY,     JSPROP_READONLY,        NULL, NULL},
26666:     {"custom",          ITS_CUSTOM,     JSPROP_ENUMERATE,
26666:                         its_getter,     its_setter},
26666:     {"customRdOnly",    ITS_CUSTOMRDONLY, JSPROP_ENUMERATE | JSPROP_READONLY,
26666:                         its_getter,     its_setter},
23126:     {NULL,0,0,NULL,NULL}
23126: };
23126: 
23126: static JSBool
23126: its_bindMethod(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
23126:                jsval *rval)
23126: {
23126:     char *name;
23126:     JSObject *method;
23126: 
23126:     if (!JS_ConvertArguments(cx, argc, argv, "so", &name, &method))
23126:         return JS_FALSE;
23126: 
23126:     *rval = OBJECT_TO_JSVAL(method);
23126: 
23126:     if (JS_TypeOfValue(cx, *rval) != JSTYPE_FUNCTION) {
23126:         JSString *valstr = JS_ValueToString(cx, *rval);
23126:         if (valstr) {
23126:             JS_ReportError(cx, "can't bind method %s to non-callable object %s",
23126:                            name, JS_GetStringBytes(valstr));
23126:         }
23126:         return JS_FALSE;
23126:     }
23126: 
23126:     if (!JS_DefineProperty(cx, obj, name, *rval, NULL, NULL, JSPROP_ENUMERATE))
23126:         return JS_FALSE;
23126: 
23126:     return JS_SetParent(cx, method, obj);
23126: }
23126: 
23126: static JSFunctionSpec its_methods[] = {
23126:     {"bindMethod",      its_bindMethod, 2,0,0},
23126:     {NULL,NULL,0,0,0}
23126: };
23126: 
23126: #ifdef JSD_LOWLEVEL_SOURCE
23126: /*
23126:  * This facilitates sending source to JSD (the debugger system) in the shell
23126:  * where the source is loaded using the JSFILE hack in jsscan. The function
23126:  * below is used as a callback for the jsdbgapi JS_SetSourceHandler hook.
23126:  * A more normal embedding (e.g. mozilla) loads source itself and can send
23126:  * source directly to JSD without using this hook scheme.
23126:  */
23126: static void
23126: SendSourceToJSDebugger(const char *filename, uintN lineno,
23126:                        jschar *str, size_t length,
23126:                        void **listenerTSData, JSDContext* jsdc)
23126: {
23126:     JSDSourceText *jsdsrc = (JSDSourceText *) *listenerTSData;
23126: 
23126:     if (!jsdsrc) {
23126:         if (!filename)
23126:             filename = "typein";
23126:         if (1 == lineno) {
23126:             jsdsrc = JSD_NewSourceText(jsdc, filename);
23126:         } else {
23126:             jsdsrc = JSD_FindSourceForURL(jsdc, filename);
23126:             if (jsdsrc && JSD_SOURCE_PARTIAL !=
23126:                 JSD_GetSourceStatus(jsdc, jsdsrc)) {
23126:                 jsdsrc = NULL;
23126:             }
23126:         }
23126:     }
23126:     if (jsdsrc) {
23126:         jsdsrc = JSD_AppendUCSourceText(jsdc,jsdsrc, str, length,
23126:                                         JSD_SOURCE_PARTIAL);
23126:     }
23126:     *listenerTSData = jsdsrc;
23126: }
23126: #endif /* JSD_LOWLEVEL_SOURCE */
23126: 
23126: static JSBool its_noisy;    /* whether to be noisy when finalizing it */
23126: static JSBool its_enum_fail;/* whether to fail when enumerating it */
23126: 
23126: static JSBool
23126: its_addProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
31366:     if (!its_noisy)
31366:         return JS_TRUE;
31366: 
31366:     ToString idString(cx, id);
31366:     fprintf(gOutFile, "adding its property %s,", idString.getBytes());
31366:     ToString valueString(cx, *vp);
31366:     fprintf(gOutFile, " initial value %s\n", valueString.getBytes());
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: its_delProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
31366:     if (!its_noisy)
31366:         return JS_TRUE;
31366: 
31366:     ToString idString(cx, id);
31366:     fprintf(gOutFile, "deleting its property %s,", idString.getBytes());
31366:     ToString valueString(cx, *vp);
31366:     fprintf(gOutFile, " initial value %s\n", valueString.getBytes());
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: its_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
31366:     if (!its_noisy)
31366:         return JS_TRUE;
31366: 
31366:     ToString idString(cx, id);
31366:     fprintf(gOutFile, "getting its property %s,", idString.getBytes());
31366:     ToString valueString(cx, *vp);
31366:     fprintf(gOutFile, " initial value %s\n", valueString.getBytes());
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: its_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
31366:     ToString idString(cx, id);
23126:     if (its_noisy) {
31366:         fprintf(gOutFile, "setting its property %s,", idString.getBytes());
31366:         ToString valueString(cx, *vp);
31366:         fprintf(gOutFile, " new value %s\n", valueString.getBytes());
23126:     }
23126: 
23126:     if (!JSVAL_IS_STRING(id))
23126:         return JS_TRUE;
23126: 
31366:     if (!strcmp(idString.getBytes(), "noisy"))
30581:         JS_ValueToBoolean(cx, *vp, &its_noisy);
31366:     else if (!strcmp(idString.getBytes(), "enum_fail"))
30581:         JS_ValueToBoolean(cx, *vp, &its_enum_fail);
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: /*
23126:  * Its enumerator, implemented using the "new" enumerate API,
23126:  * see class flags.
23126:  */
23126: static JSBool
23126: its_enumerate(JSContext *cx, JSObject *obj, JSIterateOp enum_op,
23126:               jsval *statep, jsid *idp)
23126: {
23126:     JSObject *iterator;
23126: 
23126:     switch (enum_op) {
23126:       case JSENUMERATE_INIT:
23126:         if (its_noisy)
23126:             fprintf(gOutFile, "enumerate its properties\n");
23126: 
23126:         iterator = JS_NewPropertyIterator(cx, obj);
23126:         if (!iterator)
23126:             return JS_FALSE;
23126: 
23126:         *statep = OBJECT_TO_JSVAL(iterator);
23126:         if (idp)
23126:             *idp = JSVAL_ZERO;
23126:         break;
23126: 
23126:       case JSENUMERATE_NEXT:
23126:         if (its_enum_fail) {
23126:             JS_ReportError(cx, "its enumeration failed");
23126:             return JS_FALSE;
23126:         }
23126: 
23126:         iterator = (JSObject *) JSVAL_TO_OBJECT(*statep);
23126:         if (!JS_NextProperty(cx, iterator, idp))
23126:             return JS_FALSE;
23126: 
23126:         if (!JSVAL_IS_VOID(*idp))
23126:             break;
23126:         /* Fall through. */
23126: 
23126:       case JSENUMERATE_DESTROY:
23126:         /* Allow our iterator object to be GC'd. */
23126:         *statep = JSVAL_NULL;
23126:         break;
23126:     }
23126: 
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: its_resolve(JSContext *cx, JSObject *obj, jsval id, uintN flags,
23126:             JSObject **objp)
23126: {
23126:     if (its_noisy) {
31366:         ToString idString(cx, id);
23126:         fprintf(gOutFile, "resolving its property %s, flags {%s,%s,%s}\n",
31366:                idString.getBytes(),
23126:                (flags & JSRESOLVE_QUALIFIED) ? "qualified" : "",
23126:                (flags & JSRESOLVE_ASSIGNING) ? "assigning" : "",
23126:                (flags & JSRESOLVE_DETECTING) ? "detecting" : "");
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: its_convert(JSContext *cx, JSObject *obj, JSType type, jsval *vp)
23126: {
23126:     if (its_noisy)
23126:         fprintf(gOutFile, "converting it to %s type\n", JS_GetTypeName(cx, type));
23126:     return JS_TRUE;
23126: }
23126: 
23126: static void
23126: its_finalize(JSContext *cx, JSObject *obj)
23126: {
26666:     jsval *rootedVal;
23126:     if (its_noisy)
23126:         fprintf(gOutFile, "finalizing it\n");
26666:     rootedVal = (jsval *) JS_GetPrivate(cx, obj);
26666:     if (rootedVal) {
26666:       JS_RemoveRoot(cx, rootedVal);
26666:       JS_SetPrivate(cx, obj, NULL);
26666:       delete rootedVal;
26666:     }
23126: }
23126: 
23126: static JSClass its_class = {
26666:     "It", JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_HAS_PRIVATE,
23126:     its_addProperty,  its_delProperty,  its_getProperty,  its_setProperty,
23126:     (JSEnumerateOp)its_enumerate, (JSResolveOp)its_resolve,
23126:     its_convert,      its_finalize,
23126:     JSCLASS_NO_OPTIONAL_MEMBERS
23126: };
23126: 
23126: JSErrorFormatString jsShell_ErrorFormatString[JSErr_Limit] = {
23126: #define MSG_DEF(name, number, count, exception, format) \
23126:     { format, count, JSEXN_ERR } ,
23126: #include "jsshell.msg"
23126: #undef MSG_DEF
23126: };
23126: 
23126: static const JSErrorFormatString *
23126: my_GetErrorMessage(void *userRef, const char *locale, const uintN errorNumber)
23126: {
23126:     if ((errorNumber > 0) && (errorNumber < JSShellErr_Limit))
23126:         return &jsShell_ErrorFormatString[errorNumber];
23126:     return NULL;
23126: }
23126: 
23126: static void
23126: my_ErrorReporter(JSContext *cx, const char *message, JSErrorReport *report)
23126: {
23126:     int i, j, k, n;
23126:     char *prefix, *tmp;
23126:     const char *ctmp;
23126: 
23126:     if (!report) {
23126:         fprintf(gErrFile, "%s\n", message);
23126:         return;
23126:     }
23126: 
23126:     /* Conditionally ignore reported warnings. */
23126:     if (JSREPORT_IS_WARNING(report->flags) && !reportWarnings)
23126:         return;
23126: 
23126:     prefix = NULL;
23126:     if (report->filename)
23126:         prefix = JS_smprintf("%s:", report->filename);
23126:     if (report->lineno) {
23126:         tmp = prefix;
23126:         prefix = JS_smprintf("%s%u: ", tmp ? tmp : "", report->lineno);
23126:         JS_free(cx, tmp);
23126:     }
23126:     if (JSREPORT_IS_WARNING(report->flags)) {
23126:         tmp = prefix;
23126:         prefix = JS_smprintf("%s%swarning: ",
23126:                              tmp ? tmp : "",
23126:                              JSREPORT_IS_STRICT(report->flags) ? "strict " : "");
23126:         JS_free(cx, tmp);
23126:     }
23126: 
23126:     /* embedded newlines -- argh! */
23126:     while ((ctmp = strchr(message, '\n')) != 0) {
23126:         ctmp++;
23126:         if (prefix)
23126:             fputs(prefix, gErrFile);
23126:         fwrite(message, 1, ctmp - message, gErrFile);
23126:         message = ctmp;
23126:     }
23126: 
23126:     /* If there were no filename or lineno, the prefix might be empty */
23126:     if (prefix)
23126:         fputs(prefix, gErrFile);
23126:     fputs(message, gErrFile);
23126: 
23126:     if (!report->linebuf) {
23126:         fputc('\n', gErrFile);
23126:         goto out;
23126:     }
23126: 
23126:     /* report->linebuf usually ends with a newline. */
23126:     n = strlen(report->linebuf);
23126:     fprintf(gErrFile, ":\n%s%s%s%s",
23126:             prefix,
23126:             report->linebuf,
23126:             (n > 0 && report->linebuf[n-1] == '\n') ? "" : "\n",
23126:             prefix);
25144:     n = report->tokenptr - report->linebuf;
23126:     for (i = j = 0; i < n; i++) {
23126:         if (report->linebuf[i] == '\t') {
23126:             for (k = (j + 8) & ~7; j < k; j++) {
23126:                 fputc('.', gErrFile);
23126:             }
23126:             continue;
23126:         }
23126:         fputc('.', gErrFile);
23126:         j++;
23126:     }
23126:     fputs("^\n", gErrFile);
23126:  out:
23126:     if (!JSREPORT_IS_WARNING(report->flags)) {
23126:         if (report->errorNumber == JSMSG_OUT_OF_MEMORY) {
23126:             gExitCode = EXITCODE_OUT_OF_MEMORY;
23126:         } else {
23126:             gExitCode = EXITCODE_RUNTIME_ERROR;
23126:         }
23126:     }
23126:     JS_free(cx, prefix);
23126: }
23126: 
23126: #if defined(SHELL_HACK) && defined(DEBUG) && defined(XP_UNIX)
23126: static JSBool
23126: Exec(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     JSFunction *fun;
23126:     const char *name, **nargv;
23126:     uintN i, nargc;
23126:     JSString *str;
23126:     pid_t pid;
23126:     int status;
23126: 
23126:     fun = JS_ValueToFunction(cx, argv[-2]);
23126:     if (!fun)
23126:         return JS_FALSE;
23126:     if (!fun->atom)
23126:         return JS_TRUE;
23126:     name = JS_GetStringBytes(ATOM_TO_STRING(fun->atom));
23126:     nargc = 1 + argc;
23126:     nargv = JS_malloc(cx, (nargc + 1) * sizeof(char *));
23126:     if (!nargv)
23126:         return JS_FALSE;
23126:     nargv[0] = name;
23126:     for (i = 1; i < nargc; i++) {
23126:         str = JS_ValueToString(cx, argv[i-1]);
23126:         if (!str) {
23126:             JS_free(cx, nargv);
23126:             return JS_FALSE;
23126:         }
23126:         nargv[i] = JS_GetStringBytes(str);
23126:     }
23126:     nargv[nargc] = 0;
23126:     pid = fork();
23126:     switch (pid) {
23126:       case -1:
23126:         perror("js");
23126:         break;
23126:       case 0:
23126:         (void) execvp(name, (char **)nargv);
23126:         perror("js");
23126:         exit(127);
23126:       default:
23126:         while (waitpid(pid, &status, 0) < 0 && errno == EINTR)
23126:             continue;
23126:         break;
23126:     }
23126:     JS_free(cx, nargv);
23126:     return JS_TRUE;
23126: }
23126: #endif
23126: 
23126: static JSBool
23126: global_enumerate(JSContext *cx, JSObject *obj)
23126: {
23126: #ifdef LAZY_STANDARD_CLASSES
23126:     return JS_EnumerateStandardClasses(cx, obj);
23126: #else
23126:     return JS_TRUE;
23126: #endif
23126: }
23126: 
23126: static JSBool
23126: global_resolve(JSContext *cx, JSObject *obj, jsval id, uintN flags,
23126:                JSObject **objp)
23126: {
23126: #ifdef LAZY_STANDARD_CLASSES
23126:     if ((flags & JSRESOLVE_ASSIGNING) == 0) {
23126:         JSBool resolved;
23126: 
23126:         if (!JS_ResolveStandardClass(cx, obj, id, &resolved))
23126:             return JS_FALSE;
23126:         if (resolved) {
23126:             *objp = obj;
23126:             return JS_TRUE;
23126:         }
23126:     }
23126: #endif
23126: 
23126: #if defined(SHELL_HACK) && defined(DEBUG) && defined(XP_UNIX)
23126:     if ((flags & (JSRESOLVE_QUALIFIED | JSRESOLVE_ASSIGNING)) == 0) {
23126:         /*
23126:          * Do this expensive hack only for unoptimized Unix builds, which are
23126:          * not used for benchmarking.
23126:          */
23126:         char *path, *comp, *full;
23126:         const char *name;
23126:         JSBool ok, found;
23126:         JSFunction *fun;
23126: 
23126:         if (!JSVAL_IS_STRING(id))
23126:             return JS_TRUE;
23126:         path = getenv("PATH");
23126:         if (!path)
23126:             return JS_TRUE;
23126:         path = JS_strdup(cx, path);
23126:         if (!path)
23126:             return JS_FALSE;
23126:         name = JS_GetStringBytes(JSVAL_TO_STRING(id));
23126:         ok = JS_TRUE;
23126:         for (comp = strtok(path, ":"); comp; comp = strtok(NULL, ":")) {
23126:             if (*comp != '\0') {
23126:                 full = JS_smprintf("%s/%s", comp, name);
23126:                 if (!full) {
23126:                     JS_ReportOutOfMemory(cx);
23126:                     ok = JS_FALSE;
23126:                     break;
23126:                 }
23126:             } else {
23126:                 full = (char *)name;
23126:             }
23126:             found = (access(full, X_OK) == 0);
23126:             if (*comp != '\0')
23126:                 free(full);
23126:             if (found) {
23126:                 fun = JS_DefineFunction(cx, obj, name, Exec, 0,
23126:                                         JSPROP_ENUMERATE);
23126:                 ok = (fun != NULL);
23126:                 if (ok)
23126:                     *objp = obj;
23126:                 break;
23126:             }
23126:         }
23126:         JS_free(cx, path);
23126:         return ok;
23126:     }
23126: #else
23126:     return JS_TRUE;
23126: #endif
23126: }
23126: 
23126: JSClass global_class = {
26666:     "global", JSCLASS_NEW_RESOLVE | JSCLASS_GLOBAL_FLAGS | JSCLASS_HAS_PRIVATE,
23126:     JS_PropertyStub,  JS_PropertyStub,
23126:     JS_PropertyStub,  JS_PropertyStub,
23126:     global_enumerate, (JSResolveOp) global_resolve,
26666:     JS_ConvertStub,   its_finalize,
23126:     JSCLASS_NO_OPTIONAL_MEMBERS
23126: };
23126: 
23126: static JSBool
23126: env_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp)
23126: {
23126: /* XXX porting may be easy, but these don't seem to supply setenv by default */
23126: #if !defined XP_BEOS && !defined XP_OS2 && !defined SOLARIS
23126:     int rv;
23126: 
31366:     ToString idstr(cx, id, JS_TRUE);
31366:     if (idstr.threw())
23126:         return JS_FALSE;
31366:     ToString valstr(cx, *vp, JS_TRUE);
31366:     if (valstr.threw())
31366:         return JS_FALSE;
23126: #if defined XP_WIN || defined HPUX || defined OSF1 || defined IRIX
23126:     {
31366:         char *waste = JS_smprintf("%s=%s", idstr.getBytes(), valstr.getBytes());
23126:         if (!waste) {
23126:             JS_ReportOutOfMemory(cx);
23126:             return JS_FALSE;
23126:         }
23126:         rv = putenv(waste);
23126: #ifdef XP_WIN
23126:         /*
23126:          * HPUX9 at least still has the bad old non-copying putenv.
23126:          *
23126:          * Per mail from <s.shanmuganathan@digital.com>, OSF1 also has a putenv
23126:          * that will crash if you pass it an auto char array (so it must place
23126:          * its argument directly in the char *environ[] array).
23126:          */
31366:         JS_smprintf_free(waste);
23126: #endif
23126:     }
23126: #else
31366:     rv = setenv(idstr.getBytes(), valstr.getBytes(), 1);
23126: #endif
23126:     if (rv < 0) {
31366:         JS_ReportError(cx, "can't set env variable %s to %s", idstr.getBytes(), valstr.getBytes());
23126:         return JS_FALSE;
23126:     }
31366:     *vp = valstr.getJSVal();
23126: #endif /* !defined XP_BEOS && !defined XP_OS2 && !defined SOLARIS */
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: env_enumerate(JSContext *cx, JSObject *obj)
23126: {
23126:     static JSBool reflected;
23126:     char **evp, *name, *value;
23126:     JSString *valstr;
23126:     JSBool ok;
23126: 
23126:     if (reflected)
23126:         return JS_TRUE;
23126: 
23126:     for (evp = (char **)JS_GetPrivate(cx, obj); (name = *evp) != NULL; evp++) {
23126:         value = strchr(name, '=');
23126:         if (!value)
23126:             continue;
23126:         *value++ = '\0';
23126:         valstr = JS_NewStringCopyZ(cx, value);
23126:         if (!valstr) {
23126:             ok = JS_FALSE;
23126:         } else {
23126:             ok = JS_DefineProperty(cx, obj, name, STRING_TO_JSVAL(valstr),
23126:                                    NULL, NULL, JSPROP_ENUMERATE);
23126:         }
23126:         value[-1] = '=';
23126:         if (!ok)
23126:             return JS_FALSE;
23126:     }
23126: 
23126:     reflected = JS_TRUE;
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSBool
23126: env_resolve(JSContext *cx, JSObject *obj, jsval id, uintN flags,
23126:             JSObject **objp)
23126: {
31366:     JSString *valstr;
23126:     const char *name, *value;
23126: 
23126:     if (flags & JSRESOLVE_ASSIGNING)
23126:         return JS_TRUE;
23126: 
31366:     ToString idstr(cx, id, JS_TRUE);
31366:     if (idstr.threw())
23126:         return JS_FALSE;
31366: 
31366:     name = idstr.getBytes();
23126:     value = getenv(name);
23126:     if (value) {
23126:         valstr = JS_NewStringCopyZ(cx, value);
23126:         if (!valstr)
23126:             return JS_FALSE;
23126:         if (!JS_DefineProperty(cx, obj, name, STRING_TO_JSVAL(valstr),
23126:                                NULL, NULL, JSPROP_ENUMERATE)) {
23126:             return JS_FALSE;
23126:         }
23126:         *objp = obj;
23126:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: static JSClass env_class = {
23126:     "environment", JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE,
23126:     JS_PropertyStub,  JS_PropertyStub,
23126:     JS_PropertyStub,  env_setProperty,
23126:     env_enumerate, (JSResolveOp) env_resolve,
30654:     JS_ConvertStub,   NULL,
23126:     JSCLASS_NO_OPTIONAL_MEMBERS
23126: };
23126: 
23126: #ifdef NARCISSUS
23126: 
23126: static JSBool
23126: defineProperty(JSContext *cx, JSObject *obj, uintN argc, jsval *argv,
23126:                jsval *rval)
23126: {
23126:     JSString *str;
23126:     jsval value;
23126:     JSBool dontDelete, readOnly, dontEnum;
23126:     const jschar *chars;
23126:     size_t length;
23126:     uintN attrs;
23126: 
23126:     dontDelete = readOnly = dontEnum = JS_FALSE;
23126:     if (!JS_ConvertArguments(cx, argc, argv, "Sv/bbb",
23126:                              &str, &value, &dontDelete, &readOnly, &dontEnum)) {
23126:         return JS_FALSE;
23126:     }
23126:     chars = JS_GetStringChars(str);
23126:     length = JS_GetStringLength(str);
23126:     attrs = dontEnum ? 0 : JSPROP_ENUMERATE;
23126:     if (dontDelete)
23126:         attrs |= JSPROP_PERMANENT;
23126:     if (readOnly)
23126:         attrs |= JSPROP_READONLY;
23126:     return JS_DefineUCProperty(cx, obj, chars, length, value, NULL, NULL,
23126:                                attrs);
23126: }
23126: 
23126: static JSBool
23126: Evaluate(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
23126: {
23126:     /* function evaluate(source, filename, lineno) { ... } */
23126:     JSString *source;
23126:     const char *filename = "";
23126:     jsuint lineno = 0;
23126:     uint32 oldopts;
23126:     JSBool ok;
23126: 
23126:     if (argc == 0) {
23126:         *rval = JSVAL_VOID;
23126:         return JS_TRUE;
23126:     }
23126: 
23126:     if (!JS_ConvertArguments(cx, argc, argv, "S/su",
23126:                              &source, &filename, &lineno)) {
23126:         return JS_FALSE;
23126:     }
23126: 
23126:     oldopts = JS_GetOptions(cx);
23126:     JS_SetOptions(cx, oldopts | JSOPTION_COMPILE_N_GO);
23126:     ok = JS_EvaluateUCScript(cx, obj, JS_GetStringChars(source),
23126:                              JS_GetStringLength(source), filename,
23126:                              lineno, rval);
23126:     JS_SetOptions(cx, oldopts);
23126: 
23126:     return ok;
23126: }
23126: 
23126: #endif /* NARCISSUS */
23126: 
23126: static JSBool
23126: ContextCallback(JSContext *cx, uintN contextOp)
23126: {
25087:     JSShellContextData *data;
25087:     
23457:     switch (contextOp) {
23457:       case JSCONTEXT_NEW: {
25087:         data = NewContextData();
23457:         if (!data)
23457:             return JS_FALSE;
23457:         JS_SetContextPrivate(cx, data);
23126:         JS_SetErrorReporter(cx, my_ErrorReporter);
23126:         JS_SetVersion(cx, JSVERSION_LATEST);
23126:         SetContextOptions(cx);
33747:         if (enableJit)
33747:             JS_ToggleOptions(cx, JSOPTION_JIT);
23457:         break;
25087:       case JSCONTEXT_DESTROY:
25087:         data = GetContextData(cx);
23457:         JS_SetContextPrivate(cx, NULL);
23457:         free(data);
23457:         break;
23457:       }
23457: 
23457:       default:
23457:         break;
23442:     }
23126:     return JS_TRUE;
23126: }
23126: 
23126: int
23126: main(int argc, char **argv, char **envp)
23126: {
23126:     int stackDummy;
23126:     JSRuntime *rt;
23126:     JSContext *cx;
23126:     JSObject *glob, *it, *envobj;
23126:     int result;
23126: #ifdef JSDEBUGGER
23126:     JSDContext *jsdc;
23126: #ifdef JSDEBUGGER_JAVA_UI
23126:     JNIEnv *java_env;
23126:     JSDJContext *jsdjc;
23126: #endif
23126: #ifdef JSDEBUGGER_C_UI
23126:     JSBool jsdbc;
23126: #endif /* JSDEBUGGER_C_UI */
23126: #endif /* JSDEBUGGER */
23126: 
23126:     CheckHelpMessages();
23126: #ifdef HAVE_SETLOCALE
23126:     setlocale(LC_ALL, "");
23126: #endif
26673: 
26673: #ifdef JS_THREADSAFE
26673:     if (PR_FAILURE == PR_NewThreadPrivateIndex(&gStackBaseThreadIndex, NULL) ||
26673:         PR_FAILURE == PR_SetThreadPrivate(gStackBaseThreadIndex, &stackDummy)) {
26673:         return 1;
26673:     }
26673: #else
23126:     gStackBase = (jsuword) &stackDummy;
26673: #endif
23126: 
23126: #ifdef XP_OS2
23126:    /* these streams are normally line buffered on OS/2 and need a \n, *
23126:     * so we need to unbuffer then to get a reasonable prompt          */
23126:     setbuf(stdout,0);
23126:     setbuf(stderr,0);
23126: #endif
23126: 
23126:     gErrFile = stderr;
23126:     gOutFile = stdout;
23126: 
23126:     argc--;
23126:     argv++;
23126: 
23126:     rt = JS_NewRuntime(64L * 1024L * 1024L);
23126:     if (!rt)
23126:         return 1;
23726: 
25472:     if (!InitWatchdog(rt))
23726:         return 1;
23726: 
23126:     JS_SetContextCallback(rt, ContextCallback);
23126: 
25087:     WITH_LOCKED_CONTEXT_LIST(
25087:         cx = JS_NewContext(rt, gStackChunkSize)
25087:     );
23126:     if (!cx)
23126:         return 1;
23126: 
27884:     JS_SetGCParameterForThread(cx, JSGC_MAX_CODE_CACHE_BYTES, 16 * 1024 * 1024);
27884: 
23126:     JS_BeginRequest(cx);
23126: 
23126:     glob = JS_NewObject(cx, &global_class, NULL, NULL);
23126:     if (!glob)
23126:         return 1;
23126: #ifdef LAZY_STANDARD_CLASSES
23126:     JS_SetGlobalObject(cx, glob);
23126: #else
23126:     if (!JS_InitStandardClasses(cx, glob))
23126:         return 1;
23126: #endif
23126:     if (!JS_DefineFunctions(cx, glob, shell_functions))
23126:         return 1;
23126: 
23126:     it = JS_DefineObject(cx, glob, "it", &its_class, NULL, 0);
23126:     if (!it)
23126:         return 1;
23126:     if (!JS_DefineProperties(cx, it, its_props))
23126:         return 1;
23126:     if (!JS_DefineFunctions(cx, it, its_methods))
23126:         return 1;
23126: 
26666:     if (!JS_DefineProperty(cx, glob, "custom", JSVAL_VOID, its_getter,
26666:                            its_setter, 0))
26666:         return 1;
26666:     if (!JS_DefineProperty(cx, glob, "customRdOnly", JSVAL_VOID, its_getter,
26666:                            its_setter, JSPROP_READONLY))
26666:         return 1;
26666: 
23126: #ifdef JSDEBUGGER
23126:     /*
23126:     * XXX A command line option to enable debugging (or not) would be good
23126:     */
23126:     jsdc = JSD_DebuggerOnForUser(rt, NULL, NULL);
23126:     if (!jsdc)
23126:         return 1;
23126:     JSD_JSContextInUse(jsdc, cx);
23126: #ifdef JSD_LOWLEVEL_SOURCE
23126:     JS_SetSourceHandler(rt, SendSourceToJSDebugger, jsdc);
23126: #endif /* JSD_LOWLEVEL_SOURCE */
23126: #ifdef JSDEBUGGER_JAVA_UI
23126:     jsdjc = JSDJ_CreateContext();
23126:     if (! jsdjc)
23126:         return 1;
23126:     JSDJ_SetJSDContext(jsdjc, jsdc);
23126:     java_env = JSDJ_CreateJavaVMAndStartDebugger(jsdjc);
23126:     /*
23126:     * XXX This would be the place to wait for the debugger to start.
23126:     * Waiting would be nice in general, but especially when a js file
23126:     * is passed on the cmd line.
23126:     */
23126: #endif /* JSDEBUGGER_JAVA_UI */
23126: #ifdef JSDEBUGGER_C_UI
23126:     jsdbc = JSDB_InitDebugger(rt, jsdc, 0);
23126: #endif /* JSDEBUGGER_C_UI */
23126: #endif /* JSDEBUGGER */
23126: 
23126:     envobj = JS_DefineObject(cx, glob, "environment", &env_class, NULL, 0);
23126:     if (!envobj || !JS_SetPrivate(cx, envobj, envp))
23126:         return 1;
23126: 
23126: #ifdef NARCISSUS
23126:     {
23126:         jsval v;
23126:         static const char Object_prototype[] = "Object.prototype";
23126: 
23126:         if (!JS_DefineFunction(cx, glob, "evaluate", Evaluate, 3, 0))
23126:             return 1;
23126: 
23126:         if (!JS_EvaluateScript(cx, glob,
23126:                                Object_prototype, sizeof Object_prototype - 1,
23126:                                NULL, 0, &v)) {
23126:             return 1;
23126:         }
23126:         if (!JS_DefineFunction(cx, JSVAL_TO_OBJECT(v), "__defineProperty__",
23126:                                defineProperty, 5, 0)) {
23126:             return 1;
23126:         }
23126:     }
23126: #endif
23126: 
23126:     result = ProcessArgs(cx, glob, argv, argc);
23126: 
23126: #ifdef JSDEBUGGER
23126:     if (jsdc) {
23126: #ifdef JSDEBUGGER_C_UI
23126:         if (jsdbc)
23126:             JSDB_TermDebugger(jsdc);
23126: #endif /* JSDEBUGGER_C_UI */
23126:         JSD_DebuggerOff(jsdc);
23126:     }
23126: #endif  /* JSDEBUGGER */
23126: 
23126:     JS_EndRequest(cx);
23126: 
32716:     JS_CommenceRuntimeShutDown(rt);
32716: 
25087:     WITH_LOCKED_CONTEXT_LIST( 
25087:         JS_DestroyContext(cx)
25087:     );
25087: 
25472:     KillWatchdog();
23726: 
23126:     JS_DestroyRuntime(rt);
23126:     JS_ShutDown();
23126:     return result;
23126: }
